\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-tk.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle pure-tk
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-tk: (pure-tk.info). pure-tk
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.59, February 04, 2014

Albert Gräf (Editor)

Copyright @copyright{} 2009-2014, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title pure-tk
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-tk
@insertcopying
@end ifnottex

@c %**start of body
@anchor{pure-tk doc}@anchor{1}
@geindex tk (module)

Version 0.4, January 28, 2014

Albert Graef <@email{aggraef@@gmail.com}>

Pure's Tcl/Tk@footnote{http://www.tcl.tk} interface.


@menu
* Introduction:: 
* Copying:: 
* Installation:: 
* Basic Usage:: 
* Callbacks:: 
* The Main Loop:: 
* Accessing Tcl Variables:: 
* Conversions Between Pure and Tcl Values:: 
* Tips and Tricks:: 
* Module Index:: 
* Index:: 

@end menu

@node Introduction,Copying,Top,Top
@anchor{pure-tk introduction}@anchor{2}@anchor{pure-tk module-tk}@anchor{0}@anchor{pure-tk pure-tk}@anchor{3}
@chapter Introduction


This module provides a basic interface between Pure and Tcl/Tk. The operations
of this module allow you to execute arbitrary commands in the Tcl interpreter,
set and retrieve variable values in the interpreter, and invoke Pure callbacks
from Tcl/Tk.

A recent version of Tcl/Tk is required (8.0 or later should do). You can get
this from @indicateurl{http://www.tcl.tk}. Both releases in source form and binary releases
for Windows and various Unix systems are provided there.

Some information on how to use this module can be found below. But you'll find
that pure-tk is very easy to use, so you might just want to look at the
programs in the examples folder to pick it up at a glance. A very basic
example can be found in tk_hello.pure; a slightly more advanced example of a
tiny but complete Tk application is in tk_examp.pure.

pure-tk also offers special support for Peter G. Baum's Gnocl@footnote{http://www.gnocl.org/} extension which
turns Tcl into a frontend for GTK+@footnote{http://www.gtk.org/} and Gnome@footnote{http://www.gnome.org/}. If you have Gnocl installed
then you can easily create GTK+/Gnome applications, either from Tcl sources or
from Glade@footnote{http://glade.gnome.org/} UI files, using the provided gnocl.pure module. See the included
uiexample.pure and the accompanying Glade UI file for a simple example. Also,
some basic information on using Gnocl with pure-tk can be found in the @pxref{4,,Tips and Tricks} section below.

One nice thing about Tcl/Tk is that it provides a bridge to a lot of other
useful libraries. A prominent example is VTK@footnote{http://www.vtk.org/}, a powerful open-source 3D
visualization toolkit which comes with full Tcl/Tk bindings. The examples
directory contains a simple example (earth.pure and earth.tcl) which shows how
you can employ these bindings to write cool animated 3D applications using
either Tk or Gnocl as the GUI toolkit.

@node Copying,Installation,Introduction,Top
@anchor{pure-tk vtk}@anchor{5}@anchor{pure-tk copying}@anchor{6}
@chapter Copying


Copyright (c) 2010 by Albert Gräf, all rights reserved. pure-tk is distributed
under a BSD-style license, see the COPYING file for details.

@node Installation,Basic Usage,Copying,Top
@anchor{pure-tk installation}@anchor{7}
@chapter Installation


Get the latest source from
@indicateurl{https://bitbucket.org/purelang/pure-lang/downloads/pure-tk-0.4.tar.gz}.

As with the other addon modules for Pure, running @code{make && sudo make
install} should usually do the trick. This requires that you have Pure and
Tcl/Tk installed. @code{make} tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some variables
manually. In particular, @code{make install prefix=/usr} sets the installation
prefix. Please see the Makefile for details.

@cartouche
@quotation Note 
When starting a new interpreter, the Tcl/Tk initialization code
looks for some initialization files which it executes before anything else
happens. Usually these files will be found without any further ado, but if
that does not happen automatically, you must set the TCL_LIBRARY and
TK_LIBRARY environment variables to point to the Tcl and Tk library
directories on your system.
@end quotation
@end cartouche

All programs in the examples subdirectory have been set up so that they can be
compiled to native executables, and a Makefile is provided in that directory
to handle this. So after installing pure-tk you just need to type @code{make}
there to compile the examples. (This step isn't necessary, though, you can
also just run the examples with the Pure interpreter as usual.)

@node Basic Usage,Callbacks,Installation,Top
@anchor{pure-tk basic-usage}@anchor{8}
@chapter Basic Usage


@geindex tk (function)
@anchor{pure-tk tk}@anchor{9}
@deffn {Pure Function} tk cmd

execute a Tcl command
@end deffn

You can submit a command to the Tcl interpreter with @code{tk cmd} where @code{cmd}
is a string containing the command to be executed. If the Tcl command returns
a value (i.e., a nonempty string) then @pxref{9,,tk} returns that string,
otherwise it returns @code{()}.

@pxref{9,,tk} also starts a new instance of the Tcl interpreter if it is not
already running. To stop the Tcl interpreter, you can use the @pxref{a,,tk_quit}
function.

@geindex tk_quit (function)
@anchor{pure-tk tk_quit}@anchor{a}
@deffn {Pure Function} tk_quit

stop the Tcl interpreter
@end deffn

Note that, as far as pure-tk is concerned, there's only one Tcl interpreter
per process, but of course you can create secondary interpreter instances in
the Tcl interpreter using the appropriate Tcl commands.

Simple dialogs can be created directly using Tk's @code{tk_messageBox} and
@code{tk_dialog} functions. For instance:

@example
tk "tk_dialog .warning \"Warning\" \"Are you sure?\" warning 0 Yes No Cancel";
@end example

@noindent

Other kinds of common dialogs are available; see the Tcl/Tk manual for
information.

For more elaborate applications you probably have to explicitly create some
widgets, add the appropriate callbacks and provide a main loop which takes
care of processing events in the Tcl/Tk GUI. We discuss this in the following.

@node Callbacks,The Main Loop,Basic Usage,Top
@anchor{pure-tk callbacks}@anchor{b}
@chapter Callbacks


pure-tk installs a special Tcl command named @code{pure} in the interpreter which
can be used to implement callbacks in Pure. This command is invoked from Tcl
as follows:

@example
pure function args ...
@end example

@noindent

It calls the Pure function named by the first argument, passing any remaining
(string) arguments to the callback. If the Pure callback returns a (nonempty)
string, that value becomes the return value of the @code{pure} command, otherwise
the result returned to the Tcl interpreter is empty.

Pure callbacks are installed on Tk widgets just like any other, just using the
@code{pure} command as the actual callback command. For instance, you can define
a callback which gets invoked when a button is pushed as follows:

@example
using tk, system;
tk "button .b -text @{Hello, world!@} -command @{pure hello@}; pack .b";
hello = puts "Hello, world!";
@end example

@noindent

@node The Main Loop,Accessing Tcl Variables,Callbacks,Top
@anchor{pure-tk the-main-loop}@anchor{c}
@chapter The Main Loop


@geindex tk_main (function)
@anchor{pure-tk tk_main}@anchor{d}
@deffn {Pure Function} tk_main

call the Tk main loop
@end deffn

The easiest way to provide a main loop for your application is to just call
@pxref{d,,tk_main} which keeps processing events in the Tcl interpreter until the
interpreter is exited. You can terminate the interpreter in a Pure callback by
calling @pxref{a,,tk_quit}. Thus a minimalistic Tcl/Tk application coded in Pure
may look as follows:

@example
using tk;
tk "button .b -text @{Hello, world!@} -command @{pure tk_quit@}; pack .b";
tk_main;
@end example

@noindent

The main loop terminates as soon as the Tcl interpreter is exited, which can
happen, e.g., in response to a callback which invokes the @pxref{a,,tk_quit}
function (as shown above) or Tcl code which destroys the main window
(@code{destroy .}).  The user can also close the main window from the window
manager in order to exit the main loop.

@node Accessing Tcl Variables,Conversions Between Pure and Tcl Values,The Main Loop,Top
@anchor{pure-tk accessing-tcl-variables}@anchor{e}
@chapter Accessing Tcl Variables


@geindex tk_set (function)
@geindex tk_unset (function)
@geindex tk_get (function)
@anchor{pure-tk tk_set}@anchor{f}
@deffn {Pure Function} tk_set var val
@anchor{pure-tk tk_unset}@anchor{10}
@deffnx {Pure Function} tk_unset var
@anchor{pure-tk tk_get}@anchor{11}
@deffnx {Pure Function} tk_get var

set and get Tcl variables
@end deffn

pure-tk allows your script to set and retrieve variable values in the Tcl
interpreter with the @pxref{f,,tk_set}, @pxref{10,,tk_unset} and @pxref{11,,tk_get}
functions. This is useful, e.g., to change the variables associated with entry
and button widgets, and to retrieve the current values from the
application. For instance:

@example
> tk_set "entry_val" "some string";
"some string"
> tk_get "entry_val";
"some string"
> tk_unset "entry_val";
()
> tk_get "entry_val";
tk_get "entry_val"
@end example

@noindent

Note that @pxref{f,,tk_set} returns the assigned value, so it is possible to chain
such calls if several variables have to be set to the same value:

@example
> tk_set "foo" $ tk_set "bar" "yes";
"yes"
> map tk_get ["foo","bar"];
["yes","yes"]
@end example

@noindent

@node Conversions Between Pure and Tcl Values,Tips and Tricks,Accessing Tcl Variables,Top
@anchor{pure-tk conversions-between-pure-and-tcl-values}@anchor{12}
@chapter Conversions Between Pure and Tcl Values


As far as pure-tk is concerned, all Tcl values are strings (in fact, that's
just what they are at the Tcl language level, although the Tcl interpreter
uses more elaborate representations of objects such as lists internally).
There are no automatic conversions of any kind. Thus, the arguments passed to
a Pure callback and the result returned by @pxref{9,,tk} are simply strings in
Pure land. The same holds for the @pxref{f,,tk_set} and @pxref{11,,tk_get} functions.

However, there are a few helper functions which can be used to convert between
Tcl and Pure data. First, the following operations convert Pure lists to
corresponding Tcl lists and vice versa:

@geindex tk_join (function)
@geindex tk_split (function)
@anchor{pure-tk tk_join}@anchor{13}
@deffn {Pure Function} tk_join xs
@anchor{pure-tk tk_split}@anchor{14}
@deffnx {Pure Function} tk_split s

convert between Pure and Tcl lists
@end deffn

@example
> tk_join ["0","1.0","Hello, world!"];
"0 1.0 @{Hello, world!@}"
> tk_split ans;
["0","1.0","Hello, world!"]
@end example

@noindent

The @pxref{15,,tk_str} and @pxref{16,,tk_val} operations work in a similar fashion,
but they also do automatic conversions for numeric values (ints, bigints and
doubles):

@geindex tk_str (function)
@geindex tk_val (function)
@anchor{pure-tk tk_str}@anchor{15}
@deffn {Pure Function} tk_str xs
@anchor{pure-tk tk_val}@anchor{16}
@deffnx {Pure Function} tk_val s

convert between Pure and Tcl values with numeric conversions
@end deffn

@example
> tk_str [0,1.0,"Hello, world!"];
"0 1.0 @{Hello, world!@}"
> tk_val ans;
[0,1.0,"Hello, world!"]
@end example

@noindent

In addition, these operations also convert single atomic values:

@example
> tk_str 1.0;
"1.0"
> tk_val ans;
1.0
@end example

@noindent

@node Tips and Tricks,Module Index,Conversions Between Pure and Tcl Values,Top
@anchor{pure-tk tips-and-tricks}@anchor{4}
@chapter Tips and Tricks


Here are a few other things that are worth keeping in mind when working with
pure-tk.


@itemize *

@item 
Errors in Tcl/Tk commands can be handled by giving an appropriate definition
of the @code{tk_error} function, which is invoked with an error message as
its single argument. For instance, the following implementation of
@code{tk_error} throws an exception:

@example
tk_error msg = throw msg;
@end example

@noindent

If no definition for this function is provided, then errors cause a literal
@code{tk_error msg} expression to be returned as the result of the @pxref{9,,tk}
function. You can then check for such results and take an appropriate
action.

@item 
The Tcl interpreter, when started, displays a default main window, which is
required by most Tk applications. If this is not desired (e.g., if only the
basic Tcl commands are needed), you can hide this window using a @code{tk "wm
withdraw ."} command. To redisplay the window when it is needed, use the
@code{tk "wm deiconify ."} command. It is also common practice to use @code{wm
withdraw} and @code{wm deiconify} while creating the widgets of an
application, in order to reduce "flickering".

@item 
Instead of calling @pxref{d,,tk_main}, you can also code your own main loop in
Pure as follows:

@example
main = do_something $$ main if tk_ready;
     = () otherwise;
@end example

@noindent

Note that the @code{tk_ready} function checks whether the Tcl interpreter
is still up and running, after processing any pending events in the
interpreter. This setup allows you to do your own custom idle processing in
Pure while the application is running. However, you have to be careful that
your @code{do_something} routine runs neither too short nor too long (a few
milliseconds should usually be ok). Otherwise your main loop may turn into a
busy loop and/or the GUI may become very sluggish and unresponsive. Thus
it's usually better to just call @pxref{d,,tk_main} and do any necessary
background processing using the Tcl interpreter's own facilities (e.g., by
setting up a Pure callback with the Tcl @code{after} command).

@item 
The @pxref{9,,tk} function can become rather tedious when coding larger Tk
applications. Usually, you will prefer to put the commands making up your
application into a separate Tcl script. One way to incorporate the Tcl
script into your your Pure program is to use the Tcl @code{source} command,
e.g.:

@example
tk "source myapp.tcl";
@end example

@noindent

However, this always requires the script to be available at runtime. Another
method is to read the script into a string which is assigned to a Pure
constant, and then invoke the @pxref{9,,tk} command on this string value:

@example
using system;
const ui = fget $ fopen "myapp.tcl" "r";
tk ui;
@end example

@noindent

This still reads the script at runtime if the Pure program is executed using
the Pure interpreter. However, you can now compile the Pure program to a
native executable (see the Pure manual for details on this), in which case
the text of the Tcl script is included verbatim in the executable. The
compiled program can then be run without having the original Tcl script file
available:

@example
$ pure -c myapp.pure -o myapp
$ ./myapp
@end example

@noindent

This is also the method to use for running existing Tk applications, e.g.,
if you create the interface using some interface builder like vtcl@footnote{http://vtcl.sourceforge.net}.
@end itemize


@itemize *

@item 
The Tcl @code{package} command allows you to load additional extensions into
the Tcl interpreter at runtime. For instance:

@example
tk "package require Gnocl";
@end example

@noindent

This loads Peter G. Baum's Gnocl@footnote{http://www.gnocl.org/} extension which turns Tcl into a frontend
for GTK+@footnote{http://www.gtk.org/} and Gnome@footnote{http://www.gnome.org/}. In fact, pure-tk includes a special module to handle
the nitty-gritty details of creating a GTK+/Gnome application from a Glade@footnote{http://glade.gnome.org/}
UI file and set up Pure callbacks as specified in the UI file. To use this,
just import the gnocl.pure module into your Pure scripts:

@example
using gnocl;
@end example

@noindent

Note that the Glade interface requires that you have a fairly recent version
of Gnocl installed (Gnocl 0.9.94g has been tested). The other facilities
provided by the gnocl.pure module should also work with older Gnocl versions
such as Gnocl 0.9.91. Please see the gnocl.pure module and the corresponding
examples included in the sources for more information.

@item 
The Tcl @code{exit} procedure, just as in tclsh or wish, causes exit from the
current process. Since the Tcl interpreter hosted by the pure-tk module runs
as part of a Pure program and not as a separate child process, this might
not be what you want. If you'd like @code{exit} to only exit the Tcl
interpreter, without exiting the Pure program, you can redefine the @code{exit}
procedure, e.g., as follows:

@example
tk "proc exit @{ @{returnCode 0@} @} @{ pure tk_quit @}";
@end example

@noindent

If you want to do something with the exit code provided by @code{exit}, you
will have to provide an appropriate callback function, e.g.:

@example
tk "proc exit @{ @{returnCode 0@} @} @{ pure quit_cb $returnCode @}";
@end example

@noindent

A suitable implementation of @code{quit_cb} might look as follows:

@example
quit_cb 0 = puts "Application exited normally." $$ tk_quit;
quit_cb n = printf "Application exited with exit code %d.\n" n $$
            tk_quit otherwise;
@end example

@noindent

@item 
If you need dialogs beyond the standard kinds of message boxes and common
dialogs, you will have to do these yourself using a secondary toplevel. The
dialog toplevel is just like the main window but will only be shown when the
application needs it. You can construct both non-modal and modal dialogs
this way, the latter can be implemented using Tk's @code{grab} command.
@end itemize

@node Module Index,Index,Tips and Tricks,Top
@unnumbered Module Index


@menu
* tk: 0. 
@end menu


@node Index,,Module Index,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

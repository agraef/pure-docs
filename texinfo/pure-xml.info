This is pure-xml.info, produced by makeinfo version 6.7 from
pure-xml.texi.

     Pure 0.68, May 13, 2020

     Albert Gräf (Editor)

     Copyright © 2009-2020, Albert Gräf et al

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-xml: (pure-xml.info). Pure-XML - XML/XSLT interface
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: pure-xml.info,  Node: Top,  Next: Copying,  Up: (dir)

pure-xml
********

     Pure 0.68, May 13, 2020

     Albert Gräf (Editor)

     Copyright © 2009-2020, Albert Gräf et al

  Version 0.7, April 11, 2018

  Albert Graef <<aggraef@gmail.com>>

  XML(1), the Extensible Markup Language, facilitates the exchange of
complex structured data between applications and systems.  XSLT(2)
allows you to transform XML documents to other XML-based formats such as
HTML. Together, XML and XSLT let you create dynamic web content with
ease.  Both XML and XSLT are open standards by the W3C consortium
(‘http://www.w3.org’).

  Pure’s XML interface is based on the libxml2 and libxslt libraries
from the GNOME project.  If you have a Linux system then you most likely
have these libraries, otherwise you can get them from
‘http://xmlsoft.org’.  For Windows users, the required dlls are
available from the GnuWin32 project (‘http://gnuwin32.sourceforge.net’)
and are already included in the Pure MSI package.

* Menu:

* Copying::
* Installation::
* Usage::
* Data Structure::
* Operations::
* Module Index::
* Index::

   ---------- Footnotes ----------

   (1) http://www.w3.org/TR/xml

   (2) http://www.w3.org/TR/xslt


File: pure-xml.info,  Node: Copying,  Next: Installation,  Prev: Top,  Up: Top

1 Copying
*********

Copyright (c) 2009 by Albert Graef <<aggraef@gmail.com>>.

  pure-xml is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

  pure-xml is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
License along with this program.  If not, see
<‘http://www.gnu.org/licenses/’>.


File: pure-xml.info,  Node: Installation,  Next: Usage,  Prev: Copying,  Up: Top

2 Installation
**************

Get the latest source from
‘https://bitbucket.org/purelang/pure-lang/downloads/pure-xml-0.7.tar.gz’.

  Run ‘make’ and then ‘sudo make install’ to compile and install this
module.  This requires libxml2, libxslt and Pure.


File: pure-xml.info,  Node: Usage,  Next: Data Structure,  Prev: Installation,  Up: Top

3 Usage
*******

Use the following declaration to make the operations of this module
available in your programs:

     using xml;


  The module defines two namespaces ‘xml’ and ‘xslt’ for the XML and the
XSLT operations, respectively.  For convenience, you can open these in
your program as follows:

     using namespace xml, xslt;


  A number of complete examples illustrating the use of this module can
be found in the examples directory in the source distribution.


File: pure-xml.info,  Node: Data Structure,  Next: Operations,  Prev: Usage,  Up: Top

4 Data Structure
****************

This module represents XML documents using pointers to the ‘xmlDoc’ and
‘xmlNode’ structures provided by the libxml2 library.  Similarly,
stylesheets are simply pointers to the xmlStylesheet structure from
libxslt (cf.  *note Transformations: 7.).  This makes it possible to use
these objects directly with the operations of the libxml2 and libsxslt
libraries (via Pure’s C interface) if necessary.  Note, however, that
these are all "cooked" pointers which take care of freeing themselves
automatically when they are no longer needed, therefore you shouldn’t
free them manually.

  You can also check for these types of pointers using the following
predicates:

 -- Pure Function: xml::docp x

     checks whether ‘x’ is an XML document pointer.

 -- Pure Function: xml::nodep x

     checks whether ‘x’ is a pointer to a node in an XML document.

 -- Pure Function: xslt::stylesheetp x

     checks whether ‘x’ is an XSLT stylesheet pointer.

* Menu:

* The Document Tree::
* Document Types::


File: pure-xml.info,  Node: The Document Tree,  Next: Document Types,  Up: Data Structure

4.1 The Document Tree
=====================

An XML document is a rooted tree which can be created, traversed and
manipulated using the operations of this module.  There are different
types of nodes in the tree, each carrying their own type of data.  In
Pure land, the node data is described using the following "node info"
constructors.

 -- Pure Constructor: xml::element tag ns attrs

     An XML element with given (possibly qualified) name ‘tag’, a
     (possibly empty) list of namespace declarations ‘ns’ and a
     (possibly empty) list of attributes ‘attrs’.  Namespace
     declarations normally take the form of a pair of strings
     ‘(prefix,href)’, where ‘prefix’ is the prefix associated with the
     namespace and ‘href’ the corresponding URI (the name of the
     namespace), but they can also be just a string ‘href’ if the
     namespace prefix is missing.  Attributes are encoded as
     ‘key=>value’ pairs, where ‘key’ is the attribute name and ‘value’
     the associated value; both ‘key’ and ‘value’ are strings.

 -- Pure Constructor: xml::element_text tag ns attrs content

     A convenience function which denotes a combination of an element
     node with a text child.  This is only used when creating a new
     node, and indicates that a text node child is to be added to the
     node automatically.

 -- Pure Constructor: xml::attr key val

     An attribute node.  These only occur as results of the ‘select’ and
     ‘attrs’ functions, and cannot be inserted directly into a document.

 -- Pure Constructor: xml::text content

     A text node with the given content (a string).

 -- Pure Constructor: xml::cdata content

     Like *note xml;;text: 10, but contains unparsed character data.

 -- Pure Constructor: xml::comment content

     A comment.

 -- Pure Constructor: xml::entity_ref name

     An entity reference (‘&name;’).

 -- Pure Constructor: xml::pi name content

     Processing instructions.  ‘name’ is the application name, ‘content’
     the text of the processing instructions.


File: pure-xml.info,  Node: Document Types,  Prev: The Document Tree,  Up: Data Structure

4.2 Document Types
==================

Besides the node types described above, there are some additional node
types used in the document type definition(1) (DTD), which can be
extracted from a document using the ‘int_subset’ and ‘ext_subset’
functions.  These are for inspection purposes only; it is not possible
to change the DTD of a document in-place.  (However, you can create a
new document and attach a DTD to it, using the ‘new_doc’ function.)

 -- Pure Constructor: xml::doctype name extid

     DTDs are represented using this special type of node, where ‘name’
     is the name of the root element, and ‘extid’ is a pair consisting
     of the external identifier and the URI of the DTD (or just the URI
     if there is no external identifier).  The *note xml;;doctype: 17.
     node has as its children zero or more of the following kinds of DTD
     declaration nodes (these are just straightforward abstract syntax
     for the !ELEMENT, !ATTLIST and !ENTITY declarations inside a DTD
     declaration; see the XML specification for details).

  _Element declarations:_ Here, ‘name’ is the element tag and ‘content’
the definition of the element structure, see *note element content: 19.
below.  XML supports various kinds of element types, please refer to
document type definition(2) in the XML specification for details.

 -- Pure Constructor: xml::undefined_element name

     An undefined element.  This is in libxml2, but not in the XML
     specification, you shouldn’t see this in normal operation.

 -- Pure Constructor: xml::empty_element name

     An element without any content.

 -- Pure Constructor: xml::any_element name

     An element with unrestricted content.

 -- Pure Constructor: xml::mixed_element name content

     A "mixed" element which can contain character data, optionally
     interspersed with child elements, as given in the ‘content’
     specification.

 -- Pure Constructor: xml::std_element name content

     A standard element consisting _only_ of child elements, as given in
     the ‘content’ specification.

  _Attribute declarations:_ These are used to declare the attributes of
an element.  ‘elem_name’ is the name of an element which describes the
attribute type, ‘name’ is the name of the attribute itself, and
‘default’ specifies the default value of the attribute, see *note
attribute defaults: 20. below.  XML supports a bunch of different
attribute types, please refer to document type definition(3) in the XML
specification for details.

 -- Pure Constructor: xml::cdata_attr elem_name name default

 -- Pure Constructor: xml::id_attr elem_name name default

 -- Pure Constructor: xml::idref_attr elem_name name default

 -- Pure Constructor: xml::idrefs_attr elem_name name default

 -- Pure Constructor: xml::entity_attr elem_name name default

 -- Pure Constructor: xml::entities_attr elem_name name default

 -- Pure Constructor: xml::nmtoken_attr elem_name name default

 -- Pure Constructor: xml::nmtokens_attr elem_name name default

 -- Pure Constructor: xml::enum_attr elem_name name vals default

 -- Pure Constructor: xml::notation_attr elem_name name vals default

  _Entity declarations:_ These are used for internal and external entity
declarations.  ‘name’ is the entity name and ‘content’ its definition.
External entities also have an ‘extid’ (external identifier/URI pair)
identifying the entity.

 -- Pure Constructor: xml::int_entity name content

 -- Pure Constructor: xml::int_param_entity name content

 -- Pure Constructor: xml::ext_entity name extid content

 -- Pure Constructor: xml::ext_param_entity name extid content

  The element content type (‘content’ argument of the *note element
declaration: 18. nodes) is a kind of regular expression formed with tags
(specified as strings) and the following constructors:

 -- Pure Constructor: xml::pcdata

     text data (‘#PCDATA’)

 -- Pure Constructor: xml::sequence xs

     concatenation (‘x,y,z’)

 -- Pure Constructor: xml::union xs

     alternatives (‘x|y|z’)

 -- Pure Constructor: xml::opt x

     optional element (‘x?’)

 -- Pure Constructor: xml::mult x

     repeated element (‘x*’)

 -- Pure Constructor: xml::plus x

     non-optional repeated element (‘x+’)

  Attribute defaults (the ‘default’ argument of *note attribute
declaration: 1f. nodes) are represented using the following constructor
symbols:

 -- Pure Constructor: xml::required

     a required attribute, i.e., the user must specify this

 -- Pure Constructor: xml::implied

     an implied attribute, i.e., the user does not have to specify this

 -- Pure Constructor: xml::default val

     an attribute with the given default value ‘val’

 -- Pure Constructor: xml::fixed val

     an attribute with the given fixed value ‘val’

   ---------- Footnotes ----------

   (1) http://www.w3.org/TR/REC-xml/#dt-doctype

   (2) http://www.w3.org/TR/REC-xml/#dt-doctype

   (3) http://www.w3.org/TR/REC-xml/#dt-doctype


File: pure-xml.info,  Node: Operations,  Next: Module Index,  Prev: Data Structure,  Up: Top

5 Operations
************

This module provides all operations necessary to create, inspect and
manipulate XML documents residing either in memory or on disk.
Operations for formatting XML documents using XSLT stylesheets are also
available.

* Menu:

* Document Operations::
* Traversing Documents::
* Node Information::
* Node Manipulation::
* Transformations::


File: pure-xml.info,  Node: Document Operations,  Next: Traversing Documents,  Up: Operations

5.1 Document Operations
=======================

The following functions allow you to create new XML documents, load them
from or save them to a file or a string, and provide general information
about a document.

 -- Pure Function: xml::new_doc version dtd info

     This function creates an XML document.  It returns a pointer to the
     new document.  ‘version’ is a string denoting the XML version (or
     ‘""’ to indicate the default).  ‘info’ is the *note node info: c.
     of the root node (which should denote an element node).  ‘dtd’
     denotes the document type which can be ‘()’ to denote an empty DTD,
     a string (the URI/filename of the DTD), or a pair ‘(pubid,sysid)’
     where ‘pubid’ denotes the public identifier of the DTD and ‘sysid’
     its system identifier (URI).

     Note that only simple kinds of documents with an internal DTD can
     be created this way.  Use the ‘load_file’ or ‘load_string’ function
     below to create a skeleton document if a more elaborate prolog is
     required.

 -- Pure Function: xml::load_file name flags
 -- Pure Function: xml::load_string s flags

     Load an XML document from a file ‘name’ or a string ‘s’.  ‘flags’
     denotes the parser flags, a bitwise disjunction of any of the
     following constants, or 0 for the default:

        - ‘xml::DTDLOAD’: load DTD

        - ‘xml::DTDVALID’: validate

        - ‘xml::PEDANTIC’: pedantic parse

        - ‘xml::SUBENT’: substitute entities

        - ‘xml::NOBLANKS’: suppress blank nodes

     The return value is the document pointer.  These operations may
     also fail if there is a fatal error parsing the document.

 -- Pure Function: xml::save_file name doc encoding compression
 -- Pure Function: xml::save_string doc

     Save an XML document ‘doc’ to a file or a string.  When saving to a
     file, ‘encoding’ denotes the desired encoding (or ‘""’ for the
     default), ‘compression’ the desired level of zlib compression (0
     means none, 9 is maximum, -1 indicates the default).  Note that
     with *note xml;;save_string: 40, the result is always encoded as
     UTF-8.

 -- Pure Function: xml::doc_info doc

     Retrieve general information about a document.  Returns a tuple
     ‘(version,encoding,url,compression,standalone)’, where ‘version’ is
     the XML version of the document, ‘encoding’ the external encoding
     (if any), ‘url’ the name/location of the document (if any),
     ‘compression’ the level of zlib compression, and ‘standalone’ is a
     flag indicating whether the document contains any external markup
     declarations "which affect the information passed from the XML
     processor to the application", see the section on the standalone
     document declaration(1) in the XML spec for details.  (Apparently,
     in libxml2 ‘standalone’ is either a truth value or one of the
     special values -1, indicating that there’s no XML declaration in
     the prolog, or -2, indicating that there’s an XML declaration but
     no ‘standalone’ attribute.)

 -- Pure Function: xml::int_subset doc
 -- Pure Function: xml::ext_subset doc

     Retrieve the internal and external DTD subset of a document.
     Returns a ‘doctype’ node (fails if there’s no corresponding DTD).

  *Example*

  Read the sample.xml document distributed with the sources (ignoring
blank nodes) and retrieve the document info:

     > using xml;
     > let sample = xml::load_file "sample.xml" xml::NOBLANKS;
     > xml::doc_info sample;
     "1.0","","sample.xml",0,-2


   ---------- Footnotes ----------

   (1) http://www.w3.org/TR/REC-xml/#sec-rmd


File: pure-xml.info,  Node: Traversing Documents,  Next: Node Information,  Prev: Document Operations,  Up: Operations

5.2 Traversing Documents
========================

These operations are used to traverse the document tree, i.e., the nodes
of the document.  They take either a document pointer ‘doc’ or a node
pointer ‘node’ as argument, and yield a corresponding node pointer (or a
document pointer, in the case of *note xml;;doc: 45.).  The node
pointers can then be used with the *note Node Information: 46. and *note
Node Manipulation: 47. operations described below.

 -- Pure Function: xml::root doc

     the root node of ‘doc’

 -- Pure Function: xml::doc node

     the document ‘node’ belongs to

 -- Pure Function: xml::parent node

     the parent of ‘node’

 -- Pure Function: xml::first node
 -- Pure Function: xml::last node

     first and last child node

 -- Pure Function: xml::next node
 -- Pure Function: xml::prev node

     next and previous sibling

 -- Pure Function: xml::first_attr node
 -- Pure Function: xml::last_attr node

     first and last attribute node

  All these operations fail if the corresponding target node does not
exist, or if the type of the given node is not supported by this
implementation.

  There are also two convenience functions to retrieve the children and
attribute nodes of a node:

 -- Pure Function: xml::children node

     returns the list of all child nodes of ‘node’

 -- Pure Function: xml::attrs node

     returns the list of all attribute nodes of ‘node’

  Moreover, given a node pointer ‘node’, ‘node!i’ can be used to
retrieve the ‘i’th child of ‘node’.

  *Example*

  Peek at the root node of the sample document and its children:

     > let r = xml::root sample; r;
     #<pointer 0xe15e10>
     > xml::node_info r;
     xml::element "story" [] []
     > #xml::children r;
     5
     > xml::node_info (r!0);
     xml::cdata "<greeting>Hello, world!</greeting>"



File: pure-xml.info,  Node: Node Information,  Next: Node Manipulation,  Prev: Traversing Documents,  Up: Operations

5.3 Node Information
====================

These operations retrieve information about the nodes of an XML
document.

 -- Pure Function: xml::select doc xpath

 -- Pure Function: xml::select doc (xpath,ns)

     Retrieve nodes using an XPath(1) specification.  Given an XPath (a
     string) ‘xpath’, this operation returns the list of all matching
     nodes in the given document ‘doc’.  You can also specify a node as
     the first argument, in which case the document of the given node is
     searched and paths are interpreted relative to the given node
     (rather than the root node of the document).

     Moreover, instead of just an XPath you can also specify a pair
     ‘(xpath,ns)’ consisting of an XPath ‘xpath’ and a list ‘ns’ of
     ‘prefix=>uri’ string pairs which describe the namespaces to be
     recognized in the XPath expression.  This is necessary to select
     nodes by qualified tag or attribute names.  Note that only the
     namespace URIs must match up with those used in the queried
     document; the corresponding namespace prefixes can be chosen
     freely, so you can use whatever prefixes are convenient to
     formulate the XPath query.  However, for each namespace prefix used
     in the XPath expression (not the document!), there _must_ be a
     corresponding binding in the ‘ns’ list.  Otherwise the underlying
     libxml2 function will complain about an undefined namespace prefix
     and *note xml;;select: 52. will fail.

 -- Pure Function: xml::node_info node

     Retrieve the node data from ‘node’.  Returns a *note node info: c.
     value, as described in *note Data Structure: 6. above.  Fails if
     the node does not belong to one of the supported node types.

 -- Pure Function: xml::is_blank_node

     Checks whether a node is a blank node (empty or whitespace only)
     and thus possibly ignorable.

 -- Pure Function: xml::node_base node

     Returns the base URI of the given node.

 -- Pure Function: xml::node_path node

     Returns the path of a node in the document, in the format accepted
     by ‘select’.

 -- Pure Function: xml::node_content node

     Returns the text carried by the node, if any (after entity
     substitution).

  In addition, you can retrieve and change attributes of element nodes
with the following operations:

 -- Pure Function: xml::node_attr node name

     Retrieves the value of the attribute with the given ‘name’ (after
     entity substitution).

 -- Pure Function: xml::set_node_attr node name value
 -- Pure Function: xml::unset_node_attr node name

     Sets or unsets an attribute value.

  *Examples*

  Set and unset a node attribute:

     > xml::set_node_attr r "foo" "4711";
     ()
     > xml::node_info r;
     xml::element "story" [] ["foo"=>"4711"]
     > xml::node_attr r "foo";
     "4711"
     > xml::unset_node_attr r "foo";
     ()
     > xml::node_info r;
     xml::element "story" [] []


  The ‘select’ function is _very_ powerful, and probably the single most
important operation of this module if you want to extract information
from an existing XML document without traversing the entire structure.
Here is a very simple example of its use:

     > [xml::node_content n, xml::node_path n | n = xml::select sample "//author"];
     [("John Fleck","/story/storyinfo/author")]


  Note that if the XPath expression contains qualified names, the
corresponding namespace prefixes and their URIs must be given in the
second argument along with the XPath, as follows:

     xml::select doc ("//foo:bar", ["foo"=>"http://www.foo.org"]);


   ---------- Footnotes ----------

   (1) http://www.w3.org/TR/xpath


File: pure-xml.info,  Node: Node Manipulation,  Next: Transformations,  Prev: Node Information,  Up: Operations

5.4 Node Manipulation
=====================

These operations enable you to manipulate the document structure by
adding a new node to the document tree (specified through its *note node
info: c.), and by removing (unlinking) existing nodes from the tree.

 -- Pure Function: xml::replace node info

     Add the new node specified by ‘info’ in place of the given node
     ‘node’.

 -- Pure Function: xml::add_first node info
 -- Pure Function: xml::add_last node info

     Add the new node as the first or last child of ‘node’,
     respectively.

 -- Pure Function: xml::add_next node info
 -- Pure Function: xml::add_prev node info

     Add the new node as the next or previous sibling of ‘node’,
     respectively.

  The operations above all return a pointer to the new XML node object.

 -- Pure Function: xml::unlink node

     Deletes an existing node from the document tree.  Returns ‘()’.

  *Examples*

  Replace the first child of the root node in the sample document:

     > xml::node_info (r!0);
     xml::cdata "<greeting>Hello, world!</greeting>"
     > xml::replace (r!0) (xml::text "bla bla");
     #<pointer 0xd40d80>
     > xml::node_info (r!0);
     xml::text "bla bla"


  Delete that node:

     > xml::unlink (r!0);
     ()
     > xml::node_info (r!0);
     xml::comment "This is a sample document for testing the xml interface."



File: pure-xml.info,  Node: Transformations,  Prev: Node Manipulation,  Up: Operations

5.5 Transformations
===================

The following operations provide basic XSLT support.  As already
mentioned, stylesheets are represented as pointers to the xsltStylesheet
structure provided by libxslt.  Note that, in difference to XML document
pointers, this is an opaque type, i.e., there is no direct means to
inspect and manipulate parsed stylesheets in memory using the operations
of this module.  However, a stylesheet is just a special kind of XML
document and thus can be manipulated after reading the stylesheet as an
ordinary XML document.  The *note load_stylesheet: 61. function then
allows you to convert the document pointer to an XSLT Stylesheet object.

  Applying a stylesheet to an XML document generally involves the
following steps:

  1. Load and parse the stylesheet using *note load_stylesheet: 61.  The
     parameter to *note load_stylesheet: 61. can be either the name of a
     stylesheet file or a corresponding document pointer.  The function
     returns a pointer to the stylesheet object which is used in the
     subsequent processing.

  2. Invoke *note apply_stylesheet: 62. on the stylesheet and the target
     document.  This returns a new document containing the transformed
     XML document.

  3. Run *note save_result_file: 63. or *note save_result_string: 64. on
     the result and the stylesheet to save the transformed document in a
     file or a string.

  Here is a brief summary of the XSLT operations.  Please check the
XSLT(1) documentation for details of the transformation process.

 -- Pure Function: xslt::load_stylesheet x

     Load a stylesheet.  ‘x’ can be either an XML document pointer, or a
     string denoting the desired ‘.xsl’ file.

 -- Pure Function: xslt::apply_stylesheet style doc params

     Apply the stylesheet ‘style’ to the given document ‘doc’ with the
     given parameters ‘params’.  The third argument is a (possibly
     empty) list of ‘key=>value’ string pairs which allows you to pass
     additional parameters to the stylesheet.

 -- Pure Function: xslt::save_result_file name doc style compression
 -- Pure Function: xslt::save_result_string doc style

     Save the transformation result ‘doc’ obtained with the stylesheet
     ‘style’ to a file or a string.  This works pretty much like
     ‘save_file’ or ‘save_string’, but also keeps track of some
     output-related information contained in the stylesheet.

  *Example*

  Load the recipes.xml document and the recipes.xsl stylesheet
distributed with the sources:

     > let recipes = xml::load_file "recipes.xml" xml::DTDVALID;
     > let style = xslt::load_stylesheet "recipes.xsl";


  Apply the stylesheet to the document and save the result in a html
file:

     > let res = xslt::apply_stylesheet style recipes [];
     > xslt::save_result_file "recipes.html" res style 0;
     ()


  That’s all.  You can now have a look at recipes.html in your favourite
web browser.

   ---------- Footnotes ----------

   (1) http://www.w3.org/TR/xslt


File: pure-xml.info,  Node: Module Index,  Next: Index,  Prev: Operations,  Up: Top

Module Index
************

* Menu:

* xml: 0.


File: pure-xml.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* attribute declaration:                 Document Types.      (line  53)
* attribute defaults:                    Document Types.      (line 122)
* dtd:                                   Document Types.      (line   6)
* element content:                       Document Types.      (line  94)
* element declaration:                   Document Types.      (line  24)
* entity declaration:                    Document Types.      (line  81)
* node info:                             The Document Tree.   (line  12)
* xml (module):                          Top.                 (line  12)
* xml;;add_first (function):             Node Manipulation.   (line  15)
* xml;;add_last (function):              Node Manipulation.   (line  15)
* xml;;add_next (function):              Node Manipulation.   (line  21)
* xml;;add_prev (function):              Node Manipulation.   (line  21)
* xml;;any_element (constructor):        Document Types.      (line  38)
* xml;;attr (constructor):               The Document Tree.   (line  32)
* xml;;attrs (function):                 Traversing Documents.
                                                              (line  51)
* xml;;cdata (constructor):              The Document Tree.   (line  41)
* xml;;cdata_attr (constructor):         Document Types.      (line  61)
* xml;;children (function):              Traversing Documents.
                                                              (line  47)
* xml;;comment (constructor):            The Document Tree.   (line  45)
* xml;;default (constructor):            Document Types.      (line 134)
* xml;;doc (function):                   Traversing Documents.
                                                              (line  17)
* xml;;docp (function):                  Data Structure.      (line  19)
* xml;;doctype (constructor):            Document Types.      (line  13)
* xml;;doc_info (function):              Document Operations. (line  56)
* xml;;element (constructor):            The Document Tree.   (line  12)
* xml;;element_text (constructor):       The Document Tree.   (line  25)
* xml;;empty_element (constructor):      Document Types.      (line  34)
* xml;;entities_attr (constructor):      Document Types.      (line  71)
* xml;;entity_attr (constructor):        Document Types.      (line  69)
* xml;;entity_ref (constructor):         The Document Tree.   (line  49)
* xml;;enum_attr (constructor):          Document Types.      (line  77)
* xml;;ext_entity (constructor):         Document Types.      (line  90)
* xml;;ext_param_entity (constructor):   Document Types.      (line  92)
* xml;;ext_subset (function):            Document Operations. (line  72)
* xml;;first (function):                 Traversing Documents.
                                                              (line  25)
* xml;;first_attr (function):            Traversing Documents.
                                                              (line  35)
* xml;;fixed (constructor):              Document Types.      (line 138)
* xml;;idrefs_attr (constructor):        Document Types.      (line  67)
* xml;;idref_attr (constructor):         Document Types.      (line  65)
* xml;;id_attr (constructor):            Document Types.      (line  63)
* xml;;implied (constructor):            Document Types.      (line 130)
* xml;;int_entity (constructor):         Document Types.      (line  86)
* xml;;int_param_entity (constructor):   Document Types.      (line  88)
* xml;;int_subset (function):            Document Operations. (line  72)
* xml;;is_blank_node (function):         Node Information.    (line  40)
* xml;;last (function):                  Traversing Documents.
                                                              (line  25)
* xml;;last_attr (function):             Traversing Documents.
                                                              (line  35)
* xml;;load_file (function):             Document Operations. (line  26)
* xml;;load_string (function):           Document Operations. (line  26)
* xml;;mixed_element (constructor):      Document Types.      (line  42)
* xml;;mult (constructor):               Document Types.      (line 114)
* xml;;new_doc (function):               Document Operations. (line  10)
* xml;;next (function):                  Traversing Documents.
                                                              (line  30)
* xml;;nmtokens_attr (constructor):      Document Types.      (line  75)
* xml;;nmtoken_attr (constructor):       Document Types.      (line  73)
* xml;;nodep (function):                 Data Structure.      (line  23)
* xml;;node_attr (function):             Node Information.    (line  62)
* xml;;node_base (function):             Node Information.    (line  45)
* xml;;node_content (function):          Node Information.    (line  54)
* xml;;node_info (function):             Node Information.    (line  34)
* xml;;node_path (function):             Node Information.    (line  49)
* xml;;notation_attr (constructor):      Document Types.      (line  79)
* xml;;opt (constructor):                Document Types.      (line 110)
* xml;;parent (function):                Traversing Documents.
                                                              (line  21)
* xml;;pcdata (constructor):             Document Types.      (line  98)
* xml;;pi (constructor):                 The Document Tree.   (line  53)
* xml;;plus (constructor):               Document Types.      (line 118)
* xml;;prev (function):                  Traversing Documents.
                                                              (line  30)
* xml;;replace (function):               Node Manipulation.   (line  10)
* xml;;required (constructor):           Document Types.      (line 126)
* xml;;root (function):                  Traversing Documents.
                                                              (line  13)
* xml;;save_file (function):             Document Operations. (line  46)
* xml;;save_string (function):           Document Operations. (line  46)
* xml;;select (function):                Node Information.    (line   9)
* xml;;sequence (constructor):           Document Types.      (line 102)
* xml;;set_node_attr (function):         Node Information.    (line  67)
* xml;;std_element (constructor):        Document Types.      (line  48)
* xml;;text (constructor):               The Document Tree.   (line  37)
* xml;;undefined_element (constructor):  Document Types.      (line  29)
* xml;;union (constructor):              Document Types.      (line 106)
* xml;;unlink (function):                Node Manipulation.   (line  29)
* xml;;unset_node_attr (function):       Node Information.    (line  67)
* xslt;;apply_stylesheet (function):     Transformations.     (line  41)
* xslt;;load_stylesheet (function):      Transformations.     (line  36)
* xslt;;save_result_file (function):     Transformations.     (line  48)
* xslt;;save_result_string (function):   Transformations.     (line  48)
* xslt;;stylesheetp (function):          Data Structure.      (line  27)



Tag Table:
Node: Top373
Ref: pure-xml doc562
Ref: 1562
Ref: Top-Footnote-11543
Ref: Top-Footnote-21576
Node: Copying1610
Ref: pure-xml pure-xml-xml-xslt-interface1692
Ref: 21692
Ref: pure-xml copying1692
Ref: 31692
Ref: pure-xml module-xml1692
Ref: 01692
Node: Installation2409
Ref: pure-xml installation2493
Ref: 42493
Node: Usage2759
Ref: pure-xml usage2850
Ref: 52850
Node: Data Structure3330
Ref: pure-xml data-structure3419
Ref: 63419
Ref: pure-xml xml docp4129
Ref: 84129
Ref: pure-xml xml nodep4218
Ref: 94218
Ref: pure-xml xslt stylesheetp4323
Ref: a4323
Node: The Document Tree4474
Ref: pure-xml the-document-tree4567
Ref: b4567
Ref: pure-xml node-info4906
Ref: c4906
Ref: pure-xml xml element4906
Ref: d4906
Ref: pure-xml xml element_text5654
Ref: e5654
Ref: pure-xml xml attr5950
Ref: f5950
Ref: pure-xml xml text6146
Ref: 106146
Ref: pure-xml xml cdata6240
Ref: 116240
Ref: pure-xml xml comment6352
Ref: 126352
Ref: pure-xml xml entity_ref6413
Ref: 136413
Ref: pure-xml xml pi6499
Ref: 146499
Node: Document Types6671
Ref: pure-xml document-types6764
Ref: 156764
Ref: pure-xml dtd6803
Ref: 166803
Ref: pure-xml xml doctype7228
Ref: 177228
Ref: pure-xml element-declaration7842
Ref: 187842
Ref: pure-xml xml undefined_element8130
Ref: 1a8130
Ref: pure-xml xml empty_element8315
Ref: 1b8315
Ref: pure-xml xml any_element8400
Ref: 1c8400
Ref: pure-xml xml mixed_element8489
Ref: 1d8489
Ref: pure-xml xml std_element8702
Ref: 1e8702
Ref: pure-xml attribute-declaration8867
Ref: 1f8867
Ref: pure-xml xml cdata_attr9318
Ref: 219318
Ref: pure-xml xml id_attr9380
Ref: 229380
Ref: pure-xml xml idref_attr9439
Ref: 239439
Ref: pure-xml xml idrefs_attr9501
Ref: 249501
Ref: pure-xml xml entity_attr9564
Ref: 259564
Ref: pure-xml xml entities_attr9627
Ref: 269627
Ref: pure-xml xml nmtoken_attr9692
Ref: 279692
Ref: pure-xml xml nmtokens_attr9756
Ref: 289756
Ref: pure-xml xml enum_attr9821
Ref: 299821
Ref: pure-xml xml notation_attr9887
Ref: 2a9887
Ref: pure-xml entity-declaration9957
Ref: 2b9957
Ref: pure-xml xml int_entity10208
Ref: 2c10208
Ref: pure-xml xml int_param_entity10260
Ref: 2d10260
Ref: pure-xml xml ext_entity10318
Ref: 2e10318
Ref: pure-xml xml ext_param_entity10376
Ref: 2f10376
Ref: pure-xml element-content10440
Ref: 1910440
Ref: pure-xml xml pcdata10641
Ref: 3010641
Ref: pure-xml xml sequence10708
Ref: 3110708
Ref: pure-xml xml union10782
Ref: 3210782
Ref: pure-xml xml opt10852
Ref: 3310852
Ref: pure-xml xml mult10920
Ref: 3410920
Ref: pure-xml xml plus10989
Ref: 3510989
Ref: pure-xml attribute-defaults11071
Ref: 2011071
Ref: pure-xml xml required11221
Ref: 3611221
Ref: pure-xml xml implied11319
Ref: 3711319
Ref: pure-xml xml default11428
Ref: 3811428
Ref: pure-xml xml fixed11526
Ref: 3911526
Ref: Document Types-Footnote-111656
Ref: Document Types-Footnote-211705
Ref: Document Types-Footnote-311754
Node: Operations11803
Ref: pure-xml operations11899
Ref: 3a11899
Node: Document Operations12264
Ref: pure-xml document-operations12361
Ref: 3b12361
Ref: pure-xml xml new_doc12575
Ref: 3c12575
Ref: pure-xml xml load_file13430
Ref: 3d13430
Ref: pure-xml xml load_string13475
Ref: 3e13475
Ref: pure-xml xml save_file14083
Ref: 3f14083
Ref: pure-xml xml save_string14147
Ref: 4014147
Ref: pure-xml xml doc_info14567
Ref: 4114567
Ref: pure-xml xml int_subset15514
Ref: 4215514
Ref: pure-xml xml ext_subset15553
Ref: 4315553
Ref: Document Operations-Footnote-116046
Node: Traversing Documents16092
Ref: pure-xml traversing-documents16214
Ref: 4416214
Ref: pure-xml xml root16679
Ref: 4816679
Ref: pure-xml xml doc16746
Ref: 4516746
Ref: pure-xml xml parent16821
Ref: 4916821
Ref: pure-xml xml first16889
Ref: 4a16889
Ref: pure-xml xml last16924
Ref: 4b16924
Ref: pure-xml xml next16991
Ref: 4c16991
Ref: pure-xml xml prev17025
Ref: 4d17025
Ref: pure-xml xml first_attr17092
Ref: 4e17092
Ref: pure-xml xml last_attr17132
Ref: 4f17132
Ref: pure-xml xml children17460
Ref: 5017460
Ref: pure-xml xml attrs17555
Ref: 5117555
Node: Node Information18082
Ref: pure-xml node-information18202
Ref: 4618202
Ref: pure-xml xml select18320
Ref: 5218320
Ref: pure-xml xml node_info19707
Ref: 5319707
Ref: pure-xml xml is_blank_node19960
Ref: 5419960
Ref: pure-xml xml node_base20104
Ref: 5520104
Ref: pure-xml xml node_path20190
Ref: 5620190
Ref: pure-xml xml node_content20325
Ref: 5720325
Ref: pure-xml xml node_attr20556
Ref: 5820556
Ref: pure-xml xml set_node_attr20704
Ref: 5920704
Ref: pure-xml xml unset_node_attr20758
Ref: 5a20758
Ref: Node Information-Footnote-121852
Node: Node Manipulation21887
Ref: pure-xml node-manipulation22002
Ref: 4722002
Ref: pure-xml xml replace22258
Ref: 5b22258
Ref: pure-xml xml add_first22392
Ref: 5c22392
Ref: pure-xml xml add_last22436
Ref: 5d22436
Ref: pure-xml xml add_next22564
Ref: 5e22564
Ref: pure-xml xml add_prev22607
Ref: 5f22607
Ref: pure-xml xml unlink22813
Ref: 6022813
Node: Transformations23381
Ref: pure-xml transformations23471
Ref: 723471
Ref: pure-xml xslt load_stylesheet25016
Ref: 6125016
Ref: pure-xml xslt apply_stylesheet25188
Ref: 6225188
Ref: pure-xml xslt save_result_file25520
Ref: 6325520
Ref: pure-xml xslt save_result_string25589
Ref: 6425589
Ref: Transformations-Footnote-126479
Node: Module Index26513
Node: Index26647

End Tag Table


Local Variables:
coding: utf-8
End:

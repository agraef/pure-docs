\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename gnumeric-pure.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle gnumeric-pure
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* gnumeric-pure: (gnumeric-pure.info). Gnumeric/Pure: A Pure Plugin for Gnumeric
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.62, September 18, 2014

Albert Gräf (Editor)

Copyright @copyright{} 2009-2014, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title gnumeric-pure
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top gnumeric-pure
@insertcopying
@end ifnottex

@c %**start of body
@anchor{gnumeric-pure doc}@anchor{0}
Version 0.14, September 17, 2014

Albert Gräf <@email{aggraef@@gmail.com}>

Gnumeric/Pure is a Gnumeric@footnote{http://www.gnumeric.org/} extension which lets you use Pure@footnote{http://purelang.bitbucket.org/} functions in
Gnumeric, the Gnome spreadsheet. It offers better execution speed than the
existing Perl and Python plugins, and provides some powerful features not
found in other Gnumeric scripting plugins, such as asynchronous data sources
created from Pure streams and OpenGL rendering in Gnumeric frame widgets via
Pure's OpenGL module.


@menu
* Introduction:: 
* Copying:: 
* Installation:: 
* Setup:: 
* Basic Usage:: 
* Interactive Pure Shell:: 
* Defining Your Own Functions:: 
* Gnumeric/Pure Interface:: 
* Advanced Features:: 
* Index:: 

@end menu

@node Introduction,Copying,Top,Top
@anchor{gnumeric-pure introduction}@anchor{1}@anchor{gnumeric-pure gnumeric-pure-a-pure-plugin-for-gnumeric}@anchor{2}
@chapter Introduction


This package provides a Gnumeric@footnote{http://www.gnumeric.org/} extension which gives you access to the
Pure@footnote{http://purelang.bitbucket.org/} programming language in Gnumeric. It works pretty much like the Perl and
Python plugin loaders which are distributed with Gnumeric, but Gnumeric/Pure
offers some powerful features which aren't found in other Gnumeric scripting
plugins:


@itemize *

@item 
Pure is a functional programming language which fits the computational model
of spreadsheet programs very well.

@item 
Pure is based on term rewriting and thus enables you to do symbolic
computations in addition to the usual numeric calculations.

@item 
Pure has a built-in MATLAB@footnote{http://www.mathworks.com/}/Octave@footnote{http://www.octave.org/}-like matrix data structure which makes
it easy to deal with cell ranges in a spreadsheet in an efficient manner.

@item 
Pure also provides a bridge to Octave@footnote{http://www.octave.org/} so that you can call arbitrary Octave
functions using this extension.

@item 
Gnumeric/Pure offers support for rendering OpenGL@footnote{http://www.opengl.org/} scenes in Gnumeric frame
widgets, via Pure's own OpenGL interface.

@item 
Pure also has built-in support for lazy data structures and thus allows you
to handle potentially infinite amounts of data such as the list of all prime
numbers. Gnumeric/Pure lets you turn such lazy values into asynchronous data
sources computed in the background, which update the spreadsheet
automatically as results become available.

@item 
Last but not least, Pure is compiled to native code on the fly. This means
that, while startup times are a bit longer due to Pure's JIT compiler
kicking in (you'll notice this if you open a spreadsheet with Pure
functions), the resulting compiled code then typically executes @emph{much}
faster than equivalent interpreted Perl and Python code.
@end itemize

Once the plugin loader is installed and enabled, you can try the Pure
functions in the provided examples and start adding your own plugin scripts.
As of version 0.12, there's a new helper script @code{pure-gnm} which generates
the required plugin.xml files to make this easy. Various examples can be found
in the examples folder in the distribution, which should help you to get
started with Gnumeric/Pure fairly quickly.

For more advanced uses, Gnumeric/Pure also provides a programming interface
which lets you do various special tasks such as modifying entire ranges of
cells with one Pure call, calling Gnumeric functions from Pure, and setting up
asynchronous data sources and OpenGL frames. The manual explains all this in
detail.

@cartouche
@quotation Note 
This manual assumes that you're already familiar with Gnumeric as
well as the Pure language and its programming environment. If not then you
should consult the corresponding documentation to learn more about these.
@end quotation
@end cartouche

@node Copying,Installation,Introduction,Top
@anchor{gnumeric-pure copying}@anchor{3}
@chapter Copying


Copyright (c) 2009-2013 by Albert Graef.

Gnumeric/Pure is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 2 of the License, or (at your option) any later
version.

Gnumeric/Pure is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.

@node Installation,Setup,Copying,Top
@anchor{gnumeric-pure installation}@anchor{4}
@chapter Installation


Obviously, you need to have both Pure and Gnumeric installed. Pure 0.36 and
Gnumeric 1.9.13 or later are known to work. The current version of this module
(0.13, currently only available in Pure's Mercurial repository) will work with
the latest, GTK3-based versions of Gnumeric (Gnumeric 1.11 and later, 1.12 has
been tested). To obtain this version, clone the Pure repository or download it
as a zip file at @indicateurl{https://bitbucket.org/purelang/pure-lang}; the module can be
found in the gnumeric-pure subdirectory of the repository.

Unfortunately, the Gnumeric plugin interface changed in recent releases, so if
you are still running Gnumeric 1.10 or earlier then you should use version
0.12 of the module instead:

@quotation

@indicateurl{https://bitbucket.org/purelang/pure-lang/downloads/gnumeric-pure-0.12.tar.gz}
@end quotation

In the 0.12 version of the module, the Makefile is set up to build
Gnumeric/Pure with OpenGL support, which requires that you have the OpenGL
libraries as well as GtkGLExt@footnote{http://gtkglext.sourceforge.net} (the Gtk OpenGL extension) for GTK2 installed.
These should be readily available on most systems, but you can also disable
this feature by invoking @code{make} as @code{make GLDEPS=}.

For version 0.13 and later, you'll need a GTK3-compatible version of GtkGLExt
which can be found at @indicateurl{https://github.com/tdz/gtkglext}. The OpenGL support
under GTK3 is still under development and currently has some issues, however,
so it is disabled by default. If you want to give it a try then you'll have to
uncomment the @code{GLDEPS} line at the beginning of the Makefile.

Run @code{make} to compile the software. You might have to adjust the settings at
the beginning of the Makefile to make this work. Once the compile goes
through, you should now have a @code{pure_loader.so} file in the @code{pure-loader}
subdirectory. You can install the plugin and related stuff with @code{sudo make
install} in the global Gnumeric plugin directory, or if you prefer to install
it into your personal plugin directory then run @code{make install-local}
instead. (The latter is recommended if you plan to customize any of the sample
plugin scripts included in the distribution for your purposes.)

Typically, @code{make install} and @code{make install-local} will install the
plugins into the following directories by default (here and in the following
@code{<version>} denotes the version of Gnumeric you have installed):


@itemize *

@item 
System-wide installations go into
@code{/usr/local/lib/gnumeric/<version>/plugins} or similar, depending on
Gnumeric's installation prefix (usually either @code{/usr/local} or @code{/usr}).

@item 
User-specific installations go into @code{~/.gnumeric/<version>/plugins}.
@end itemize

The Makefile tries to guess the installation path and version number of
Gnumeric on its own. If it guesses wrong, you can change these using the
Makefile variables @code{prefix} and @code{gnmversion}, respectively. For instance:

@example
$ make prefix=/usr gnmversion=1.12.4
@end example

@noindent

In either case, @code{make install} also installs the @code{pure-gnm} helper script
under the Pure installation prefix. (This is a little convenience script to
generate the @code{plugin.xml} files used by Gnumeric to load a plugin; see
@pxref{5,,Defining Your Own Functions} for details.)

If @code{make install} doesn't work for some reason, you can also just copy the
@code{pure-func}, @code{pure-glfunc} and @code{pure-loader} directories manually to
your Gnumeric plugin directory. You can still run @code{make install} in the
@code{pure-gnm} subdirectory to get the @code{pure-gnm} script installed in this
case.

@node Setup,Basic Usage,Installation,Top
@anchor{gnumeric-pure setup}@anchor{6}
@chapter Setup


Once Gnumeric/Pure has been properly installed, you should see it in
Gnumeric's Tools/Plug-ins dialog. There are actually two main entries, one
labelled "Pure functions" and the other one labelled "Pure plugin loader". You
need to enable both before you can start using Pure functions in your Gnumeric
spreadsheets. There's also a third entry labelled "Pure OpenGL functions"
which you might want to enable if you want to try the OpenGL capabilities
(this will only work if you built Gnumeric/Pure with OpenGL support and have
Pure's OpenGL module installed; see @pxref{7,,OpenGL Interface} for details).

Gnumeric doesn't provide much in the way of GUI customization options right
now, but at least it's possible for plugins to install and configure
additional menu and toolbar options. Gnumeric/Pure adds three additional
options to the Tools menu which allow you to stop asynchronous data sources,
reload Pure scripts and edit them. After installation, the definitions of
these items can be found in the @code{pure-loader/pure-ui.xml} file in your
Gnumeric plugin directory. Have a look at this file and edit is as
desired. E.g., if you want to put the Pure-related options into a submenu and
enable toolbar buttons for these options, then your @code{pure-ui.xml} file
should look as follows:

@example
<ui>
  <menubar>
    <menu name="Tools" action="MenuTools">
      <separator/>
      <menu name="Pure" action="PureMenu">
        <menuitem action="PureStop"/>
        <menuitem action="PureReload"/>
        <menuitem action="PureEdit"/>
      </menu>
    </menu>
  </menubar>
  <toolbar name="StandardToolbar">
    <separator/>
    <toolitem action="PureStop"/>
    <toolitem action="PureReload"/>
    <toolitem action="PureEdit"/>
  </toolbar>
</ui>
@end example

@noindent

@node Basic Usage,Interactive Pure Shell,Setup,Top
@anchor{gnumeric-pure basic-usage}@anchor{8}
@chapter Basic Usage


With Pure/Gnumeric installed and enabled, you should be ready to join the fun
now. Start up Gnumeric, click on a cell and invoke the "f(x)" dialog. The Pure
functions available for use are shown in the "Pure" category. E.g., click on
@code{pure_hello}. Now the Pure interpreter will be loaded and the function
description displayed. Click "Ok" to select the @code{pure_hello} function and
then "Ok" again to actually insert the function call (without arguments) into
the current cell. You should now be able to read the friendly greeting
returned by the function.

Of course, you can also enter the function call directly as a formula into a
cell as usual. Click on a cell, then enter the following:

@example
=pure_hello(getenv("USER"))
@end example

@noindent

The greeting should now be displayed with your login name in it.

Play around a bit with the other Pure functions. These functions are nothing
special; they are just ordinary Pure functions which are defined by the
@code{pure_func.pure} script in the @code{pure-func} subdirectory of your Gnumeric
plugin directory. You can have a look at them by invoking the "Edit Pure
Scripts" option which gets added to the Tools/Pure menu once the Pure plugin
loader is enabled. (This will invoke the emacs editor by default, or the
editor named by the @code{EDITOR} environment variable. You can set this
environment variable in your shell's startup files.) The Tools/Pure menu
contains a second Pure-related option, "Reload Pure Scripts" which can be used
to quickly reload all loaded Pure scripts after edits; more about that later.

Please note that most of the functions in @code{pure_func.pure} are rather
useless, they are only provided for illustrative purposes. However, there are
some useful examples in there, too, in particular:


@itemize *

@item 
@code{pure_eval} lets you evaluate any Pure expression, given as a string in
its first argument. E.g., try something like @code{=pure_eval("foldl (+) 0
(1..100)")}. Additional parameters are accessible as @code{x!0}, @code{x!1},
etc. For instance: @code{=pure_eval("x!0+x!1",A1,B1)}.

@item 
@code{pure_echo} just displays its arguments as a string in Pure syntax, as the
interpreter sees them. This is useful for debugging purposes. E.g.,
@code{=pure_echo(A1:B10)} shows the given range as a Pure matrix.

@item 
@code{pure_shell} is a variation of @code{pure_eval} which executes arbitrary Pure
code and returns the last evaluated expression (if any) as a string. This is
mainly provided as a convenience to create an "interactive Pure shell" which
lets you evaluate Pure code inside Gnumeric. To these ends, simply prepare a
text cell for entering the code to be evaluated, and then apply
@code{pure_shell} on this text cell in another cell to display the result.
@end itemize

A spreadsheet showing most of the predefined functions in action can be found
in @code{pure-examples.gnumeric} example distributed with Gnumeric/Pure.

@node Interactive Pure Shell,Defining Your Own Functions,Basic Usage,Top
@anchor{gnumeric-pure interactive-pure-shell}@anchor{9}
@chapter Interactive Pure Shell


The @code{pure-examples.gnumeric} spreadsheet also includes an instance of
@code{pure_shell} which lets you evaluate arbitrary Pure code in the same
interpreter instance that executes Gnumeric/Pure functions. This is very
helpful if you're developing new Pure functions to be used in Gnumeric. It
also lets you use Gnumeric as a kind of GUI frontend to the Pure
interpreter. You can try this now. Open the @code{pure-examples} spreadsheet in
Gnumeric and enter the following into the input cell of the Pure shell:

@example
> scanl (+) 0 (1..20)
  [0,1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210]
@end example

@noindent

Note that here and in the following the prompt @code{>} indicates a Pure
expression to be evaluated in @emph{Gnumeric} (rather than the standalone Pure
interpreter), which is followed by another line indicating the result (printed
in the output cell below the input cell of the Pure shell). You can find the
Pure shell at the bottom of the first sheet in @code{pure-examples}, see the
screenshot below. For your convenience, there's also a second, bigger one on
the second sheet. You might want to copy this over to a separate spreadsheet
which you can use as a scratchpad for experimentation purposes.


@float Figure

@image{shell,,,,png}

@caption{The Pure shell.}

@end float


Also note that this is in fact @emph{Pure code} (not a Gnumeric formula) being
evaluated there. You can execute any Pure code, including Pure declarations,
so you can type:

@example
> using system; puts "Hello, world!";
  14
@end example

@noindent

This prints the string @code{"Hello, world!"} on standard output, visible in the
terminal window where you launched Gnumeric. Here is another example, showing
how you can invoke any function from the C library, by declaring it as a Pure
@code{extern} function:

@example
> extern int rand(); [rand | i = 1..5];
  [1810821799,2106746672,1436605662,1363610028,695042099]
@end example

@noindent

All functions in the Pure prelude are readily available in the Gnumeric Pure
shell, as well as the functions defined in @code{pure_func.pure} and its imports,
including the programming interface described in @pxref{a,,Advanced Features}. For
instance, here's how you can retrieve a cell value from the current sheet:

@example
> get_cell "A1"
  "Gnumeric/Pure Examples"
@end example

@noindent

Using @code{call} (see @pxref{b,,Calling Gnumeric from Pure}), you can also invoke any
Gnumeric function:

@example
> call "product" (1..10)
  3628800.0
@end example

@noindent

@node Defining Your Own Functions,Gnumeric/Pure Interface,Interactive Pure Shell,Top
@anchor{gnumeric-pure defining-your-own-functions}@anchor{5}
@chapter Defining Your Own Functions


After playing around with @code{pure_func.pure} and the interactive Pure shell
for a while, of course you will want to write your own functions, that's what
this extension is about after all! This section shows you how to do this.

@menu
* Creating a Simple Plugin:: 
* The plugin.xml File: The plugin xml File. 
* Loading the Plugin:: 
* Spicing It Up:: 

@end menu

@node Creating a Simple Plugin,The plugin xml File,,Defining Your Own Functions
@anchor{gnumeric-pure creating-a-simple-plugin}@anchor{c}
@section Creating a Simple Plugin


Let's consider a simple example: the factorial function. In Pure this function
can be implemented as follows:

@example
factorial [x] = foldl (*) 1 (1..x);
@end example

@noindent

Note the list bracket around the argument @code{x}. You wouldn't normally pass a
single numeric argument that way in Pure, but this is needed here since by
default Gnumeric passes arguments as a list to a Pure function. There are
other ways to configure the call interface to Pure functions, but these
require that we tell Gnumeric about the number and types of arguments, see
@pxref{d,,Gnumeric/Pure Interface} below. For the moment let's stick to the default
scheme, however, in order to keep things simple.

Put the above definition into a script file, say, @code{myplugin.pure}. Next we
need to create a @code{plugin.xml} file to tell Gnumeric about our plugin and
which functions it provides. While these files can be written by hand, this is
tedious and error-prone. Fortunately, recent Gnumeric/Pure versions provide
the @code{pure-gnm} helper script which makes this quite easy. To use
@code{pure-gnm} with our plugin script, we have to add a special "hashbang"
comment block to our script which supplies the needed information. In our
case, this might look as follows:

@example
#! N: My Pure functions
#! C: Pure
#! D: My Pure functions.
#! F: factorial
@end example

@noindent

You can add this comment block anywhere in your plugin script, but usually it
is placed near the beginning. The different fields have the following meaning:


@itemize *

@item 
@code{N}: the name of the plugin

@item 
@code{C}: the function category

@item 
@code{D}: a more detailed description of the plugin

@item 
@code{F}: a whitespace-delimited list of Pure function names
@end itemize

The contents of the @code{N} and @code{D} fields (name and description) are visible
in Gnumeric's "Plugin Manager" dialog. You should specify at least the name
field (otherwise the plugin will be displayed as "Unnamed" in the dialog),
while the description is optional (if you don't specify one, the description
of the plugin will be empty). The @code{C} field denotes the category under which
the functions listed in the @code{F} field will be shown in Gnumeric's "f(x)"
dialog; if you don't specify this, the functions will be in the "Unknown"
category. The @code{F} field is the most crucial part. It must contain all Pure
functions defined in the plugin script or its imports that you want to be
visible in Gnumeric, so you have to keep this in sync with the actual function
definitions in the script; if you don't specify this, the plugin will provide
no functions at all.

The @code{D} and @code{F} fields can also be split into multiple lines (each
prefixed with the "hashbang" comment marker and the corresponding field
identifier) if necessary.

So our @code{myplugin.pure} script now looks like this:

@example
#! N: My Pure functions
#! C: Pure
#! D: My Pure functions.
#! F: factorial

factorial [x] = foldl (*) 1 (1..x);
@end example

@noindent

Once you've added the comment block, you can generate the @code{plugin.xml} file
for the plugin simply as follows:

@example
$ pure-gnm myplugin.pure > plugin.xml
@end example

@noindent

Note that by default @code{pure-gnm} writes the @code{plugin.xml} file to standard
output which is useful if you want to check the generated file first. To
actually create the file, we simply redirect the output to @code{plugin.xml}.

You'll have to redo this every time your plugin changes (i.e., you've added
new functions or deleted or renamed old ones, or changed the name or
description of the plugin). It's easy to automate this step using
@code{make}. E.g., the following Makefile will do the trick:

@example
myplugin = myplugin.pure

all: plugin.xml

plugin.xml: $(myplugin)
        pure-gnm $< > $@@

clean:
        rm -f plugin.xml
@end example

@noindent

Now you can just run @code{make} in the plugin directory and it will rebuild the
@code{plugin.xml} file as needed.

@node The plugin xml File,Loading the Plugin,Creating a Simple Plugin,Defining Your Own Functions
@anchor{gnumeric-pure the-plugin-xml-file}@anchor{e}
@section The plugin.xml File


The @code{plugin.xml} file resulting from the previous step looks like this:

@example
<?xml version="1.0" encoding="UTF-8"?>
<plugin id="Gnumeric_myplugin">
  <information>
    <name>My Pure functions</name>
    <description>My Pure functions.</description>
    <require_explicit_enabling/>
  </information>
  <loader type="Gnumeric_PureLoader:pure">
    <attribute name="module_name" value="myplugin.pure"/>
  </loader>
  <services>
    <service type="function_group" id="myplugin">
      <category>Pure</category>
      <functions>
        <function name="factorial"/>
      </functions>
    </service>
  </services>
</plugin>
@end example

@noindent

You can also edit this file by hand if you know what you're doing; in that
case, please check the Gnumeric documentation for details about the format of
these files. The template used by @code{pure-gnm} to generate these files can be
found in the source distribution (see @code{plugin.xml} in the @code{pure-gnm}
folder) or under @code{/usr/local/lib/pure-gnm} after installation. You can edit
this file (carefully!) in order to implement global changes that you want to
be in every @code{plugin.xml} file generated by @code{pure-gnm}.

Two specific items that you might want to edit by hand are the
@code{<require_explicit_enabling/>} tag and the @code{id} properties of the
@code{<plugin>} and @code{<service>} tags:


@itemize *

@item 
The @code{<require_explicit_enabling/>} tag indicates that Gnumeric shouldn't
enable the new plugin until you explicitly tell it to. You can remove that
line if you want Gnumeric to automatically enable new plugins as they are
added to the system.

@item 
The @code{pure-gnm} script automatically derives the @code{id} properties of the
@code{<plugin>} and @code{<service>} tags from the name of the plugin script,
which is a sensible default in most cases. However, you might have to change
these identifiers if they happen to collide with other Gnumeric plugins and
services. This can be done by either editing the generated @code{plugin.xml}
file or by renaming the plugin script accordingly.
@end itemize

Note that the only really Pure-specific part in the xml file is the loader
description which also names the Pure script implementing the plugin in the
value of the @code{module_name} attribute. In this case this is just
@code{"myplugin.pure"}. This path is taken relative to the directory containing
the @code{plugin.xml} file, but you can also specify an absolute path there if
you want to keep the plugin script elsewhere. To achieve this with
@code{pure-gnm}, you can just invoke it with an absolute path name, e.g.:

@example
$ pure-gnm $PWD/myplugin.pure > plugin.xml
@end example

@noindent

Now you can move the @code{plugin.xml} file whereever you like and still have
Gnumeric find the script file in its prescribed location. Again, this can be
automatized using @code{make} fairly easily; we'll return to that in the
following section.

@node Loading the Plugin,Spicing It Up,The plugin xml File,Defining Your Own Functions
@anchor{gnumeric-pure loading-the-plugin}@anchor{f}
@section Loading the Plugin


We now have the plugin script @code{myplugin.pure} and the @code{plugin.xml} file in
the same directory, say, @code{/some/path/myplugin}. We still need to tell
Gnumeric about the new plugin, though, so that it can find it. Unfortunately,
the mechanics of making a plugin known to Gnumeric are somewhat involved, so
we discuss the necessary steps in detail below. There are basically three ways
you can go about this:


@itemize *

@item 
If you want to keep plugin script and the @code{plugin.xml} file where they
are, you'll have to change Gnumeric's plugin path so that it includes the
@emph{parent} directory @code{/some/path} (not @code{/some/path/myplugin}). This is
done by adding the directory under the Directories tab in Gnumeric's
Tools/Plug-ins dialog, after which you'll have to restart Gnumeric so that
it picks up the changes in the plugin search path.

@item 
Second, you can also move or copy the entire @code{/some/path/myplugin}
directory to your personal Gnumeric plugin folder (usually
@code{~/.gnumeric/<version>/plugins}). Gnumeric will always search this
directory for new plugins by default, so modifying the plugin search path is
not necessary. However, keeping the plugin script in a hidden location in
your home directory may not be very convenient if you want to modify the
script later.

@item 
Third, you can get the best of both previous methods by keeping the plugin
script where it is and copying just the @code{plugin.xml} file to your personal
Gnumeric plugin folder.
@end itemize

The third method tends to be the easiest, but note that it requires that the
plugin script needs to be specified as an absolute path (as sketched out
previously). Fortunately, it's fairly easy to automate this with @code{make}.
The following requires GNU make to work, and you'll also need to have the
Gnumeric development files installed, so that the Gnumeric version can be
determined easily with a shell command. These rules are to be added to the end
of the Makefile described previously under @pxref{c,,Creating a Simple Plugin}.

@example
gnmversion=$(shell pkg-config --modversion libspreadsheet-1.12)
plugindir=$(HOME)/.gnumeric/$(gnmversion)/plugins/myplugin

install: $(myplugin)
        test -d $(plugindir) || mkdir -p $(plugindir)
        pure-gnm $(CURDIR)/$< > $(plugindir)/plugin.xml

uninstall:
        rm -rf $(plugindir)
@end example

@noindent

Now you can just run @code{make install} to make the plugin known to Gnumeric.
Note that we also added a rule that allows you to uninstall the plugin if it
isn't needed any more.

In any case, once you fire up Gnumeric again, the new plugin should be listed
as "My Pure functions" on the Plugin List tab in the Tools/Plug-ins
dialog. Check it to enable it. The @code{factorial} function defined in the
plugin should now be available and ready to be called just like any other
Gnumeric function. For instance, type this into a cell to have the factorial
of 10 computed:

@example
=factorial(10)
@end example

@noindent

Also try saving the spreadsheet and loading it again after restarting
Gnumeric. The plugin will now be loaded automatically and the spreadsheet
should display the proper value of the factorial.

@cartouche
@quotation Note 
Once you start playing around with your own Pure plugins, you may
run into one common mishap: You open an existing spreadsheet without having
enabled the plugins it uses. An easily visible symptom of that is that
you'll see cells showing the @code{#NAME?} error. You will then have to enable
those plugins again @emph{and} reload the spreadsheet afterwards, so that
everything is recalculated properly.

In contrast, just changing the body of a function in a plugin usually needs
neither a restart of Gnumeric nor a reloading of the spreadsheet. In this
case it's often sufficient to reload all scripts with the "Reload Pure
Scripts" option in the Tools/Pure menu, after which you can use
“Recalculate” (F9) to recompute the spreadsheet.
@end quotation
@end cartouche

It is also worth mentioning here that the Pure loader can load multiple Pure
plugins (and of course each plugin can provide as many functions as you
want). You only need to tell Gnumeric about them after creating the scripts
and @code{plugin.xml} files and placing them into corresponding plugin
directories. Just enable the ones that you want in Tools/Plug-ins. All scripts
are loaded in the same Pure interpreter (and thus are treated like one big
script) so that functions in one script can use the function and variable
definitions in another. If you need to access the definitions in the
@code{pure_func.pure} "mother script", you can also just import it into your
scripts with a @code{using} clause, i.e.: @code{using pure_func;}

Another important point is that a Pure plugin script is always loaded in the
directory where it is located, as indicated by the corresponding
@code{plugin.xml} file, even if it is different from the plugin directory. That
is, the current working directory (which is normally the directory that
Gnumeric was started in) is temporarily set to the directory holding the
plugin script while the script is being loaded. This enables the script to
find imported scripts and other files (such as media files or scripts written
in other languages) that it may need at load time. This wasn't needed in this
simple example, but you can find other examples in the Gnumeric/Pure
distribution which make good use of this feature.

@node Spicing It Up,,Loading the Plugin,Defining Your Own Functions
@anchor{gnumeric-pure spicing-it-up}@anchor{10}
@section Spicing It Up


Our plugin example is now essentially complete, but in order to make it really
convenient to use, we may want to add some information about how the
@code{factorial} function is to be called in Gnumeric. Gnumeric doesn't keep this
kind of information in the @code{plugin.xml} file, but expects it to be provided
by the plugin itself. In the Gnumeric/Pure interface this can be done by
adding a rule for the @code{gnm_info} function. In our example we tell Gnumeric
that @code{factorial} expects a single numeric argument. While we're at it, we
might as well add some helpful documentation to be displayed in Gnumeric's
"f(x)" dialog. The details of this are described in the following section, but
to give you a sneak preview, here's a beefed-up version of our script which
implements all this (you can also find this version of the example along with
a GNU Makefile in the Gnumeric/Pure distribution):

@example
#! N: My Pure functions
#! C: Pure
#! D: My Pure functions.
#! F: factorial

factorial x = foldl (*) 1 (1..x);

using pure_func; // for the gnm_help function
gnm_info "factorial" = "f", gnm_help "factorial:factorial of a number"
 ["x:number"] "Computes the factorial of @@@{x@}." [] ["=factorial(10)"] [];
@end example

@noindent

Fire up Gnumeric again, press the "f(x)" button and select @code{factorial} under
the @code{Pure} category. The "f(x)" dialog should now display the additional
information we added above. Also note that Gnumeric now knows that this
function is supposed to be called with exactly one @code{f} (numeric) argument.
Therefore the list brackets around the argument of @code{factorial} aren't needed
any more, so don't forget to remove them, as shown in the above code sample.

This completes our little example. As an exercise, you're invited to add more
functions on your own. (Don't forget to change the @code{#! F} line accordingly
and rerun @code{pure-gnm} when you do this, so that Gnumeric knows about the new
functions.) It also pays off to take a look at some of the other included
examples, you can find these in the @code{examples} folder of the distribution
tarball.

@node Gnumeric/Pure Interface,Advanced Features,Defining Your Own Functions,Top
@anchor{gnumeric-pure gnumeric-pure-interface}@anchor{d}
@chapter Gnumeric/Pure Interface


We already explained in the previous section that, when a Pure function is
called from Gnumeric, it receives its arguments in a list by default. However,
it is possible to tell Gnumeric about the expected arguments of the function
and also specify a help text to be displayed in the "f(x)" dialog, by giving a
definition of the @code{gnm_info} function as explained below.

Note that @code{gnm_info} is really an ordinary Pure function. Thus, rather than
hardcoding this information as static text (such as the "docstrings" used in
Gnumeric's Python extension), the function descriptions can also be
constructed dynamically in corresponding Pure code. This offers an opportunity
for programmatic customizations. But note that the @code{gnm_info} function will
only be invoked when the plugin script is loaded, so once that is done the
function description remains the same for the entire Gnumeric session.

@menu
* Function Descriptions:: 
* Conversions Between Pure and Gnumeric Values:: 

@end menu

@node Function Descriptions,Conversions Between Pure and Gnumeric Values,,Gnumeric/Pure Interface
@anchor{gnumeric-pure function-descriptions}@anchor{11}
@section Function Descriptions


To describe a given function to Gnumeric, define @code{gnm_info "<name>"} (where
@code{<name>} is the name of the function) as a pair with the following elements:


@itemize *

@item 
The first element, a string, gives the signature of the function. E.g.,
@code{""} denotes a function without arguments, @code{"f"} a function taking a
single float parameter, @code{"fs"} a function taking a float and a string
argument (in that order), etc. Optional parameters can be indicated using
@code{|}, as in @code{"ff|s"} (two non-optional floats, followed by an optional
string). See below for a complete list of the supported parameter types.

@item 
The second element is a list of hash pairs @code{key=>text} which together make
up the help text shown in Gnumeric's "f(x)" dialog. You should at least
specify the function name along with a short synopsis here, e.g.
@code{GNM_FUNC_HELP_NAME => "frob:the frob function"}. Parameter descriptions
take the form @code{GNM_FUNC_HELP_ARG => "x:integer"}. There are a number of
other useful elements, see below for details.
@end itemize

Both the signature and the function description are optional. That is,
@code{gnm_info} may return either just a signature string, or a list of hash
pairs with the function description, or both. The signature defaults to a
variadic function which takes any number of parameters of any type (see
below), and the description defaults to some boilerplate text which says that
the function hasn't been documented yet.

Note that if no signature is given, then the function accepts any number of
parameters of any type. In that case, or if there are optional parameters, the
function becomes variadic and the (optional) parameters are passed as a Pure
list (in addition to the non-optional parameters).

Here's the list of valid parameter types, as they are documented in the
Gnumeric sources:

@example
f : float           no errors, string conversion attempted
b : boolean         identical to f
s : string          no errors
S : scalar          any non-error scalar
E : scalar          any scalar, including errors

r : cell range      content may not be evaluated yet
A : area            array, range (as above), or scalar
? : anything        any value (scalars, non-scalars, errors, whatever)
@end example

@noindent

The keys used in the function description may be any of the following, along
with sample text for each type of field:

@example
GNM_FUNC_HELP_NAME         => "name:synopsis"
GNM_FUNC_HELP_ARG          => "name:parameter description"
GNM_FUNC_HELP_DESCRIPTION  => "Long description."
GNM_FUNC_HELP_NOTE         => "Note."
GNM_FUNC_HELP_EXAMPLES     => "=sample_formula()"
GNM_FUNC_HELP_SEEALSO      => "foo,bar,..."
@end example

@noindent

The following keys are only supported in the latest Gnumeric versions:

@example
GNM_FUNC_HELP_EXTREF       => "wiki:en:Trigonometric_functions"
GNM_FUNC_HELP_EXCEL        => "Excel compatibility information."
GNM_FUNC_HELP_ODF          => "OpenOffice compatibility information."
@end example

@noindent

Note that inside the descriptions, the notation @code{@@@{arg@}} (@code{@@arg} in older
Gnumeric versions) can be used to refer to a parameter value. For instance,
here's a sample description for a binary function which also includes a help
text:

@example
gnm_info "pure_max" = "ff",
[GNM_FUNC_HELP_NAME     => "pure_max:maximum of two numbers",
 GNM_FUNC_HELP_ARG      => "x:number",
 GNM_FUNC_HELP_ARG      => "y:number",
 GNM_FUNC_HELP_DESCRIPTION =>
 "Computes the maximum of two numbers @@@{x@} and @@@{y@}.",
 GNM_FUNC_HELP_EXAMPLES => "=pure_max(17,22)"];
@end example

@noindent

As you can see, the function descriptions are a bit unwieldy, so it's
convenient to construct them using this little helper function defined in
@code{pure_func.pure}:

@example
gnm_help name::string args descr::string notes examples see_also =
  [GNM_FUNC_HELP_NAME         => name] +
  [GNM_FUNC_HELP_ARG          => x | x::string = args ] +
  [GNM_FUNC_HELP_DESCRIPTION  => descr ] +
  [GNM_FUNC_HELP_NOTE         => x | x::string = notes ] +
  [GNM_FUNC_HELP_EXAMPLES     => x | x::string = examples ] +
  (if null see_also then [] else
   [GNM_FUNC_HELP_SEEALSO     => join "," see_also]);
@end example

@noindent

Now the description can be written simply as follows:

@example
gnm_info "pure_max" = "ff", gnm_help "pure_max:maximum of two numbers"
  ["x:number", "y:number"]
  "Computes the maximum of two numbers @@@{x@} and @@@{y@}."
  [] ["=pure_max(17,22)"] [];
@end example

@noindent

Since this function only has fixed arguments, it will be called in curried
form, i.e., as @code{pure_max x y}. For instance, the actual definition of
@code{pure_max} may look as follows:

@example
pure_max x y = max x y;
@end example

@noindent

Conversely, if no signature is given, then the function accepts any number of
parameters of any type, which are passed as a list. For instance:

@example
gnm_info "pure_sum" = gnm_help "pure_sum:sum of a collection of numbers"
  [] "Computes the sum of a collection of numbers."
  [] ["=pure_sum(1,2,3,4,5,6)"] ["pure_sums"];
@end example

@noindent

Here the function will be called as @code{pure_sum [x1,x2,...]}, where @code{x1},
@code{x2}, etc. are the arguments the function is invoked with. Note that in this
case there may be any number of arguments (including zero) of any type, so
your function definition must be prepared to handle this. If a function does
not have a @code{gnm_info} description at all then it is treated in the same
fashion. The @code{pure_func.pure} script contains some examples showing how to
write functions which can deal with any numbers of scalars, arrays or ranges,
see the @code{pure_sum} and @code{pure_sums} examples. These employ the following
@code{ranges} function to "flatten" a parameter list to a list holding all
denoted values:

@example
ranges xs = cat [ case x of _::matrix = list x; _ = [x] end | x = xs ];
@end example

@noindent

E.g., the @code{pure_sum} function can now be defined as follows:

@example
pure_sum xs = foldl (+) 0 (ranges xs);
@end example

@noindent

A function may also have both fixed and optional arguments (note that in what
follows we're going to omit the detailed function descriptions for brevity):

@example
gnm_info "foo" = "ff|ff";
@end example

@noindent

In this case the fixed arguments are passed in curried form as usual, while
the optional parameters are passed as a list. That is, @code{foo} may be called
as @code{foo x y []}, @code{foo x y [z]} or @code{foo x y [z,t]}, depending on whether
it is invoked with two, three or four arguments.

@node Conversions Between Pure and Gnumeric Values,,Function Descriptions,Gnumeric/Pure Interface
@anchor{gnumeric-pure conversions-between-pure-and-gnumeric-values}@anchor{12}
@section Conversions Between Pure and Gnumeric Values


The marshalling of types between Gnumeric and Pure is pretty straightforward;
basically, Pure numbers, strings and matrices map to Gnumeric numbers, strings
and arrays, respectively. The following table summarizes the available
conversions:


@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} 
@headitem

Pure

@tab

Gnumeric

@item

@code{gnm_error "#N/A"}

@tab

error

@item

@code{4711}, @code{4711L}, @code{4711.0}

@tab

scalar (number)

@item

@code{"Hello world"}

@tab

string

@item

@code{()}

@tab

empty

@item

@code{(1,2,3)}

@tab

array

@item

@code{[1,2,3]}

@tab

array

@item

@code{@{1,2,3;4,5,6@}}

@tab

array (or cell range)

@item

@code{"A1:B10"}

@tab

cell range (@code{"r"} conversion)

@end multitable


These conversions mostly work both ways. Note that on input, cell ranges are
usually passed as matrices to Pure functions (i.e., they are passed "by
value"), unless the function signature specifies a @code{"r"} conversion in which
case the cell ranges themselves are passed to the function in string form.
(Such values can also be passed on to Gnumeric functions which expect a cell
range (@code{"r"} ) parameter, see @pxref{b,,Calling Gnumeric from Pure} below.)

Conversely, matrices, lists and tuples all become Gnumeric arrays on output,
so usually you'll want to enter these as array functions (@code{Ctrl-Shift-Enter}
in Gnumeric). As a special case, the empty tuple can be used to denote empty
cell values (but note that empty Gnumeric values may become zeros when passed
as float or array arguments to Pure functions).

Another special case is a term of the form @code{gnm_error msg}, where @code{msg} is
a string value indicating a Gnumeric error value such as @code{"#N/A"},
@code{"#NAME?"}, @code{"#NULL!"}, etc. When returned by a plugin function, the error
text will be displayed in the corresponding Gnumeric cell.

If a Pure function returns a value that doesn't match any of the above then it
is converted to a string in Pure expression syntax and that string is returned
as the result of the function invocation in Gnumeric. This makes it possible
to return any kind of symbolic Pure value, but note that if such a value is
then fed into another Pure function, that function will have to convert the
string value back to the internal representation if needed; this can be done
very conveniently using Pure's @code{eval} function, see the Pure documentation
for details.

@node Advanced Features,Index,Gnumeric/Pure Interface,Top
@anchor{gnumeric-pure advanced-features}@anchor{a}
@chapter Advanced Features


This section explains various additional features provided by the
Gnumeric/Pure interface that should be useful for writing your own functions.
Note that for your convenience all functions discussed in this section are
declared in @code{pure_func.pure}.

@menu
* Calling Gnumeric from Pure:: 
* Accessing Spreadsheet Cells:: 
* Asynchronous Data Sources:: 
* Triggers:: 
* Sheet Objects:: 
* OpenGL Interface:: 

@end menu

@node Calling Gnumeric from Pure,Accessing Spreadsheet Cells,,Advanced Features
@anchor{gnumeric-pure calling-gnumeric-from-pure}@anchor{b}
@section Calling Gnumeric from Pure


It is possible to call Gnumeric functions from Pure using the @code{call}
function which takes the name of the function (a string) as its first, and the
parameters as the second (list) argument. For instance:

@example
gnm_info "gnm_bitand" = "ff";
gnm_bitand x y = call "bitand" [x,y];
@end example

@noindent

Note that @code{call} is an external C function provided by Gnumeric/Pure. If
you want to use it, it must be declared in your Pure script as follows:

@example
extern expr* pure_gnmcall(char* name, expr* args) = call;
@end example

@noindent

However, @code{pure_func.pure} already contains the above declaration, so you
don't have to do this yourself if you import @code{pure_func.pure} in your
scripts.

Also note that @code{call} doesn't do any of Gnumeric's automatic conversions on
the parameters, so you have to pass the proper types of arguments as required
by the function.

@node Accessing Spreadsheet Cells,Asynchronous Data Sources,Calling Gnumeric from Pure,Advanced Features
@anchor{gnumeric-pure accessing-spreadsheet-cells}@anchor{13}
@section Accessing Spreadsheet Cells


Gnumeric/Pure provides the following functions to retrieve and modify the
contents of spreadsheet cells and ranges of such cells:

@example
extern expr* pure_get_cell(char* s) = get_cell;
extern expr* pure_get_cell_text(char* s) = get_cell_text;
extern expr* pure_get_cell_format(char* s) = get_cell_format;
extern expr* pure_set_cell(char* s, expr *x) = set_cell;
extern expr* pure_set_cell_text(char* s, expr *x) = set_cell_text;
extern expr* pure_set_cell_format(char* s, expr *x) = set_cell_format;
extern expr* pure_get_range(char* s) = get_range;
extern expr* pure_get_range_text(char* s) = get_range_text;
extern expr* pure_get_range_format(char* s) = get_range_format;
extern expr* pure_set_range(char* s, expr *x) = set_range;
extern expr* pure_set_range_text(char* s, expr *x) = set_range_text;
extern expr* pure_set_range_format(char* s, expr *x) = set_range_format;
@end example

@noindent

For instance, here's how you use these functions to write and then read some
cell values (try this in the @pxref{9,,interactive Pure shell}):

@example
> set_cell "A14" 42
  ()
> get_cell "A14"
  42.0
> set_range "A14:G14" $ scanl (*) 1 (1..6)
  ()
> get_range "A14:G14"
  @{1.0,1.0,2.0,6.0,24.0,120.0,720.0@}
> set_cell_text "A14" "=sum(B14:G14)"
  ()
> get_cell "A14"
  873.0
> get_cell_text "A14"
  "=sum(B14:G14)"
> get_range_text "A14:G14"
  @{"=sum(B14:G14)","1","2","6","24","120","720"@}
@end example

@noindent

Note that while the @code{set_cell} function sets the given cell to a constant
value, @code{set_cell_text} also allows you to store a formula in a cell which
will then be evaluated as usual. Similarly, @code{get_cell} retrieves the cell
value, while @code{get_cell_text} yields the text in the cell, as entered by the
user (which will either be a formula or the textual representation of a
constant value). The @code{set_range}, @code{set_range_text}, @code{get_range} and
@code{get_range_text} functions work analogously, but are used to manipulate
entire ranges of cells, which can be set from Pure tuples, lists or matrices,
and retrieved as Pure matrices.

Functions to retrieve and change the cell format are also provided (watch the
contents of the cell @code{A14} change its color to blue on entering the first
expression):

@example
> set_cell_format "A14" "[Blue]0.00"
  ()
> get_range_format "A14:C14"
  @{"[Blue]0.00","General","General"@}
@end example

@noindent

There are also functions to get the position of the "current" cell (i.e., the
cell from which a Pure function was called), and to translate between cell
ranges in Gnumeric syntax and the corresponding internal representation
consisting of a pointer to a Gnumeric sheet and the cell or range
coordinates:

@example
extern expr* pure_this_cell() = this_cell;
extern expr* pure_parse_range(char* s) = parse_range;
extern expr* pure_make_range(expr* x) = make_range;
@end example

@noindent

Examples:

@example
> this_cell
  "B4"
> parse_range this_cell
  #<pointer 0x875220>,1,3
> make_range (NULL,0,0,10,10)
  "Sheet2!A1:K11"
@end example

@noindent

@node Asynchronous Data Sources,Triggers,Accessing Spreadsheet Cells,Advanced Features
@anchor{gnumeric-pure asynchronous-data-sources}@anchor{14}
@section Asynchronous Data Sources


Gnumeric/Pure makes it easy to set up asynchronous data sources which draw
values from a Pure computation executed in a background process. This facility
is useful to carry out lengthy computations in the background while you can
continue to work with your spreadsheet. It also allows you to process incoming
data and asynchronous events from special devices (MIDI, sensors, stock
tickers, etc.) in (soft) realtime.

To do this, you simply pass an expression to the @code{datasource} function. This
is another external C function provided by Gnumeric/Pure, which is declared in
@code{pure_func.pure} as follows:

@example
extern expr* pure_datasource(expr* x) = datasource;
@end example

@noindent

The argument to @code{datasource} is typically a thunk or stream (lazy list)
which is to be evaluated in the background. The call to @code{datasource}
initially returns a @code{#N/A} value (@code{gnm_error "#N/A"}) while the
computation is still in progress. The cell containing the data source then
gets updated automatically as soon as the value becomes available, at which
point the @code{datasource} call now returns the computed value. E.g., here's how
you would wrap up a lengthy calculation as a thunk and submit it to
@code{datasource} which carries out the computation as a background task:

@example
gnm_info "pure_frob" = "f";
pure_frob x = datasource (lengthy_calculation x&);
lengthy_calculation x = sleep 3 $$ foldl (*) 1 (1..x);
@end example

@noindent

Note that a cell value may draw values from as many independent data sources
as you want, so the definition of a cell may also involve multiple invocations
of @code{datasource}:

@example
gnm_info "pure_frob2" = "ff";
pure_frob2 x y = datasource (lengthy_calculation x&),
  datasource (lengthy_calculation y&);
@end example

@noindent

Special treatment is given to (lazy) lists, in this case @code{datasource}
returns a new value each time a list element becomes available. For instance,
the following function uses an infinite stream to count off the seconds
starting from a given initial value:

@example
gnm_info "pure_counter" = "f";
pure_counter x = datasource [sleep (i>x) $$ i | i = x..inf];
@end example

@noindent

You can also try this interactively in the Pure shell:

@example
> datasource [sleep (i>0) $$ i | i = 0..inf]
  0
  1
  ...
@end example

@noindent

Here's another example for the Pure shell which prints the prime numbers:

@example
> datasource primes with primes = sieve (2..inf);
    sieve (p:qs) = p : (sleep 1 $$ sieve [q | q = qs; q mod p])& end
  2
  3
  5
  ...
@end example

@noindent

Note that when processing a lazy list, the cell containing the call will keep
changing as long as new values are produced (i.e., forever in this
example). The "Stop Data Sources" option in the Tools/Pure menu can be used to
stop all active data sources. "Reload Pure Scripts" also does this. You can
then restart the data sources at any time by using "Recalculate" (@code{F9}) to
recompute the spreadsheet.

Also note that because of the special way that @code{datasource} handles list
values, you cannot return a list directly as the result of @code{datasource}, if
it is to be treated as a single result. Instead, you'll have to wrap the
result in a singleton list (e.g., @code{datasource [[lengthy_calculation
x,lengthy_calculation y]&]}), or return another aggregate (i.e., a matrix or
a tuple).

Finally, note that when the arguments of a call involving @code{datasource}
change (because they depend on other cells which may have been updated), the
computation is automatically restarted with the new parameters. The default
behaviour in this case is that the entire computation will be redone from
scratch, but it's also possible to wrap up calls to @code{datasource} in a manner
which enables more elaborate communication between Gnumeric and background
tasks initiated with @code{datasource}. This is beyond the scope of this manual,
however, so we leave this as an exercise to the interested reader.

@node Triggers,Sheet Objects,Asynchronous Data Sources,Advanced Features
@anchor{gnumeric-pure triggers}@anchor{15}
@section Triggers


In addition to asynchronous data sources, the @code{trigger} function is provided
to compute values or take actions depending on some external condition, such
as the availability of data on a special device or the creation of some widget
(see the next section):

@example
extern expr* pure_trigger(int timeout, expr* cond, expr *val, expr *data)
  = trigger;
@end example

@noindent

Thus a typical invocation of the function looks as follows:

@example
trigger timeout condition value data
@end example

@noindent

The @code{condition} and @code{value} arguments are callback functions which get
invoked by @code{trigger}, passing them the given @code{data} argument. The trigger
reevaluates the given condition in regular intervals (1 second in the current
implementation) and, as soon as it becomes @code{true}, computes the given value
and returns that value as the result of the @code{trigger} call. As long as the
condition doesn't hold, @code{trigger} returns a @code{#N/A} value (@code{gnm_error
"#N/A"}). Note that, in difference to @code{datasource}, both the condition and
the value are computed in Gnumeric (rather than a child process), so that it
is possible to access the current information in the loaded spreadsheet.

The @code{timeout} value determines how often the condition is checked. If it is
positive, the condition will be reevaluated @code{timeout+1} times (once
initially, and then once per second for a total duration of @code{timeout}
seconds). If it is negative, the trigger never times out and the condition
will be checked repeatedly until the trigger expression is removed (or
Gnumeric is exited). In either case @code{value data} will be recomputed each
time @code{condition data} yields @code{true}. (This is most useful if the computed
value, as a side effect, arranges for the condition to become @code{false} again
afterwards.) Finally, if @code{timeout} is zero then the trigger fires at most
once, as soon as the condition becomes @code{true}, at which point @code{value data}
is computed just once.

Here's a (rather useless) example of a trigger which fires exactly once, as
soon as a certain cell goes to a certain value, and then modifies another cell
value accordingly:

@example
> trigger 0 (\_->get_cell "A14"==="Hello") (\_->set_cell "A15" "World") ()
@end example

@noindent

Now, as soon as you type @code{Hello} in the cell A14, the trigger will print
@code{World} in cell A15. Note that the @code{data} argument isn't used here. A
more useful example will be discussed in the following section.

@node Sheet Objects,OpenGL Interface,Triggers,Advanced Features
@anchor{gnumeric-pure sheet-objects}@anchor{16}
@section Sheet Objects


Gnumeric offers some kinds of special objects which can be placed on a
sheet. This comprises the chart and image objects which can be found in the
"Insert" menu, as well as a number of useful graphical elements and GUI
widgets on the "Object" toolbar, accessible via "View/Toolbars". The latter
are also useful for providing control input to Pure functions.

Gnumeric/Pure provides the following function to retrieve information about
the special objects in a spreadsheet:

@example
extern expr* pure_sheet_objects() = sheet_objects;
@end example

@noindent

For instance, with one button object in your spreadsheet, the output of
@code{sheet_objects} might look like this:

@example
> sheet_objects
  [("Sheet1","button","Push Me!","A11",[#<pointer 0x2a1dcd0>])]
@end example

@noindent

Each object is described by a tuple which lists the name of the sheet on which
the object is located, the type of object, the object's content or label (if
applicable), the cell which the object is linked to (if applicable), and a
list of pointers to the corresponding @code{GtkWidgets} (if any). Note that in
general a GUI object may be associated with several widgets, as Gnumeric
allows you to have multiple views on the same spreadsheet, so there will be
one widget for each view an object is visible in. Also note that the
content/label information depends on the particular type of object:


@itemize *

@item 
List and combo widgets return the content link (referring to the cells in
the spreadsheet holding the items shown in the list).

@item 
Frame and button widgets return the label shown on the widget.

@item 
Graphic objects like rectangles and ellipses return the text content of the
object.

@item 
Image objects (type @code{"image/xyz"}, where @code{xyz} is the type of image,
such as @code{svg} or @code{png}) return a pointer to the image data in this
field.
@end itemize

The @code{sheet_objects} function is a bit tricky to use, since some of the
objects or their associated widgets might not have been created yet when the
spreadsheet is loaded. Therefore it is necessary to use a trigger to make sure
that the information is updated once all objects are fully displayed. The
@code{pure_func.pure} script contains the following little wrapper around
@code{sheet_objects} which does this:

@example
pure_objects = trigger 0 (\_->all realized sheet_objects)
  (\_->matrix$map list sheet_objects) ()
with realized (_,_,_,_,w) = ~listp w || ~null w && ~any null w end;
@end example

@noindent

See the @code{widgets.gnumeric} spreadsheet in the distribution for an example.

Possible uses of this facility are left to your imagination. Using Gnumeric's
internal APIs and Pure's Gtk interface, you might manipulate the GUI widgets
in various ways (add icons to buttons or custom child widgets to frames,
etc.). One particularly useful case, for which Gnumeric/Pure has built-in
support, is rendering an OpenGL scene in a Gnumeric frame widget, see below.

@node OpenGL Interface,,Sheet Objects,Advanced Features
@anchor{gnumeric-pure opengl-interface}@anchor{7}
@section OpenGL Interface


Gnumeric/Pure provides special support for rendering OpenGL scenes into
Gnumeric frame widgets. To actually use this, you must have Pure's OpenGL
module installed. The following function is provided to equip a Gnumeric frame
with the OpenGL rendering capability:

@example
extern expr *pure_gl_window(char *name, int timeout,
                            expr *setup_cb, expr *config_cb,
                            expr *display_cb, expr *timer_cb,
                            expr *user_data) = gl_window;
@end example

@noindent

The meaning of the parameters is as follows:


@itemize *

@item 
@code{name} is a string which specifies the label of the frame widget into
which the scene is to be rendered.

@item 
@code{timeout} is a time value in milliseconds (an integer) which specifies the
period for invocations of the @code{timer_cb} callback, see below. If this
value is zero or negative then the timer callback is disabled.

@item 
@code{setup_cb}, @code{config_cb}, @code{display_cb} and @code{timer_cb} are the Pure
callback functions which are invoked by @code{gl_window} to actually render the
scene. The callbacks are all invoked with two arguments: the @code{user_data}
parameter that @code{gl_window} was invoked with, and a second parameter with
callback-specific information as described below.

@item 
@code{user_data} is any information that the caller wants to be passed as the
first argument to the callback functions.
@end itemize

The different callbacks are:


@itemize *

@item 
@code{setup_cb} is called for initializing the scene. It receives the
@code{GtkDrawingArea} widget as the second argument. Typically this is used to
set the initial projection and modelview matrices, enable lighting, etc.

@item 
@code{config_cb} is called when the width or height of the frame widget changes
so that the rendering parameters (typically the viewport) can be adjusted
accordingly. It is invoked with a pair of integers @code{(w,h)} as the second
argument, which denotes the new dimension allocated to the drawing area.

@item 
@code{display_cb} is called whenever the contents of the drawing area needs to
be redrawn. This typically does most of the work necessary to render the
scene. The second callback argument is always @code{()}.

@item 
@code{timer_cb} is called at regular intervals as specified with the
@code{timeout} parameter (see above), unless the @code{timeout} value is zero or
negative in which case this callback is disabled. The second callback
argument is always @code{()}. The timer callback is typically used to
incrementally adjust some parameters of the scene in order to render
animations. When invoked, the callback automatically arranges for
@code{display_cb} to be called afterwards, so you don't have to do that
manually in your callback definition.
@end itemize

You'll need at least either the @code{display_cb} or the @code{timer_cb} function to
render anything, but typically all of these callbacks will be needed for
animated scenes. Callback functions which aren't needed can be specified as
@code{()}.

There's also a related helper function which can be used as a trigger
condition to defer rendering until the target frame widget has been realized:

@example
extern bool pure_check_window(char *name) = check_window;
@end example

@noindent

This function returns @code{true} as soon as the named frame widget is ready to
go, at wich time @code{gl_windows} can be called on the widget. So your call to
@code{gl_windows} should usually be wrapped up like this:

@example
trigger 0 check_window
(\frame->gl_window frame timeout setup config display timer user_data) frame
@end example

@noindent

Here's an example from @code{pure_glfunc.pure} which shows how these functions
are to be used:

@example
using pure_func, GL, GLU;
extern void gdk_gl_draw_teapot(bool solid, double scale);
gnm_info "gltest" = "sbfff";

gltest frame m a b c = trigger 0 check_window
  (\frame->gl_window frame (m*40) setup config display timer ()) frame
with
  setup _ _ = () when
    // Initialize.
    GL::ClearColor 0.1 0.1 0.3 1.0;
    GL::ShadeModel GL::SMOOTH;
    GL::Enable GL::DEPTH_TEST;
    // Initial projection and modelview matrices.
    GL::MatrixMode GL::PROJECTION;
    GL::LoadIdentity;
    GL::Rotatef 20.0 (-1.0) 0.0 0.0;
    GL::MatrixMode GL::MODELVIEW;
    GL::LoadIdentity;
    // Lighting.
    GL::Lightfv GL::LIGHT0 GL::DIFFUSE @{1.0,0.0,0.0,1.0@};
    GL::Lightfv GL::LIGHT0 GL::POSITION @{2.0,2.0,-5.0,1.0@};
    GL::Enable GL::LIGHTING;
    GL::Enable GL::LIGHT0;
  end;
  config _ (w,h) = GL::Viewport 0 0 w h;
  display _ _ = () when
    GL::Clear (GL::DEPTH_BUFFER_BIT or GL::COLOR_BUFFER_BIT);
    gdk_gl_draw_teapot true 0.5;
  end if m;
  display _ _ = () when
    GL::Clear (GL::DEPTH_BUFFER_BIT or GL::COLOR_BUFFER_BIT);
    GL::LoadIdentity;
    GL::Rotatef (scale 360 a) 0.0 1.0 0.0;
    GL::Rotatef (scale 360 b) 1.0 0.0 0.0;
    GL::Rotatef (scale 360 c) 0.0 0.0 1.0;
    gdk_gl_draw_teapot true 0.5;
  end;
  timer _ _ = () when
    GL::Rotatef (scale 36 a) 0.0 1.0 0.0;
    GL::Rotatef (scale 36 b) 1.0 0.0 0.0;
    GL::Rotatef (scale 36 c) 0.0 0.0 1.0;
  end;
  scale step x = (x/100*step);
end;
@end example

@noindent

Have a look at the @code{gl-example.gnumeric} spreadsheet included in the
distribution to see this example in action. (You first need to enable the
"Pure OpenGL functions" in the Plugin Manager to make this work.)  The
screenshot below shows how the example looks like in Gnumeric.


@float Figure

@image{opengl,,,,png}

@caption{Gnumeric/Pure OpenGL example.}

@end float


@node Index,,Advanced Features,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

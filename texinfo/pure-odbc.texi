\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-odbc.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle pure-odbc
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-odbc: (pure-odbc.info). Pure-ODBC - ODBC interface
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.60, March 24, 2014

Albert Gräf (Editor)

Copyright @copyright{} 2009-2014, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title pure-odbc
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-odbc
@insertcopying
@end ifnottex

@c %**start of body
@anchor{pure-odbc doc}@anchor{1}
@geindex odbc (module)

Version 0.10, March 24, 2014


@display
Albert Graef <@email{aggraef@@gmail.com}>@w{ }
Jiri Spitz <@email{jiri.spitz@@bluetone.cz}>@w{ }
@end display



This module provides a simple ODBC interface for the Pure programming
language, which lets you access a large variety of open source and commercial
database systems from Pure. ODBC a.k.a. "Open Database Connectivity" was
originally developed by Microsoft for Windows, but is now available on many
different platforms, and two open source implementations exist for Unix-like
systems: iODBC (@indicateurl{http://www.iodbc.org}) and unixODBC (@indicateurl{http://www.unixodbc.org}).

ODBC has become the industry standard for portable and vendor independent
database access. Most modern relational databases provide an ODBC interface so
that they can be used with this module. This includes the popular open source
DBMSs MySQL (@indicateurl{http://www.mysql.com}) and PostgreSQL (@indicateurl{http://www.postgresql.org}).
The module provides the necessary operations to connect to an ODBC data source
and retrieve or modify data using SQL statements.

To make this module work, you must have an ODBC installation on your system,
as well as the driver backend for the DBMS you want to use (and, of course,
the DBMS itself). You also have to configure the DBMS as a data source for the
ODBC system. On Windows this is done with the ODBC applet in the system
control panel. For iODBC and unixODBC you can either edit the corresponding
configuration files (/etc/odbc.ini and/or ~/.odbc.ini) by hand, or use one of
the available graphical setup tools. More information about the setup process
can be found on the iODBC and unixODBC websites.


@c Note: If you're wondering about the funny formatting, this README
@c simultaneously serves to generate the documentation for this module
@c in a variety of formats, using the docutils text formatting system
@c (http://docutils.sourceforge.net/).

@menu
* Copying:: 
* Installation:: 
* Opening and Closing a Data Source:: 
* Getting Information about a Data Source:: 
* Executing SQL Queries:: 
* Low-Level Operations:: 
* Lazy Processing:: 
* Error Handling:: 
* Caveats and Bugs:: 
* Further Information and Examples:: 
* Module Index:: 
* Index:: 

@end menu

@node Copying,Installation,Top,Top
@anchor{pure-odbc module-odbc}@anchor{0}@anchor{pure-odbc pure-odbc-odbc-interface-for-the-pure-programming-language}@anchor{2}@anchor{pure-odbc copying}@anchor{3}
@chapter Copying



@display
Copyright (c) 2009 by Albert Graef <@email{aggraef@@gmail.com}>.@w{ }
Copyright (c) 2009 by Jiri Spitz <@email{jiri.spitz@@bluetone.cz}>.@w{ }
@end display



pure-odbc is free software: you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

pure-odbc is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.

@node Installation,Opening and Closing a Data Source,Copying,Top
@anchor{pure-odbc installation}@anchor{4}
@chapter Installation


Get the latest source from
@indicateurl{https://bitbucket.org/purelang/pure-lang/downloads/pure-odbc-0.10.tar.gz}.

Run @code{make} to compile the module and @code{make install} (as root) to install
it in the Pure library directory. This requires GNU make, and of course you
need to have Pure installed. The only other dependency is the GNU
Multiprecision Library (GMP).

@code{make} tries to guess your Pure installation directory and platform-specific
setup. If it gets this wrong, you can set some variables manually. In
particular, @code{make install prefix=/usr} sets the installation prefix, and
@code{make PIC=-fPIC} or some similar flag might be needed for compilation on 64
bit systems. The variable @code{ODBCLIB} specifies the ODBC library to be linked
with. The default value is @code{ODBCLIB=-lodbc}. Please see the Makefile for
details.

@node Opening and Closing a Data Source,Getting Information about a Data Source,Installation,Top
@anchor{pure-odbc opening-and-closing-a-data-source}@anchor{5}
@chapter Opening and Closing a Data Source


To open an ODBC connection, you have to specify a "connect string" which names
the data source to be used with the @code{odbc::connect} function. A list of
available data sources can be obtained with the @code{odbc::sources}
function. For instance, on my Linux system running MySQL and PostgreSQL it
shows the following:

@example
> odbc::sources;
[("myodbc","MySQL ODBC 2.50"),("psqlodbc","PostgreSQL ODBC")]
@end example

@noindent

The first component in each entry of the list is the name of the data source,
which can be used as the value of the @code{DSN} option in the connect string,
the second component provides a short description of the data source.

Likewise, the list of ODBC drivers available on your system can be obtained
with the @code{odbc::drivers} function which returns a list of pairs of driver
names and attributes. (Older ODBC implementations on Unix lacked this feature,
but it seems to be properly supported in recent unixODBC implementations at
least.) This function can be used to determine a legal value for the
@code{DRIVER} attribute in the connect string, see below.

The @code{odbc::connect} function is invoked with a single parameter, the connect
string, which is used to describe the data source and various other parameters
such as user id and password. For instance, on my system I can connect to the
local @code{myodbc} data source from above as follows:

@example
> let db = odbc::connect "DSN=myodbc";
@end example

@noindent

The @code{odbc::connect} function returns a pointer to an @code{ODBCHandle} object
which is used to refer to the database connection in the other routines
provided by this module. An @code{ODBCHandle} object is closed automatically when
it is no longer accessible. You can also close it explicitly with a call to
the @code{odbc::disconnect} function:

@example
> odbc::disconnect db;
@end example

@noindent

After @code{odbc::disconnect} has been invoked on a handle, any further
operations on it will fail.

@code{odbc::connect} allows a number of attributes to be passed to the ODBC
driver when opening the database connection. E.g., here's how to specify a
username and password; note that the different attributes are separated with a
semicolon:

@example
> let db = odbc::connect "DSN=myodbc;UID=root;PWD=guess";
@end example

@noindent

The precise set of attributes in the connect string depends on your ODBC
driver, but at least the following options should be available on most
systems. (Case is insignificant in the attribute names, so e.g. the
@code{DATABASE} attribute may be specified as either @code{DATABASE}, @code{Database}
or @code{database}.)


@itemize -

@item 
DSN=<data source name>

@item 
DRIVER=<driver name>

@item 
HOST=<server host name>

@item 
DATABASE=<database path>

@item 
UID=<user name>

@item 
PWD=<password>
@end itemize

The following attributes appear to be Windows-specific:


@itemize -

@item 
FILEDSN=<DSN file name>

@item 
DBQ=<database file name>
@end itemize

Using the @code{FILEDSN} option you can establish a connection to a data source
described in a .dsn file on Windows, as follows:

@example
> odbc::connect "FILEDSN=test.dsn";
@end example

@noindent

Usually it is also possible to directly connect to a driver and name a
database file as the data source. For instance, using the MS Access ODBC
driver you can connect to a database file test.mdb as follows:

@example
> odbc::connect "DRIVER=Microsoft Access Driver (*.mdb);DBQ=test.mdb";
@end example

@noindent

SQLite (@indicateurl{http://www.sqlite.org}) provides another way to get a database up and
running quickly. For that you need the SQLite library and the SQLite ODBC
driver available at @indicateurl{http://www.ch-werner.de/sqliteodbc}. Then you can open an
SQLite database as follows (the database file is named with the @code{DATABASE}
attribute and is created automatically if it doesn't exist):

@example
> odbc::connect "DRIVER=SQLite3;Database=test.db";
@end example

@noindent

SQLite generally performs very well if you avoid some pitfalls (in particular,
big batches of updates/inserts should be done within a transaction, otherwise
they will take forever). It is certainly good enough for smaller databases and
very easy to set up. Basically, after installing SQLite and its ODBC driver
you're ready to go immediately. This makes it a very convenient alternative if
you don't want to go through the tedium of setting up one of the big hulking
DBMS.

@node Getting Information about a Data Source,Executing SQL Queries,Opening and Closing a Data Source,Top
@anchor{pure-odbc getting-information-about-a-data-source}@anchor{6}
@chapter Getting Information about a Data Source


You can get general information about an open database connection with the
@code{odbc::info} function. This function returns a tuple of strings with the
following items (see the description of the SQLGetInfo() function in the ODBC
API reference for more information):


@itemize -

@item 
DATA_SOURCE_NAME: the data source name

@item 
DATABASE_NAME: the default database

@item 
DBMS_NAME: the host DBMS name

@item 
DBMS_VER: the host DBMS version

@item 
DRIVER_NAME: the name of the ODBC driver

@item 
DRIVER_VER: the version of the ODBC driver

@item 
DRIVER_ODBC_VER: the ODBC version supported by the driver

@item 
ODBC_VER: the ODBC version of the driver manager
@end itemize

E.g., here is what the connection to MySQL shows on my Linux system:

@example
> odbc::info db;
"myodbc","test","MySQL","5.0.18","myodbc3.dll","03.51.12","03.51","03.52"
@end example

@noindent

The odbc module also provides a number of operations to retrieve a bunch of
additional meta information about the given database connection. In
particular, the @code{odbc::getinfo} function provides a direct interface to the
SQLGetInfo() routine. The result of @code{odbc::getinfo} is a pointer which can
be converted to an integer or string value, depending on the type of
information requested. For instance:

@example
> get_short $ odbc::getinfo db odbc::SQL_MAX_TABLES_IN_SELECT;
31

> cstring_dup $ odbc::getinfo db odbc::SQL_IDENTIFIER_QUOTE_CHAR;
"`"
@end example

@noindent

Information about supported SQL data types is available with the
@code{odbc::typeinfo} routine (this returns a lot of data, see odbc.pure for an
explanation):

@example
> odbc::typeinfo db odbc::SQL_ALL_TYPES;
@end example

@noindent

Moreover, information about the tables in the current database, as well as the
structure of the tables and their primary and foreign keys can be retrieved
with the @code{odbc::tables}, @code{odbc::columns}, @code{odbc::primary_keys} and
@code{odbc::foreign_keys} functions:

@example
> odbc::tables db;
[("event","TABLE"),("pet","TABLE")]

> odbc::columns db "pet";
[("name","varchar","NO","'@w{'}"),("owner","varchar","YES",odbc::SQLNULL),
("species","varchar","YES",odbc::SQLNULL),("sex","char","YES",odbc::SQLNULL),
("birth","date","YES",odbc::SQLNULL),("death","date","YES",odbc::SQLNULL)]

> odbc::primary_keys db "pet";
["name"]

> odbc::foreign_keys db "event";
[("name","pet","name")]
@end example

@noindent

This often provides a convenient and portable means to retrieve basic
information about table structures, at least on RDBMS which properly implement
the corresponding ODBC calls. Also note that while this information is also
available through special system catalogs in most databases, the details of
accessing these vary a lot among implementations.

@node Executing SQL Queries,Low-Level Operations,Getting Information about a Data Source,Top
@anchor{pure-odbc executing-sql-queries}@anchor{7}
@chapter Executing SQL Queries


As soon as a database connection has been opened, you can execute SQL queries
on it using the @code{sql} function which executes a query and collects the
results in a list. Note that SQL queries generally come in two different
flavours: queries returning data (so-called @emph{result sets}), and statements
modifying the data (which have as their result the number of affected
rows). The @code{sql} function returns a nonempty list of lists (where the first
list denotes the column titles, and each subsequent list corresponds to a
single row of the result set) in the former, and the row count in the latter
case.

For instance, here is how you can select some entries from a table. (The
following examples assume the sample "menagerie" tables from the MySQL
documentation. The @code{initdb} function in the examples/menagerie.pure script
can be used to create these tables in your default database.)

@example
> odbc::sql db "select name,species from pet where owner='Harold'" [];
[["name","species"],["Fluffy","cat"],["Buffy","dog"]]
@end example

@noindent

Often the third parameter of @code{sql}, as above, is just the empty list,
indicating a parameterless query. Queries involving marked input parameters
can be executed by specifying the parameter values in the third argument of
the @code{sql} call. For instance:

@example
> odbc::sql db "select name,species from pet where owner=?" ["Harold"];
[["name","species"],["Fluffy","cat"],["Buffy","dog"]]
@end example

@noindent

Multiple parameters are specified as a list:

@example
> odbc::sql db "select name,species from pet where owner=? and species=?"
> ["Harold","cat"];
[["name","species"],["Fluffy","cat"]]
@end example

@noindent

Parameterized queries are particularly useful for the purpose of inserting
data into a table:

@example
> odbc::sql db "insert into pet values (?,?,?,?,?,?)"
> ["Puffball","Diane","hamster","f","1999-03-30",odbc::SQLNULL];
1
@end example

@noindent

In this case we could also have hard-coded the data to be inserted right into
the SQL statement, but a parameterized query like the one above can easily be
applied to a whole collection of data rows, e.g., as follows:

@example
> do (odbc::sql db "insert into pet values (?,?,?,?,?,?)") data;
@end example

@noindent

Parameterized queries also let you insert data which cannot be specified
easily inside an SQL query, such as long strings or binary data.

The following SQL types of result and parameter values are recognized and
converted to/from the corresponding Pure types:


@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxx} 
@headitem

SQL value/type

@tab

Pure value/type

@item

SQL NULL (no value)

@tab

@code{odbc::SQLNULL}

@item

integer types (INTEGER and friends)

@tab

@code{int}

@item

64-bit integers

@tab

@code{bigint}

@item

floating point types (REAL, FLOAT and friends)

@tab

@code{double}

@item

binary data (BINARY, BLOB, etc.)

@tab

@code{(size, data)}

@item

character strings (CHAR, VARCHAR, TEXT, etc.)

@tab

@code{string}

@end multitable


Note the special constant (nonfix symbol) @code{odbc::SQLNULL} which is used to
represent SQL NULL values.

Also note that binary data is specified as a pair @code{(size, data)} consisting
of an int or bigint @code{size} which denotes the size of the data in bytes, and
a pointer @code{data} (which must not be a null pointer unless @code{size} is 0 as
well) pointing to the binary data itself.

All other SQL data (including, e.g., TIME, DATE and TIMESTAMP) is represented
in Pure using its character representation, encoded as a Pure string.

Some databases also allow special types of queries (e.g., "batch" queries
consisting of multiple SQL statements) which may return multiple result sets
and/or row counts. The @code{sql} function only returns the first result set,
which is appropriate in most cases. If you need to determine all result sets
returned by a query, the @code{msql} function must be used. This function is
invoked in exactly the same way as the @code{sql} function, but returns a list
with all the result sets and/or row counts of the query.

Example:

@example
> odbc::msql db "select * from pet; select * from event" [];
@end example

@noindent

This will return a list with two result sets, one for each query.

@node Low-Level Operations,Lazy Processing,Executing SQL Queries,Top
@anchor{pure-odbc low-level-operations}@anchor{8}
@chapter Low-Level Operations


The @code{sql} and @code{msql} operations are in fact just ordinary Pure functions
which are implemented in terms of the low-level operations @code{sql_exec},
@code{sql_fetch}, @code{sql_more} and @code{sql_close}. You can also invoke these
functions directly if necessary. The @code{sql_exec} function starts executing a
query and returns either a row count or the column names of the first result
set as a tuple of strings. After that you can use @code{sql_fetch} to obtain the
results in the set one by one. When all rows have been delivered,
@code{sql_fetch} fails. The @code{sql_more} function can then be used to check for
additional result sets. If there are further results, @code{sql_more} returns
either the next row count, or a tuple of column names, after which you can
invoke @code{sql_fetch} again to obtain the data rows in the second set,
etc. When the last result set has been processed, @code{sql_more} fails.

Example:

@example
> odbc::sql_exec db "select name,species from pet where owner='Harold'" [];
["name","species"]
> odbc::sql_fetch db; // get the 1st row
["Fluffy","cat"]
> odbc::sql_fetch db; // get the 2nd row
["Buffy","dog"]
> odbc::sql_fetch db; // no more results
odbc::sql_fetch #<pointer 0x24753e0>
> odbc::sql_more db; // no more result sets
odbc::sql_more #<pointer 0x24753e0>
@end example

@noindent

Moreover, the @code{sql_close} function can be called at any time to terminate an
SQL query, after which subsequent calls to @code{sql_fetch} and @code{sql_more} will
fail:

@example
> odbc::sql_close db; // terminate query
()
@end example

@noindent

This is not strictly necessary (it will be done automatically as soon as the
next SQL query is invoked), but it is useful in order to release all resources
associated with the query, such as parameter values which have to be cached so
that they remain accessible to the SQL server. Since these parameters in some
cases may use a lot of memory it is better to call @code{sql_close} as soon as
you are finished with a query. This is also done automatically by the @code{sql}
and @code{msql} functions.

Also note that only a single query can be in progress per database connection
at any one time. That is, if you invoke @code{sql_exec} to initiate a new query,
a previous query will be terminated automatically. (However, it is possible to
execute multiple queries on the same database simultaneously, if you process
them through different connections to that database.)

The low-level operations are useful when you have to deal with large result
sets where you want to avoid to build the complete list of results in main
memory. Instead, these functions allow you to process the individual elements
immediately as they are delivered by the @code{sql_fetch} function. (An
alternative method which combines the space efficiency of immediate processing
with the convenience of the list representation is discussed in the following
section.) Using the low-level operations you can also build your own
specialized query engines; take the definitions of @code{sql} or @code{msql} as a
start and change them according to your needs.

@node Lazy Processing,Error Handling,Low-Level Operations,Top
@anchor{pure-odbc lazy-processing}@anchor{9}
@chapter Lazy Processing


As an experimental feature, the odbc module also provides two operations
@code{odbc::lsql} and @code{odbc::lmsql} which work like @code{odbc::sql} and
@code{odbc::msql} (see @pxref{7,,Executing SQL Queries} above), but return lazy lists
(streams) instead. This offers the convenience of a list-based representation
without the overhead of keeping entire result sets in memory, which can be
prohibitive when working with large amounts of data.

These functions are invoked just like @code{odbc::sql} and @code{odbc::msql}, but
they return a lazy list of rows (or a lazy list of lazy lists of rows in the
case of @code{lmsql}). For instance:

@example
> odbc::lsql db "select * from pet" [];
["name","owner","species","sex","birth","death"]:#<thunk 0x7ffbb9aa2eb8>
@end example

@noindent

Note that the tail of the result list is "thunked" and will only be produced
on demand, as you traverse the list. As a simple example, suppose that we just
want to print the @code{name} field of each data row:

@example
> using system;
> do (\(name:_)->puts name) $ tail $ odbc::lsql db "select * from pet" [];
Fluffy
Claws
Buffy
Fang
Bowser
Chirpy
Whistler
Slim
()
@end example

@noindent

Here only one row is in memory at any time while the @code{do} function is in
progress. This keeps memory requirements much lower than when using the
@code{odbc::sql} function which first loads the entire result set into memory.
Another advantage is that only those data rows are fetched from the database
which are actually needed in the course of the computation. This can speed up
the processing significantly if only a part of the result set is needed. For
instance, in the following example we only look at the first two data rows
until the desired row is found, so the remaining rows are never fetched from
the database:

@example
> head [row | row@@(name:_) = tail $ odbc::lsql db "select * from pet" [];
>             name == "Claws"];
["Claws","Gwen","cat","m","1994-03-17",odbc::SQLNULL]
@end example

@noindent

On the other hand, @code{lsql}/@code{lmsql} will usually be somewhat slower than
@code{sql}/@code{msql} if the entire result set is being processed. So you should
always consider the time/space tradeoffs when deciding which functions to use
in a given situation.

Also note that when using @code{lsql}/@code{lmsql}, the query remains in progress as
long as the result list is still being processed. (This is different from
@code{sql}/@code{msql} which load the complete result set(s) at once after which the
query is terminated immediately.) Since only one query can be executed per
database connection, this means that only one lazy result set can be processed
per database connection at any time. However, as with the lowlevel operations
it is possible to do several lazy queries simultaneously if you assign them to
different database connections.

@node Error Handling,Caveats and Bugs,Lazy Processing,Top
@anchor{pure-odbc error-handling}@anchor{a}
@chapter Error Handling


When one of the above operations fails because the SQL server reports an
error, an error term of the form @code{odbc::error msg state} will be returned,
which specifies an error message and the corresponding SQL state (i.e., error
code). A detailed explanation of the state codes can be found in the ODBC
documentation. For instance, a reference to a non-existent table will cause a
report like the following:

@example
> odbc::sql db "select * from pets" [];
odbc::error "[TCX][MyODBC]Table 'test.pets' doesn't exist" "S1000"
@end example

@noindent

You can check for such return values and take some appropriate action. By
redefining odbc::error accordingly, you can also have it generate exceptions
or print an error message. For instance:

@example
odbc::error msg state = fprintf stderr "%s (%s)\n" (msg,state) $$ ();
@end example

@noindent

@cartouche
@quotation Note 
When redefining @code{odbc::error} in this manner, you should be aware
that the return value of @code{odbc::error} is what will be returned by the
other operations of this module in case of an error condition. These return
values are checked by other functions such as @code{sql}. Thus the return
value should still indicate that an error has happened, and not be
something that might be interpreted as a legal return value, such as an
integer or a nonempty tuple. It is usually safe to have @code{odbc::error}
return an empty tuple or throw an exception, but other types of return
values should be avoided.
@end quotation
@end cartouche

@node Caveats and Bugs,Further Information and Examples,Error Handling,Top
@anchor{pure-odbc caveats-and-bugs}@anchor{b}
@chapter Caveats and Bugs


Be warned that multiple result sets are not supported by all databases. I also
found that some ODBC drivers do not properly implement this feature, even
though the database supports it. So you better stay away from this if you want
your application to be portable. You can easily implement batched queries
using a sequence of single queries instead.

Note that since the exact numeric SQL data types (NUMERIC, DECIMAL) are mapped
to Pure double values (which are double precision floating point numbers),
there might be a loss of precision in extreme cases. If this is a problem you
should explicitly convert these values to strings in your query, which can be
done using the SQL CAST function, as in @code{select cast(1234.56 as char)}.

@node Further Information and Examples,Module Index,Caveats and Bugs,Top
@anchor{pure-odbc further-information-and-examples}@anchor{c}
@chapter Further Information and Examples


For further details about the operations provided by this module please see
the odbc.pure file. A sample script illustrating the usage of the module can
be found in the examples directory.

@node Module Index,Index,Further Information and Examples,Top
@unnumbered Module Index


@menu
* odbc: 0. 
@end menu


@node Index,,Module Index,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

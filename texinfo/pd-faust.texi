\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pd-faust.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle pd-faust
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pd-faust: (pd-faust.info). pd-faust
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.64, April 25, 2016

Albert Gräf (Editor)

Copyright @copyright{} 2009-2016, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title pd-faust
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pd-faust
@insertcopying
@end ifnottex

@c %**start of body
@anchor{pd-faust doc}@anchor{0}
Version 0.10, April 25, 2016

Albert Graef <@email{aggraef@@gmail.com}>

pd-faust is a dynamic environment for running Faust dsps in Pd. It is based on
the author's @code{faust2pd} script, but offers many small
improvements and some major additional features:


@itemize *

@item 
Faust dsps are implemented using two Pd objects, @code{fsynth~} and @code{fdsp~},
which provide the necessary infrastructure to run Faust synthesizer and
effect units in Pd, respectively. As of pd-faust 0.10, there's also a
@code{faust~} convenience object which unifies @code{fsynth~} and @code{fdsp~} and
provides reasonable defaults for most creation arguments.

@item 
In contrast to faust2pd, the Pd GUI of Faust units is generated dynamically,
inside Pd. While pd-faust supports the same global GUI layout options as
faust2pd, it also provides various options to adjust the layout of
individual control items.

@item 
pd-faust recognizes the @code{midi} and @code{osc} controller attributes in the
Faust source and automatically provides corresponding MIDI and OSC
controller mappings. OSC-based controller automation is also available.

@item 
Perhaps most importantly, Faust dsps can be reloaded at any time (even while
the Pd patch is running), in which case the GUI and the controller mappings
are regenerated automatically and on the fly as needed.
@end itemize

@menu
* Copying:: 
* Installation:: 
* Usage:: 
* Caveats and Bugs:: 
* Index:: 

@end menu

@node Copying,Installation,Top,Top
@anchor{pd-faust faust2pd}@anchor{1}@anchor{pd-faust pd-faust}@anchor{2}@anchor{pd-faust copying}@anchor{3}
@chapter Copying


Copyright (c) 2011-2016 by Albert Graef

pd-faust is distributed under the GNU LGPL v3+. Please see the included
COPYING and COPYING.LESSER files for details.

This package also includes the faust-stk instruments which are distributed
under an MIT-style license, please check the examples/dsp/README-STK file
and the dsp files for authorship information and licensing details pertaining
to these. The original faust-stk sources can be found in the Faust
distribution, cf. @indicateurl{http://faust.grame.fr/}.

@node Installation,Usage,Copying,Top
@anchor{pd-faust installation}@anchor{4}
@chapter Installation


You'll need Faust@footnote{http://faust.grame.fr/} and Pd@footnote{http://puredata.info/}, obviously. Fairly recent versions of these are
required. Faust versions >= 0.9.46 and 2.0.a3 and Pd version >= 0.43.1 have
been tested and are known to work.

The pd-faust objects are written in the Pure@footnote{http://purelang.bitbucket.org/} programming language, so you'll
also need an installation of the Pure interpreter (0.51 or later), along with
the following packages (minimum required versions are given in parentheses):
@code{pd-pure} (0.15), @code{pure-faust} (0.8),
@code{pure-midi} (0.5) and @code{pure-stldict} (0.3).

Finally, gcc and GNU make (or compatible) are required to compile the helper
dsps and the example instruments; please check the Makefile for details.

For a basic installation run @code{make}, then @code{sudo make install}. This will
install the pd-faust objects in your lib/pd/extra/faust folder as a Pd object
library which can be loaded with Pd's @code{-lib} option. To complete the
installation, you still have to make sure that the library is loaded
automatically at startup. This is done most conveniently by adding
@code{faust/pdfaust} to your preloaded library modules in Pd's
@code{Preferences/Startup} dialog.

@cartouche
@quotation Note 
The @code{faust/pdfaust} module must come @emph{after} the @code{pure} entry
which loads pd-pure, otherwise you'll get an error message. In any case the
pd-pure loader will be required to run these objects, so it should be
configured accordingly; please check the @code{pd-pure}
documentation for details.
@end quotation
@end cartouche

The @code{make} command also compiles the Faust dsps included in the
distribution, so that the provided examples will be ready to run afterwards
well (see @pxref{5,,Examples} below).

The Makefile tries to guess the installation prefix under which Pd is
installed. If it guesses wrong, you can tell it the right prefix with @code{make
prefix=/some/path}. Or you can specify the exact path of the lib/pd directory
with @code{make pdlibdir=/some/path}; by default the Makefile assumes
@code{$(prefix)/lib/pd}.

It is also possible to specify an alternative flavour of Pd when building and
installing the module, by adding a definition like @code{PD=pd-extended} to the
@code{make} command line. This is known to work with pd-extended@footnote{http://puredata.info/downloads/pd-extended} and pd-l2ork@footnote{http://l2ork.music.vt.edu/main/?page_id=56},
two popular alternative Pd distributions available on the web.

Some further build options are described in the Makefile. In particular, it is
possible to compile the Faust dsps to LLVM bitcode which can be loaded
directly by the Pure interpreter, but for that you'll need a special Faust
version (see the Faust2@footnote{https://bitbucket.org/purelang/pure-lang/wiki/Faust2} website for how to get this version up and running)
and an LLVM-capable C/C++ compiler such as clang or gcc with the dragonegg
plugin (please check the Makefile and the LLVM@footnote{http://llvm.org/} website for details).

If you have the required tools then you can build the bitcode modules by
running @code{make bitcode} after @code{make}. If you run @code{make install}
afterwards, the bitcode modules will be installed along with the "normal"
Faust plugins. In addition, a second object library called @code{pdfaust2} will
be built and installed, which can be used as a drop-in replacement for
@code{pdfaust} and lets you run the bitcode modules. (Note that in the present
implementation it is not possible to load both @code{pdfaust} and @code{pdfaust2} in
Pd, you'll have to pick one or the other.)

@node Usage,Caveats and Bugs,Installation,Top
@anchor{pd-faust usage}@anchor{6}
@chapter Usage


Working with pd-faust basically involves adding a bunch of @code{faust~} (or the
underlying @code{fsynth~} and @code{fdsp~}) objects to a Pd patch along with the
corresponding GUI subpatches, and wiring up the Faust units in some variation
of a synth-effects chain which typically takes input from Pd's MIDI interface
(@code{notein}, @code{ctlin}, etc.) and outputs the signals produced by the Faust
units to Pd's audio interface (@code{dac~}).

For convenience, pd-faust also includes the @code{midiseq} and @code{oscseq} objects
and a corresponding @code{midiosc} abstraction which can be used to handle MIDI
input and playback as well as OSC controller automation. This useful helper
abstraction is described in more detail under @pxref{7,,Operating the Patches} below.

@cartouche
@quotation Note 
pd-faust interprets MIDI, OSC and Faust dsp filenames relative to
the hosting Pd patch by default. It will also search the @code{midi}, @code{osc}
and @code{dsp} subfolders, if they exist, for the corresponding types of
files. Failing that, it finally searches the directories on the Pd library
path (including their @code{midi}, @code{osc} and @code{dsp} subfolders). To disable
this search, just use absolute pathnames (or pathnames relative to the
@code{.} or @code{..} directory) instead.
@end quotation
@end cartouche

@menu
* The fdsp~ and fsynth~ Objects:: 
* The faust~ Object:: 
* GUI Subpatches:: 
* Examples:: 
* Operating the Patches:: 
* External MIDI and OSC Controllers:: 
* Tweaking the GUI Layout:: 
* Remote Control:: 

@end menu

@node The fdsp~ and fsynth~ Objects,The faust~ Object,,Usage
@anchor{pd-faust the-fdsp-and-fsynth-objects}@anchor{8}
@section The fdsp~ and fsynth~ Objects


The @code{fdsp~} object is invoked as follows:

@example
fdsp~ dspname instname channel
@end example

@noindent


@itemize *

@item 
@code{dspname} denotes the name of the Faust dsp (usually this is just the name
of the .dsp file with the extension stripped off). Please note that the
Faust dsp must be provided in a form which can be loaded in @emph{Pure} (not
Pd!), so the @code{pure.cpp} architecture (included in the Faust distribution)
must be used to compile the dsp to a shared library. (If you're already
running Faust2@footnote{https://bitbucket.org/purelang/pure-lang/wiki/Faust2}, you can also compile to an LLVM bitcode file instead; Pure
has built-in support for loading these.) There's a GNU Makefile in the
examples/dsp subdirectory which shows how to do this. This Makefile is
self-contained, so you can just drop it into any directory with Faust dsp
sources and run @code{make} there to compile the modules to a format which is
ready to be loaded with pd-faust.

@item 
@code{instname} denotes the name of the instance of the Faust unit. Multiple
instances of the same Faust dsp can be used in a Pd patch, which must all
have different instance names. In addition, the instance name is also used
to identify the GUI subpatch of the unit (see below) and to generate unique
OSC addresses for the unit's control elements.

@item 
@code{channel} is the number of the MIDI channel the unit responds to. This can
be 1..16, or 0 to specify "omni" operation (listen to MIDI messages on all
channels).
@end itemize

@cartouche
@quotation Note 
Since the @code{fdsp~} and @code{fsynth~} objects are written in Pure,
their creation arguments should be specified in Pure syntax. In particular,
both @code{dspname} or @code{instname} may either be Pure identifiers or
double-quoted strings (the former will automatically be translated to the
latter). Similarly, the @code{channel} argument (as well as the @code{numvoices}
argument of the @code{fsynth~} object, see below) must be an integer constant
in Pure syntax, which is pretty much like Pd syntax but also allows the
integer to be specified in hexadecimal, octal or binary.
@end quotation
@end cartouche

The @code{fdsp~} object requires a Faust dsp which can work as an effect unit,
processing audio input and producing audio output. The unit can have as many
audio input and output channels as you like (including zero).

The @code{fsynth~} object works in a similar fashion, but has an additional
creation argument specifying the desired number of voices:

@example
fsynth~ dspname instname channel numvoices
@end example

@noindent

The @code{fsynth~} object requires a Faust dsp which can work as a monophonic
synthesizer. This typically means that the unit has zero audio inputs and a
nonzero number of audio outputs, although it is possible to have synths
processing any number of audio input channels as well. (You can even have
synths producing zero audio outputs, but this is generally not very useful.)
In addition, pd-faust assumes that the Faust unit provides three so-called
"voice controls" which indicate which note to play:


@itemize *

@item 
@code{freq} is the fundamental frequency of the note in Hz.

@item 
@code{gain} is the velocity of the note, as a normalized value between 0 and 1.
This usually controls the volume of the output signal.

@item 
@code{gate} indicates whether a note is currently playing. This value is either
0 (no note to play) or 1 (play a note), and usually triggers the envelop
function (ADSR or similar).
@end itemize

pd-faust doesn't care at which path inside the Faust dsp these controls are
located, but they must all be there, and the basenames of the controls must be
unique throughout the entire dsp. Otherwise the synth will not work as
expected.

Like @code{faust2pd}, pd-faust implements the necessary logic to
drive the given number of voices of an @code{fsynth~} object. That is, it will
actually create a separate instance of the Faust dsp for each voice and handle
polyphony by allocating voices from this pool in a round-robin fashion,
performing the usual voice stealing if the number of simultaneous notes to
play exceeds the number of voices. Also note that an @code{fsynth~} operated in
omni mode (@code{channel = 0}) automatically filters out messages on channel 10
which is reserved for percussion in the General MIDI standard.

The @code{fdsp~} and @code{fsynth~} objects respond to the following messages:


@itemize *

@item 
@code{bang} outputs the current control settings on the control outlet in OSC
format.

@item 
@code{write} outputs the current control settings to external MIDI and/or OSC
devices. This message can also be invoked with a numeric argument to toggle
the "write mode" of the unit; please see @pxref{9,,External MIDI and OSC Controllers} below for details.

@item 
@code{reload} reloads the Faust unit. This also reloads the shared library or
bitcode file if the unit was recompiled since the object was last loaded.
(Instead of feeding a @code{reload} message to the control inlet of a Faust
unit, you can also just send a @code{bang} to the @code{reload} receiver.)

@item 
@code{addr value} changes the control indicated by the OSC address @code{addr}.
This is also used internally for communication with the Pd GUI and for
controller automation.
@end itemize

In addition, the @code{fdsp~} and @code{fsynth~} objects respond to MIDI controller
messages of the form @code{ctl val num chan}, and the @code{fsynth~} object also
understands note-related messages of the form @code{note num vel chan} (note
on/off) and @code{bend val chan} (pitch bend). In either case, pd-faust provides
the necessary logic to map controller and note-related messages to the
corresponding control changes in the Faust unit.

@cartouche
@quotation Note 
Like pd-pure, pd-faust also remaps Pd's @code{menu-open} command so
that it lets you edit the Faust source of an @code{fdsp~} or @code{fsynth~}
object by right-clicking on the object and choosing @code{Open} from the
context menu.
@end quotation
@end cartouche

@node The faust~ Object,GUI Subpatches,The fdsp~ and fsynth~ Objects,Usage
@anchor{pd-faust the-faust-object}@anchor{a}
@section The faust~ Object


Starting with version 0.10, pd-faust includes the @code{faust~} external as a
convenience which provides the functionality of both @code{fdsp~} and @code{fsynth~}
in a single object. This object also supplies reasonable defaults for most
arguments. While the underlying @code{fdsp~} and @code{fsynth~} objects are still
available for backward compatibility, the @code{faust~} object is often much
easier to use and should be considered the preferred way to create Faust
objects in a Pd patch now.

The @code{faust~} object is invoked as follows:

@example
fsynth~ dspname [instname] [channel] [numvoices]
@end example

@noindent

As indicated, all creation arguments except the first, @code{dspname} argument
are optional. The meaning of these arguments is the same as with the @code{fdsp~}
and @code{fsynth~} objects. A @code{numvoices} value of zero can be used to indicate
an effect unit. If the @code{numvoices} argument is omitted, the @code{faust~}
object checks the meta data of the Faust module to see whether the loaded
Faust module is an effect or a synth and creates an instance of the
corresponding underlying object (@code{fdsp~} or @code{fsynth~}).

Note that if only a single number follows the @code{dspname} or @code{instname}
argument then it is always interpreted as a channel number; thus, if you want
to denote the @code{numvoices} argument then you'll have to specify @emph{both}
@code{channel} and @code{numvoices}, in that order.

By default, the instance name is assumed to be the same as the dsp name, the
default MIDI channel is 0 (omni), and the number of voices of an instrument is
determined using the value of the @code{nvoices} meta key declared in the dsp
source. Thus, to turn a Faust dsp into a synth with 8 voices you can use a
declaration like the following anywhere in the Faust program:

@example
declare nvoices "8";
@end example

@noindent

The format of this declaration is the same as for the faust-lv2@footnote{https://bitbucket.org/agraef/faust-lv2} and
faust-vst@footnote{https://bitbucket.org/agraef/faust-vst} plugin architectures.

If the @code{nvoices} declaration isn't present, the dsp is considered to be an
effect unit by default. All default choices can be overridden by explicitly
specifying the corresponding creation argument. In particular, you can specify
the number of synth voices (overriding the @code{nvoices} key in the dsp source),
or use a @code{numvoices} value of zero to force a synth to be loaded as an
ordinary effect unit. Also, if there are multiple instances of the same dsp in
a patch then you can explicitly specify different instance names using the
@code{instname} argument, and the default @code{channel} value of zero (denoting
omni input) can be overridden as needed if the unit should only listen on a
specific MIDI channel.

@node GUI Subpatches,Examples,The faust~ Object,Usage
@anchor{pd-faust gui-subpatches}@anchor{b}
@section GUI Subpatches


For each @code{faust~}, @code{fdsp~} and @code{fsynth~} object, the Pd patch may
contain an (initially empty) "one-off" graph-on-parent subpatch with the same
name as the instance name of the Faust unit:

@example
pd instname
@end example

@noindent

You shouldn't insert anything into this subpatch, its contents (a bunch of Pd
GUI elements corresponding to the control elements of the Faust unit) will be
generated automatically by pd-faust when the corresponding @code{faust~},
@code{fdsp~} or @code{fsynth~} object is created, and whenever the unit gets
reloaded at runtime.

As with faust2pd, the default appearance of the GUI can be adjusted in various
ways; see @pxref{c,,Tweaking the GUI Layout} below for details.

The relative order in which you insert a @code{faust~}, @code{fdsp~} or @code{fsynth~}
object and its GUI subpatch into the main patch matters. Normally, the GUI
subpatch should be inserted @emph{first}, so that it will be updated automatically
when its associated Faust unit is first created, and also when the main patch
is saved and then reloaded later.

However, in some situations it may be preferable to insert the GUI subpatch
@emph{after} its associated Faust unit. If you do this, the GUI will @emph{not} be
updated automatically when the main patch is loaded, so you'll have to reload
the dsp manually (sending it a @code{reload} message) to force an update of the
GUI subpatch. This is useful, in particular, if you'd like to edit the GUI
patch manually after it has been generated.

In some cases it may even be desirable to completely "lock down" the GUI
subpatch. This can be done by simply @emph{renaming} the GUI subpatch after it has
been generated. When Pd saves the main patch, it saves the current status of
the GUI subpatches along with it, so that the renamed subpatch will remain
static and will @emph{never} be updated, even if its associated Faust unit gets
reloaded. This generally makes sense only if the control interface of the
Faust unit isn't changed after locking down its GUI patch. To "unlock" a GUI
subpatch, you just rename it back to its original name. (In this case you
might also want to reinsert the corresponding Faust unit afterwards, if you
want to have the GUI generated automatically without an explicit @code{reload}
again.)

@node Examples,Operating the Patches,GUI Subpatches,Usage
@anchor{pd-faust examples}@anchor{5}
@section Examples


The examples folder contains a few example patches which illustrate how this
all works. Having installed pd-faust as described above, you can run these
from the examples directory, e.g.: @code{pd test.pd}. (You can also run the
examples without actually installing pd-faust if you invoke Pd from the main
pd-faust source directory, e.g., as follows: @code{pd -lib lib/pdfaust
examples/test.pd}.)

Here are some of the examples that are currently available:


@itemize *

@item 
test.pd: Simple patch running a single Faust instrument.

@item 
synth.pd: Slightly more elaborate patch featuring a synth-effects chain.

@item 
bouree.pd: Full-featured example running various instruments.
@end itemize

For your convenience, related MIDI and OSC files as well as the Faust sources
of the instruments and effects are contained in corresponding subdirectories
(midi, osc, dsp) of the examples directory. A slightly modified version of
the faust-stk instruments from the Faust distribution is also included, please
check the examples/dsp/README-STK file for more information about these.

The MIDI files are all in standard MIDI file format. (Some of these come from
the faust-stk distribution, others can be found on the web.) The OSC files
used by pd-faust for controller automation are plain ASCII files suitable for
hand-editing if you know what you are doing; the format should be fairly
self-explanatory.

@node Operating the Patches,External MIDI and OSC Controllers,Examples,Usage
@anchor{pd-faust operating-the-patches}@anchor{7}
@section Operating the Patches


The generated Pd GUI elements for the Faust dsps are pretty much the same as
with @code{faust2pd} (which see). The only obvious change is the
addition of a "record" button (gray toggle in the upper right corner) which
enables recording of OSC automation data.

In each example distributed with pd-faust you can also find an instance of the
@code{midiosc} abstraction which serves as a little sequencer applet that enables
you to control MIDI playback and OSC recording. The usage of this abstraction
should be fairly obvious, but you can also find a brief description below.

@cartouche
@quotation Note 
If you use the @code{midiosc} abstraction in your own patches, you
should copy it to the directory containing your patch and other required
files, so that MIDI and OSC files are properly located. Alternatively, you
can also set up Pd's search path as described at the beginning of the
@pxref{6,,Usage} section.
@end quotation
@end cartouche

The first creation argument of @code{midiosc} is the name of the MIDI file,
either as a Pure identifier (in this case the .mid filename extension is
supplied automatically) or as a double-quoted string. Similarly, the second
argument specifies the name of the OSC file. Both arguments are optional; if
the second argument is omitted, it defaults to the name of the MIDI file with
new extension .osc. You can also omit both arguments if neither MIDI file
playback nor saving recorded OSC data is required. Or you can leave the first
parameter empty (specify @code{""} or @code{0} instead) to only set an OSC filename,
if you don't need MIDI playback. The latter is useful, in particular, if you
use @code{midiosc} with an external MIDI sequencer (see below).

The abstraction has a single control outlet through which it feeds the
generated MIDI and other messages to the connected @code{fsynth~} and @code{fdsp~}
objects. Live MIDI input is also accepted and forwarded to the control outlet,
after being translated to the format understood by @code{fsynth~} and @code{fdsp~}
objects. In addition, @code{midiosc} can also be controlled through an external
MIDI sequencer connected to Pd's MIDI input. To these ends, MIDI Machine Control@footnote{http://en.wikipedia.org/wiki/MIDI_Machine_Control} (MMC) can be used to start and stop OSC playback and recording with
the transport controls of the external sequencer program. To make this work,
the external sequencer must be configured as an MMC master.

At the bottom of the abstraction there is a little progress bar along with a
time display which indicates the current song position. If playback is
stopped, you can also use these to change the current position for playback,
recording and a number of other operations as described below. Note that if
you drive @code{midiosc} from an external MIDI sequencer instead, then it is a
good idea to load the same MIDI file in @code{midiosc} anyway, so that it knows
about the length of the MIDI sequence. This will make the progress bar
display the proper position in the file.

Here is a brief rundown of the available controls:


@itemize *

@item 
The @code{start}, @code{stop} and @code{cont} controls in the @emph{first} row of control
elements start, stop and continue MIDI and OSC playback, respectively. The
@code{midi} toggle in this row causes played MIDI events to be printed in the
Pd main window.

@item 
The gray "record" toggle in the upper right corner of the abstraction
enables recording of OSC controller automation data. Note that this toggle
merely @emph{arms} the OSC recorder; you still have to actually start the
recording with the @code{start} button. However, you can also first start
playback with @code{start} and then switch recording on and off as needed at
any point in the sequence (this is also known as "punch in/out" recording).
In either case, pushing the @code{stop} button stores the recorded sequence for
later playback. Also note that before you can start recording any OSC data,
you first have to arm the Faust units that you want to record. This is done
with the "record" toggle in the Pd GUI of each unit.

@item 
The "bang" button next to the "record" toggle lets you record a static
snapshot of the current parameter settings of all armed units. This is also
done automatically when starting a fresh recording. The "bang" button lets
you change the starting defaults of parameters of an existing recording. It
is also useful if you just want to record a static snapshot of the current
parameter settings without recording any live parameter changes. Moreover,
you can also set the parameters at any given point in the piece if you first
position the progress bar or the time display accordingly; in this case you
may first want to recall the parameter settings at the given point with the
@code{send} button described below. In either case, recording must be enabled
and playback must be @emph{off}. Then just arm the Faust units that you wish to
record, set the playback position as needed, change the controls to what you
want their values to be (maybe after recalling the current settings), and
finally push the "bang" button.

@item 
There are some additional controls related to OSC recording in the @emph{second}
row: @code{save} saves the currently recorded data in an OSC file for later
use; @code{abort} is like @code{stop} in that it stops recording and playback, but
also throws away the data recorded in this take (rather than keeping it for
later playback); and @code{clear} purges the entire recorded OSC sequence so
that you can start a new one.

@item 
Once some automation data has been recorded, it will be played back along
with the MIDI file. You can then just listen to it, or go on to record more
automation data as needed. Use the @code{osc} toggle in the second row to
print the OSC messages as they are played back. If you save the automation
data with the @code{save} button, it will be reloaded from its OSC file next
time the patch is opened.

@item 
The controls in the @emph{third} row provide some additional ways to configure
the playback process. The @code{loop} button can be used to enable looping,
which repeats the playback of the MIDI (and OSC) sequence ad infinitum. The
@code{thru} button, when switched on, routes the MIDI data during playback
through Pd's MIDI output so that it can be used to drive an external MIDI
device in addition to the Faust instruments. The @code{write} button does the
same with MIDI and OSC controller data generated either through automation
data or by manually operating the control elements in the Pd GUI, see
@pxref{9,,External MIDI and OSC Controllers} below for details.

@item 
There's one additional button in the third row, the @code{send} button which
recalls the recorded OSC parameter settings at a given point in the
sequence. Playback must be off for this to work. After setting the playback
position as desired, just push the @code{send} button. This sets the controls
to the current parameter values at the given point, for @emph{all} parameters
which have been recorded up to (and including) this point.
@end itemize

Please note that @code{midiosc} is merely a prototypical implementation which
should cover most common uses. It can also be used as a starting point for
your own abstractions if you need more elaborate input/output interfacing than
what @code{midiosc} provides. On the other hand, for simple uses your patches may
just feed control messages directly into @code{faust~}, @code{fdsp~} and @code{fsynth~}
objects instead. If you just need plain MIDI input, another possibility is to
use the @code{midi-input} abstraction contained in the author's pd-lv2plugin@footnote{https://bitbucket.org/agraef/pd-lv2plugin}
package which encodes incoming MIDI messages in a format compatible with the
@code{faust~}, @code{fdsp~} and @code{fsynth~} objects.

@node External MIDI and OSC Controllers,Tweaking the GUI Layout,Operating the Patches,Usage
@anchor{pd-faust external-midi-and-osc-controllers}@anchor{9}@anchor{pd-faust pd-lv2plugin}@anchor{d}
@section External MIDI and OSC Controllers


The @code{fsynth~} object has built-in (and hard-wired) support for MIDI notes,
pitch bend and MIDI controller 123 (all notes off). Other controller data
received from external MIDI and OSC devices is interpreted according to the
controller mappings defined in the Faust source (this is explained below), by
updating the corresponding GUI elements and the control variables of the Faust
dsp. For obvious reasons, this only works with @emph{active} Faust controls.

A @code{faust~}, @code{fdsp~} or @code{fsynth~} object can also be put in @emph{write mode}
by feeding a message of the form @code{write 1} into its control inlet (the
@code{write 0} message disables write mode again). For convenience, the @code{write}
toggle in the @code{midiosc} abstraction allows you to do this simultaneously for
all Faust units connected to @code{midiosc}'s control outlet.

When an object is in write mode, it also @emph{outputs} MIDI and OSC controller
data in response to both automation data and the manual operation of the Pd
GUI elements, again according to the controller mappings defined in the Faust
source, so that it can drive an external device such as a MIDI fader box or a
multitouch OSC controller. Note that this works with both @emph{active} and
@emph{passive} Faust controls.

To configure MIDI controller assignments, the labels of the Faust control
elements have to be marked up with the special @code{midi} attribute in the Faust
source. For instance, a pan control (MIDI controller 10) may be implemented in
the Faust source as follows:

@example
pan = hslider("pan [midi:ctrl 10]", 0, -1, 1, 0.01);
@end example

@noindent

pd-faust will then provide the necessary logic to handle MIDI input from
controller 10 by changing the pan control in the Faust unit accordingly,
mapping the controller values 0..127 to the range and step size given in the
Faust source. Moreover, in write mode corresponding MIDI controller data will
be generated and sent to Pd's MIDI output, on the MIDI channel specified in
the creation arguments of the Faust unit (0 meaning "omni", i.e., output on
all MIDI channels).

The same functionality is also available for external OSC devices, employing
explicit OSC controller assignments in the Faust source by means of the
@code{osc} attribute. E.g., the following enables input and output of OSC
messages for the OSC @code{/pan} address:

@example
pan = hslider("pan [osc:/pan]", 0, -1, 1, 0.01);
@end example

@noindent

@cartouche
@quotation Note 
In contrast to some other architectures included in the Faust
distribution, at present pd-faust only allows literal OSC addresses (no
glob-style patterns), and there is no way to specify an OSC value range (so
the value ranges of the controls of an external OSC device must match the
ranges of the corresponding controls in the Faust program).
@end quotation
@end cartouche

To actually connect with external OSC devices, you will also need some OSC
input and output facilities. Neither vanilla Pd nor pd-faust includes any of
these, so you will have to rely on 3rd party externals for that. We recommend
Martin Peach's OSC externals@footnote{http://puredata.info/Members/martinrp/OSCobjects} which are included in Hans-Christoph Steiner's
Pd-extended@footnote{http://puredata.info/downloads/pd-extended} distribution. pd-faust includes a version of the @code{midiosc}
abstraction named @code{midiosc-mrpeach} which can be used as a drop-in
replacement for @code{midiosc} and implements OSC input and output using Martin
Peach's objects. You most likely have to edit this abstraction to make it work
for your local network setup; at least you'll probably have to change the
network addresses in the abstraction so that it works with the OSC device or
application that you use.

Another useful abstraction is the @code{oscbrowser} object available in the
author's separate pd-mdnsbrowser@footnote{https://bitbucket.org/agraef/pd-mdnsbrowser} package. It lets you discover and publish
Zeroconf (Avahi/Bonjour) services in the local network, so that your Pd
patches can establish OSC connections in an automatic fashion.

@node Tweaking the GUI Layout,Remote Control,External MIDI and OSC Controllers,Usage
@anchor{pd-faust pd-mdnsbrowser}@anchor{e}@anchor{pd-faust tweaking-the-gui-layout}@anchor{c}
@section Tweaking the GUI Layout


As already mentioned, pd-faust provides the same global GUI layout options as
@code{faust2pd}. Please check the faust2pd documentation for details.
There are a few minor changes in the meaning of some of the options, though,
which we consider notable improvements after some experience working with
faust2pd. Here is a brief rundown of the available options, as they are
implemented in pd-faust:


@itemize *

@item 
@code{width=wd}, @code{height=ht}: Specify the maximum horizontal and/or vertical
dimensions of the layout area. If one or both of these values are nonzero,
pd-faust will try to make the GUI fit within this area.

@item 
@code{font-size=sz}: Specify the font size (default is 10).

@item 
@code{fake-buttons}: Render @code{button} controls as Pd toggles rather than
bangs.

@item 
@code{radio-sliders=max}: Render sliders with up to @code{max} different values as
Pd radio controls rather than Pd sliders. Note that in pd-faust this option
not only applies to sliders, but also to numeric entries, i.e., @code{nentry}
in the Faust source. However, as with faust2pd's @code{radio-sliders} option,
the option is only applicable if the control is zero-based and has a
stepsize of 1.

@item 
@code{slider-nums}: Add a number box to each slider control. Note that in
pd-faust this is actually the default, which can be disabled with the
@code{no-slider-nums} option.

@item 
@code{exclude=pat,...}: Exclude the controls whose labels match the given glob
patterns from the Pd GUI.
@end itemize

In pd-faust there is no way to specify the above options on the command line,
so you'll have to put them as @code{pd} attributes on the @emph{main} group of your
Faust program, as described in the faust2pd documentation. For instance:

@example
process = vgroup("[pd:no-slider-nums][pd:font-size=12]", ...);
@end example

@noindent

In addition, the following options can be used to change the appearance of
individual control items. If present, these options override the corresponding
defaults. Each option can also be prefixed with "@code{no-}" to negate the
option value. (Thus, e.g., @code{no-hidden} makes items visible which would
otherwise, by means of the global @code{exclude} option, be removed from the
GUI.)


@itemize *

@item 
@code{hidden}: Hides the corresponding control in the Pd GUI. This is the only
option which can also be used for group controls, in which case @emph{all}
controls in the group will become invisible in the Pd GUI.

@item 
@code{fake-button}, @code{radio-slider}, @code{slider-num}: These have the same
meaning as the corresponding global options, but apply to individual control
items.
@end itemize

Again, these options are specified with the @code{pd} attribute in the label of
the corresponding Faust control. For instance, the following Faust code hides
the controls in the @code{aux} group, removes the number entry from the @code{pan}
control, and renders the @code{preset} item as a Pd radio control:

@example
aux = vgroup("aux [pd:hidden]", aux_part);
pan = hslider("pan [pd:no-slider-num]", 0, -1, 1, 0.01);
preset = nentry("preset [pd:radio-slider]", 0, 0, 7, 1);
@end example

@noindent

@node Remote Control,,Tweaking the GUI Layout,Usage
@anchor{pd-faust remote-control}@anchor{f}
@section Remote Control


Also included in the sources is a helper abstraction faust-remote.pd and an
accompanying elisp program faust-remote.el. These work pretty much like
pure-remote.pd and pure-remote.el in the @code{pd-pure} distribution,
but are tailored for the remote control of Faust dsps in a Pd patch. In
particular, they enable you to quickly reload the Faust dsps in Pd using a
simple keyboard command (@code{C-C C-X} by default) from Emacs. The
faust-remote.el program was designed to be used with Juan Romero's Emacs
Faust mode@footnote{https://github.com/rukano/emacs-faust-mode}; please see etc/faust-remote.el in the pd-faust source for usage
instructions.

@node Caveats and Bugs,Index,Usage,Top
@anchor{pd-faust faust-mode}@anchor{10}@anchor{pd-faust caveats-and-bugs}@anchor{11}
@chapter Caveats and Bugs


Some parts of this software might still be experimental, under construction
and/or bug-ridden. Bug reports, patches and suggestions are welcome. Please
send these directly to the author, or post them either to the Faust or the
Pure mailing list.

In particular, please note the following known limitations in the current
implementation:


@itemize *

@item 
Passive Faust controls are only supported in @code{fdsp~} objects.

@item 
The names of the voice controls in the @code{fsynth~} object (@code{freq},
@code{gain}, @code{gate}) are currently hard-coded, as are the names of the
@code{midi}, @code{osc} and @code{dsp} subfolders used to locate various kinds of
files.

@item 
Polyphonic aftertouch and channel pressure messages are not supported in the
MIDI interface right now, so you'll have to use ordinary MIDI controllers
for these parameters instead. Coarse/fine pairs of MIDI controllers aren't
directly supported either, so you'll have to implement these yourself as two
separate Faust controls.

@item 
There's no translation of OSC values. pd-faust thus always assumes that the
controls of an external OSC device have the ranges specified in the Faust
program. If this isn't the case then you'll have to adjust either the OSC
controller setup or the control ranges in the Faust program, or use an
external tool like OSCulator@footnote{http://www.osculator.net/} to translate the messages.
@end itemize

Also, please check the TODO file included in the distribution for other issues
which we are already aware of and which will hopefully be addressed in future
pd-faust versions.

@node Index,,Caveats and Bugs,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-stlvec.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle pure-stlvec
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-stlvec: (pure-stlvec.info). pure-stlvec
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.59, February 03, 2014

Albert Gräf (Editor)

Copyright @copyright{} 2009-2014, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title pure-stlvec
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-stlvec
@insertcopying
@end ifnottex

@c %**start of body
@anchor{pure-stlvec doc}@anchor{2}
@geindex stlvec (module)
@anchor{pure-stlvec module-stlvec algorithms}@anchor{1}
@geindex stlvec;;algorithms (module)

Version 0.4, January 28, 2014


@display
Peter Summerland <@email{p.summerland@@gmail.com}>@w{ }
@end display



Pure's interface to C++ vectors, specialized to hold pointers to arbitrary
Pure expressions, and the C++ Standard Template Library algorithms that act on
them.


@menu
* Copying:: 
* Installation:: 
* Overview:: 
* Error Handling:: 
* Operations Included in the stlvec Module:: 
* STL Nonmodifying Algorithms:: 
* STL Modifying Algorithms:: 
* STL Sort Algorithms:: 
* STL Merge Algorithms:: 
* STL Heap Algorithms:: 
* Min/Max STL Algorithms:: 
* STL Numeric Algorithms:: 
* Reference Counting:: 
* Backward Compatibilty:: 
* Module Index:: 
* Index:: 

@end menu

@node Copying,Installation,Top,Top
@anchor{pure-stlvec pure-stlvec}@anchor{3}@anchor{pure-stlvec copying}@anchor{4}@anchor{pure-stlvec module-stlvec}@anchor{0}
@chapter Copying



@display
Copyright (c) 2011 by Peter Summerland <@email{p.summerland@@gmail.com}>.@w{ }
@end display



All rights reserved.

pure-stlvec is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.

pure-stlvec is distributed under a BSD-style license, see the COPYING file
for details.

@node Installation,Overview,Copying,Top
@anchor{pure-stlvec installation}@anchor{5}
@chapter Installation


pure-stlvec-0.4 is included in the "umbrella" addon, @code{pure-stllib},
which is available at @indicateurl{http://code.google.com/p/pure-lang/downloads/list}. After
you have downloaded and installed @code{pure-stllib}, you will be able to use
pure-stlvec (and @code{pure-stlmap}, as well).

@node Overview,Error Handling,Installation,Top
@anchor{pure-stlvec overview}@anchor{6}
@chapter Overview


The C++ Standard Template Library ("STL") is a library of generic containers
(data structures designed for storing other objects) and a rich set of generic
algorithms that operate on them. pure-stlvec provides an interface to one of
its most useful containers, "vector", adopted to hold pointers to Pure
expressions. The interface provides Pure programmers with a mutable container
"stlvec", that, like the STL's vector, holds a sequence of objects that can be
accessed in constant time according to their position in the sequence.

@menu
* Modules:: 
* Simple Examples:: 
* Members and Sequences of Members:: 
* STL Iterators and Value Semantics:: 
* Iterator Tuples:: 
* Predefined Iterator Tuple Indexes:: 
* Back Insert Iterators:: 
* Data Structure:: 
* Types:: 
* Copy-On-Write Semantics:: 
* Documentation:: 
* Parameter Names:: 

@end menu

@node Modules,Simple Examples,,Overview
@anchor{pure-stlvec modules}@anchor{7}
@section Modules


The usual operations for creating, accessing and modifying stlvecs are
provided by the stlvec module. Most of the operations are similar in name and
function to those provided by the Pure Library for other containers. As is the
case for their Pure Library counterparts, these operations are in the global
namespace. There are a few operations that have been placed in the stl
namespace usually because they do not have Pure Library counterparts.

In addition to the stlvec module, pure-stlvec provides a group of modules,
stlvec::modifying, stlvec::nonmodifying, stlvec::sort, stlvec::merge,
stlvec::heap, stlvec::minmax and stlvec::numeric, that are straight wrappers
the STL algorithms (specialized to work with STL vectors of pointers to Pure
expressions). This grouping of the STL algorithms follows that found at
http://www.cplusplus.com/reference/algorithm/. This web page contains a table
that summarizes of all of the algorithms in one place.

pure-stlvec provides an "umbrella" module, @pxref{1,,stlvec;;algorithms}, that
pulls in all of the STL algorithm interface modules in one go. The STL
algorithm wrapper functions reside in the stl namespace and have the same
names as their counterparts in the STL.

@node Simple Examples,Members and Sequences of Members,Modules,Overview
@anchor{pure-stlvec simple-examples}@anchor{8}
@section Simple Examples


Here are some examples that use the basic operations provided by the
stlvec module.

@example
> using stlvec;

> let sv1 = stlvec (0..4); members sv1;
[0,1,2,3,4]

> insert (sv1,stl::svend) (5..7); members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,3,4,5,6,7]

> sv1!3;
3

> sv1!![2,4,6];
[2,4,6]

> replace sv1 3 33; members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,33,4,5,6,7]

> stl::erase (sv1,2,5); members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,5,6,7]

> insert (sv1,2) [2,3,4];  members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,3,4,5,6,7]

> let pure_vector = stl::vector (sv1,1,5); pure_vector;
@{1,2,3,4@}

> stlvec pure_vector;
STLVEC #<pointer 0x9145a38>

> members ans;
[1,2,3,4]

 > map (+10) sv1;
[10,11,12,13,14,15,16,17]

> map (+10) (sv1,2,5);
[12,13,14]

> foldl (+) 0 sv1;
28

> [x+10 | x = sv1; x mod 2];
[11,13,15,17]

> @{x+10 | x = (sv1,2,6); x mod 2@};
@{13,15@}
@end example

@noindent

Here are some examples that use STL algorithms.

@example
> using stlvec::algorithms;

> stl::reverse (sv1,2,6); members sv1;
()
[0,1,5,4,3,2,6,7]

> stl::stable_sort sv1 (>); members sv1;
()
[7,6,5,4,3,2,1,0]

> stl::random_shuffle sv1; members sv1 1;
()
[1,3,5,4,0,7,6,2]

> stl::partition sv1 (<3); members (sv1,0,ans); members sv1;
3
[1,2,0]
[1,2,0,4,5,7,6,3]

> stl::transform sv1 (sv1,0) (*2); members sv1;
-1
[2,4,0,8,10,14,12,6]

> let sv2 = emptystlvec;

> stl::transform sv1 (sv2,stl::svback) (div 2); members sv2;
-1
[1,2,0,4,5,7,6,3]
@end example

@noindent

Many more examples can be found in the pure-stlvec/ut directory.

@node Members and Sequences of Members,STL Iterators and Value Semantics,Simple Examples,Overview
@anchor{pure-stlvec members-and-sequences-of-members}@anchor{9}
@section Members and Sequences of Members


Throughout the documentation for pure-stlvec, the member of a stlvec that is
at the nth position in the sequence of expressions stored in the stlvec is
referred to as its nth member or nth element. The nth member of a stlvec, sv,
is sometimes denoted by sv!n.  The sequence of members of sv starting at
position i up to but not including j is denoted by sv[i,j). There is a
"past-the-end" symbol, stl::svend, that denotes the position after that
occupied by the last member contained by a stlvec.

For example, if sv contains the sequence "a", "b", "c" "d" and "e", sv!0 is
"a", sv[1,3) is the sequence consisting of "b" followed by "c" and
v[3,stl::svend) denotes the sequence consisting of "d" followed by "e".

@node STL Iterators and Value Semantics,Iterator Tuples,Members and Sequences of Members,Overview
@anchor{pure-stlvec stl-iterators-and-value-semantics}@anchor{a}
@section STL Iterators and Value Semantics


In C++ a programmer accesses a STL container's elements by means of
"iterators", which can be thought of as pointers to the container's
elements. A single iterator can be used to access a specific element, and a
pair of iterators can be used to access a "range" of elements. By convention,
such a range includes the member pointed to by the first iterator and all
succeeding members up to but not including the member pointed to by the second
iterator. Each container has a past-the-end iterator that can be used to
specifiy ranges that include the container's last member.

In the case of vectors there is an obvious correspondence between an iterator
that points to an element and the element's position (starting at zero) in the
vector.  pure-stlvec uses this correspondence to designate a stlvec's members
in a way that makes it relatively easy to see how pure-stlvec's functions are
acting on the stlvec's underlying STL vector by referencing the STL's
documentation. Thus, if sv is a stlvec, and j is an int, "replace sv j x" uses
the STL to replace the element pointed to by the iterator for position j of
sv's underlying STL vector. If, in addition, k is an int, stl::sort (sv,j,k)
(<) uses the STL to sort the elements in the range designated by the "jth" and
"kth" iterators for sv's underlying STL vector. This range, written as
sv[j,k), is the subsequence of sv that begins with the element at position j
and ends with the element at position (k-1).

Besides iterators, another cornerstone of the STL is its "value semantics",
i.e., all of the STL containers are mutable and if a container is copied, all
of its elements are copied. pure-stlvec deals with the STL's value semantics
by introducing mutable and nonmutable stlvecs, and by storing smart pointers
to objects (which have cheap copies) rather than the actual objects.

@node Iterator Tuples,Predefined Iterator Tuple Indexes,STL Iterators and Value Semantics,Overview
@anchor{pure-stlvec iterator-tuples}@anchor{b}
@section Iterator Tuples


As mentioned in the previous section, in C++ ranges are specified by a pair
of STL iterators.

In pure-stlvec ranges of elements in a stlvec are specified by "iterator
tuples" rather than, say, actual pointers to STL iterators. Iterator tuples
consist of the name of a stlvec followed by one of more ints that indicate
positions (starting from zero) of the stlvec's elements.

To illustrate how iterator tuples are used, consider the STL stable_sort
function, which sorts objects in the range [first, last) in the order imposed
by comp. Its C++ signature looks like this:

@quotation

void stable_sort ( RandomAccessIterator first, RandomAccessIterator last, Compare comp )
@end quotation

The corresponding pure-stlvec function, from the stlvec::sort module, looks like
this:

@quotation

stable_sort (msv, first, last) comp
@end quotation

where msv is a mutable stlvec, and first and last are ints. The first thing
that the Pure stable_sort does is create a pair of C++ iterators that point to
the elements in msv's underlying STL vector that occupy the positions
designated by first and last.  Next it wraps the Pure comp function in a C++
function object that, along with the two iterators, is passed to the C++
stable_sort function.

For convenience, (sv,stl::svbeg, stl::svend) can be written simply as
sv. Thus, if first were stl::svbeg (or 0), and last were stl::svend (or #msv,
the number of elements in msv), the last Pure call could be written:

@quotation

stable_sort msv comp
@end quotation

It should be noted that often the STL library provides a default version of its
functions, which like stable_sort, use a comparator or other callback function
provided by the caller. E.g., the C++ stable_sort has a default version that
assumes the "<" operator can be used on the elements held by the container in
question:

@quotation

void stable_sort ( RandomAccessIterator first, RandomAccessIterator last)
@end quotation

The corresponding functions provided by the pure-stlvec modules rarely, if
ever, supply a default version. A typical example is stlvec::sort's stable_sort
which must be called with a comparator callback function:

@quotation

stable_sort msv (<);
@end quotation

Note also that the comparator (e.g., (<)), or other function being passed to a
pure-stlvec algorithm wrapper is almost always the last parameter. This
is the opposite of what is required for similar Pure functions, but is
consistent with the STL calling conventions.

@node Predefined Iterator Tuple Indexes,Back Insert Iterators,Iterator Tuples,Overview
@anchor{pure-stlvec predefined-iterator-tuple-indexes}@anchor{c}
@section Predefined Iterator Tuple Indexes


The following integer constants are defined in the stl namespace for use
in iterator tuples.

@geindex stl;;svbeg (constant)
@geindex stl;;svend (constant)
@geindex stl;;svback (constant)
@anchor{pure-stlvec stl svbeg}@anchor{d}
@deffn {Constant} stl::svbeg = 0
@anchor{pure-stlvec stl svend}@anchor{e}
@deffnx {Constant} stl::svend = -1
@anchor{pure-stlvec stl svback}@anchor{f}
@deffnx {Constant} stl::svback = -2
@end deffn

These three symbols are declared as nonfix. @code{svend} corresponds to STL's
past-end iterator for STL vectors. It makes it possible to specify ranges that
include the last element of an stlvec. I.e., the iterator tuple
(sv,stl::svbeg,stl::svend) would specify sv[0,n), where n is the number of
elements in sv. In order to understand the purpose of @code{svback}, it is
necessary to understand a bit about STL's "back insert iterators."

@node Back Insert Iterators,Data Structure,Predefined Iterator Tuple Indexes,Overview
@anchor{pure-stlvec back-insert-iterators}@anchor{10}
@section Back Insert Iterators


Many of the STL algorithms insert members into a target range designated by an
iterator that points to the first member of the target range. Consistent with
raw C usage, it is ok to copy over existing elements the target
stlvec. E.g.,:

@example
> using stlvec::modifying;

> let v1 = stlvec (0..2);

> let v2 = stlvec ("a".."g");

> stl::copy v1 (v2,2) $$ members v2;
["a","b",0,1,2,"f","g"]
@end example

@noindent

This is great for C++ programmers, but for Pure programmers it is almost
always preferable to append the copied items to the end of a target stlvec,
rather than overwriting all or part or part of it. This can be accomplished
using stl::svback. E.g.,:

@example
> stl::copy v1 (v2,stl::svback) $$ members v2;
["a","b",0,1,2,"f","g",0,1,2]
@end example

@noindent

In short, when a pure-stlvec function detects "stl::svback" in a target
iterator tuple, it constructs a STL "back inserter iterator" and passes it on
to the corresponding wrapped STL function.

@node Data Structure,Types,Back Insert Iterators,Overview
@anchor{pure-stlvec data-structure}@anchor{11}
@section Data Structure


Currently, stlvecs are of the form (STLVEC x) or (CONST_STLVEC x), where
STLVEC AND CONST_STLVEC are defined as nonfix symbols in the global namespace
and x is a pointer to the underlying STL vector. The stlvec module defines
corresponding type tags, stlvec and const_stlvec, so the programmer never
needs to worry about the underlying representaton.

This representation may change in the future, and must not be relied upon
by client modules. In particular, one must never attempt to use the
embedded pointer directly.

As the names suggest, stlvecs are mutable and const_stlvecs are
immutable. Functions that modify a stlvec will simply fail unless the stlvec
is mutable.

@example
> let v = const_stlvec $ stlvec (0..3); v2;
CONST_STLVEC #<pointer 0x8c1dbf0>

> replace v 0 100; // fails
replace (CONST_STLVEC #<pointer 0x9f07690> 0 100
@end example

@noindent

@node Types,Copy-On-Write Semantics,Data Structure,Overview
@anchor{pure-stlvec types}@anchor{12}
@section Types


pure-stlvec introduces six type tags, all of which are in the global namespace:

@geindex mutable_stlvec (type)
@anchor{pure-stlvec mutable_stlvec/type}@anchor{13}
@deffn {Pure Type} mutable_stlvec

The type for a mutable stlvec.
@end deffn

@geindex const_stlvec (type)
@anchor{pure-stlvec const_stlvec/type}@anchor{14}
@deffn {Pure Type} const_stlvec

The type for an immutable stlvec.
@end deffn

@geindex stlvec (type)
@anchor{pure-stlvec stlvec/type}@anchor{15}
@deffn {Pure Type} stlvec

The type for a stlvec, mutable or immutable.
@end deffn

@geindex mutable_svit (type)
@anchor{pure-stlvec mutable_svit/type}@anchor{16}
@deffn {Pure Type} mutable_svit

The type for an iterator tuple whose underlying stlvec is mutable.
@end deffn

@geindex const_svit (type)
@anchor{pure-stlvec const_svit/type}@anchor{17}
@deffn {Pure Type} const_svit

The type for an iterator tuple whose underlying stlvec is immutable.
@end deffn

@geindex svit (type)
@anchor{pure-stlvec svit/type}@anchor{18}
@deffn {Pure Type} svit

The type for an iterator tuple. The underlying stlvec can be mutable
or immutable.
@end deffn

@node Copy-On-Write Semantics,Documentation,Types,Overview
@anchor{pure-stlvec copy-on-write-semantics}@anchor{19}
@section Copy-On-Write Semantics


The pure-stlvec module functions do not implement automatic copy-on-write
semantics. Functions that modify stlvec parameters will simply fail if they
are passed a const_stlvec when they expect a mutable_stlvec.

For those that prefer immutable data structures, stlvecs can be converted to
const_stlvecs (usually after they have been created and modified within a
function) by the @code{const_stlvec} function. This function converts a mutable
stlvec to an immutable stlvec without changing the underlying STL vector.

Typically, a "pure" function that "modifies" a stlvec passed to it as an
argument will first copy the input stlvec to a new locally scoped (mutable)
stlvec using the stlvec function. It will then modify the new stlvec and use
const_stlvec to make the new stlvec immutable before it is returned. It should
be noted that several of the STL algorithms have "copy" versions which place
their results directly into a new stlvec, which can eliminate the need to copy
the input stlvec. E.g.:

@example
> let sv1 = stlvec ("a".."e");

> let sv2 = emptystlvec;

> stl::reverse_copy sv1 (sv2,stl::svback) $$ members sv2;
["e","d","c","b","a"]
@end example

@noindent

Without reverse_copy, one would have had to copy sv1 into sv2 and then reverse
sv2.

If desired, in Pure it is easy to write functions that have automatic
copy-on-write semantics. E.g.,

@example
> my_replace csv::const_stlvec i x = my_replace (stlvec csv) i x;
> my_replace sv::stlvec i x = replace sv i x;
@end example

@noindent

@node Documentation,Parameter Names,Copy-On-Write Semantics,Overview
@anchor{pure-stlvec documentation}@anchor{1a}
@section Documentation


The pure-stllib/doc directory includes a rudimentary cheatsheet,
pure-stllib-cheatsheet.pdf, that shows the signatures of all of the functions
provided by pure-stlvec (and by @code{pure-stlmap} as well).

The documentation of the functions provided by the stlvec module are
reasonably complete.  In contrast, the descriptions of functions provided by
the STL algorithm modules are purposely simplified (and may not, therefore, be
technically accurate). This reflects that fact that the functions provided by
pure-stlvec have an obvious correspondence to the functions provided by the
STL, and the STL is extremely well documented. Furthermore, using the Pure
interpreter, it is very easy to simply play around with with any of the
pure-stlvec functions if there are doubts, especially with respect to "corner
cases."  Often this leads to a deeper understanding compared to reading a
precise technical description.

A good book on the STL is STL Tutorial and Reference Guide, Second Edition, by
David R. Musser, Gillmer J. Derge and Atul Saini. A summary of all of the STL
algorithms can be found at @indicateurl{http://www.cplusplus.com/reference/stl/}.

@node Parameter Names,,Documentation,Overview
@anchor{pure-stlvec parameter-names}@anchor{1b}
@section Parameter Names


In the descriptions of functions that follow, parameter names used in
function descriptions represent specific types of Pure objects:


@table @asis

@item sv

stlvec (mutable or immutable)

@item csv

const (i.e., immutable) stlvec

@item msv

mutable stlvec

@item x

an arbitrary Pure expression

@item xs

a list of arbitrary Pure expressions

@item count, sz, n

whole numbers to indicate a number of elements, size of a vector, etc

@item i,j

whole numbers used to designate indexes into a stlvec

@item f,m,l

whole numbers (or stl::beg or stl::svend) designating the "first", "middle"
or "last" iterators in a stlvec iterator tuple

@item p

a whole number (or other iterator constant such as stl::svend or
stl::svback) used in a two element iterator tuple (e.g., (sv,p))

@item (sv,p)

an iterator tuple that will be mapped to an iterator that points
to the pth position of sv's underlying STL vector, v, (or to a
back iterator on v if p is stl::svback)

@item (sv,f,l)

an iterator tuple that will be mapped to the pair of iterators
that are designated by (sv,f) and (sv,l)

@item (sv,f,m,l)

an iterator tuple that will be mapped to the iterators that
are designated by (sv,f), (sv,m) and (sv,l)

@item sv[f,l)

the range of members beginning with that at (sv,f) up to but not
including that at (con,l)

@item comp

a function that accepts two objects and returns true if the
first argument is less than the second (in the strict
weak ordering defined by comp), and false otherwise

@item unary_pred

a function that accepts one object and returns true or false

@item bin_pred

a function that accepts two objects and returns true or false

@item unary_fun

a function that accepts one objects and returns another

@item bin_fun

a function that accepts two objects and returns another

@item gen_fun

a function of one parameter that produces a sequence of objects, one
for each call
@end table

For readability, and to correspond with the STL documentation, the words
"first", "middle", and "last", or variants such as "first1" are often used
instead of f,m,l.

@node Error Handling,Operations Included in the stlvec Module,Overview,Top
@anchor{pure-stlvec error-handling}@anchor{1c}
@chapter Error Handling


The functions provided this module handle errors by throwing exceptions.

@menu
* Exception Symbols:: 
* Examples:: 

@end menu

@node Exception Symbols,Examples,,Error Handling
@anchor{pure-stlvec exception-symbols}@anchor{1d}
@section Exception Symbols


@geindex bad_argument (constructor)
@anchor{pure-stlvec bad_argument/stlvec}@anchor{1e}
@deffn {Pure Constructor} bad_argument

This exception is thrown when a function is passed an unexpected value. A
subtle error to watch for is a malformed iterator tuple (e.g., one with
the wrong number of elements).
@end deffn

@geindex bad_function (constructor)
@anchor{pure-stlvec bad_function/stlvec}@anchor{1f}
@deffn {Pure Constructor} bad_function

This exception is thrown when a purported Pure call-back function is not
even callable.
@end deffn

@geindex failed_cond (constructor)
@anchor{pure-stlvec failed_cond/stlvec}@anchor{20}
@deffn {Pure Constructor} failed_cond

This exception is thrown when a Pure call-back predicate returns a value
that is not an int.
@end deffn

@geindex out_of_bounds (constructor)
@anchor{pure-stlvec out_of_bounds/stlvec}@anchor{21}
@deffn {Pure Constructor} out_of_bounds

This exception is thrown if the specified index is out of bounds.
@end deffn

@geindex range_overflow (constructor)
@anchor{pure-stlvec range_overflow/stlvec}@anchor{22}
@deffn {Pure Constructor} range_overflow

This exception is thrown by functions that write over part of a target
stlvec (e.g., copy) when the target range too small to accommodate the
result.
@end deffn

@geindex range_overlap (constructor)
@anchor{pure-stlvec range_overlap/stlvec}@anchor{23}
@deffn {Pure Constructor} range_overlap

This exception is thrown by algorithm functions that write over part of a
target stlvec when the target and source ranges overlap in a way that is
not allowed.
@end deffn

In addition, any exception thrown by a Pure callback function passed to a
pure-stlvec function will be caught and be rethrown by the pure-stlvec
function.

@node Examples,,Exception Symbols,Error Handling
@anchor{pure-stlvec examples}@anchor{24}
@section Examples


@example
> using stlvec, stlvec::modifying;

> let sv1 = stlvec (0..4); members sv1;
[0,1,2,3,4]

> let sv2 = stlvec ("a".."e"); members sv2;
["a","b","c","d","e"]

> sv1!10;
<stdin>, line 25: unhandled exception 'out_of_bounds' ...

> stl::copy sv1 (sv2,10);
<stdin>, line 26: unhandled exception 'out_of_bounds' ...

> stl::copy sv1 (sv2,2,3); // sb (sv2,pos)
<stdin>, line 22: unhandled exception 'bad_argument' ...

> stl::copy sv1 (sv2,2);
<stdin>, line 23: unhandled exception 'range_overflow' ...

> stl::copy sv2 (sv2,2);
<stdin>, line 24: unhandled exception 'range_overlap' ...

> stl::copy (sv1,1,3) (sv2,0); members sv2; // ok
2
[1,2,"c","d","e"]

> stl::sort sv2 (>); // apples and oranges
<stdin>, line 31: unhandled exception 'failed_cond'

> listmap (\x->throw DOA) sv1; // callback function throws exception
<stdin>, line 34: unhandled exception 'DOA' ...
@end example

@noindent

@node Operations Included in the stlvec Module,STL Nonmodifying Algorithms,Error Handling,Top
@anchor{pure-stlvec operations-included-in-the-stlvec-module}@anchor{25}
@chapter Operations Included in the stlvec Module


The stlvec module provides functions for creating, accessing and modifying
stlvecs. In general, operations that have the same name as a corresponding
function in the Pure standard library are in the global namespace. The
remaining functions, which are usually specific to stlvecs, are in the stl
namespace.

Please note that "stlvec to stlvec" functions are provided by the pure-stl
algorithm modules. Thus, for example, the stlvec module does not provide a
function that maps one stlvec onto a new stlvec. That functionality, and more,
is provided by stl::transform, which can be found in the stlvec::modifying
module.

@menu
* Imports:: 
* Operations in the Global Namespace:: 
* Operations in the stl Namespace:: 
* Examples: Examples<2>. 

@end menu

@node Imports,Operations in the Global Namespace,,Operations Included in the stlvec Module
@anchor{pure-stlvec imports}@anchor{26}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec;
@end example

@noindent

@node Operations in the Global Namespace,Operations in the stl Namespace,Imports,Operations Included in the stlvec Module
@anchor{pure-stlvec operations-in-the-global-namespace}@anchor{27}
@section Operations in the Global Namespace


When reading the function descriptions that follow, please bear in mind that
whenever a function is passed an iterator tuple of the form (sv,first, last),
first and last can be dropped, leaving (sv), or simply sv. The function will
treat the "unary" iterator tuple (sv) as (sv, stl::svbeg, stl::svend).

@geindex emptystlvec (function)
@anchor{pure-stlvec emptystlvec/stlvec}@anchor{28}
@deffn {Pure Function} emptystlvec

return an empty stlvec
@end deffn

@geindex stlvec (function)
@anchor{pure-stlvec stlvec}@anchor{29}
@deffn {Pure Function} stlvec source /stlvec

create a new stlvec that contains the elements of source; source can be
a stlvec, an iterator tuple(sv,first,last), a list or a vector (i.e.,
a matrix consisting of a single row or column). The underlying STL vector
is always a new STL vector. I.e., if source is a stlvec the new stlvec does
not share source's underlying STL vector.
@end deffn

@geindex mkstlvec (function)
@anchor{pure-stlvec mkstlvec/stlvec}@anchor{2a}
@deffn {Pure Function} mkstlvec x count

create a new stlvec consisting of count x's.
@end deffn

@geindex const_stlvec (function)
@anchor{pure-stlvec const_stlvec/stlvec}@anchor{2b}
@deffn {Pure Function} const_stlvec source

create a new const_stlvec that contains the elements of source; source can
be a stlvec, an iterator tuple(sv,first,last), a list or a vector (i.e., a
matrix consisting of a single row or column). If source is a stlvec
(mutable or const), the new const_stlvec shares source's underlying STL
vector.
@end deffn

@geindex # (prefix function)
@anchor{pure-stlvec #/stlvec}@anchor{2c}
@deffn {Pure Function} # sv

return the number of elements in sv.
@end deffn

Note that # applied to an iterator tuple like (sv,b,e) will just return the
number of elements in the tuple. Use stl::bounds if you need to know the
number of elements in the range denoted by an iterator tuple.

@geindex ! (infix function)
@anchor{pure-stlvec !/stlvec}@anchor{2d}
@deffn {Pure Function} sv ! i

return the ith member of sv
@end deffn

Note that !k applied to an iterator tuple like (sv,b,e) will just return the
kth element of the tuple. In addition, in stlvec, integers used to denote
postions (as in !k) or in iterators, @emph{always}, are relative to the beginning
of the underlying vector. So it makes no sense to apply ! to an iterator
tuple.

@geindex first (function)
@geindex last (function)
@anchor{pure-stlvec first/stlvec}@anchor{2e}
@deffn {Pure Function} first sv
@anchor{pure-stlvec last/stlvec}@anchor{2f}
@deffnx {Pure Function} last sv

first and last member of sv
@end deffn

@geindex members (function)
@anchor{pure-stlvec members/stlvec}@anchor{30}
@deffn {Pure Function} members (sv, first, last)

return a list of values stored in sv[first,last)
@end deffn

@geindex replace (function)
@anchor{pure-stlvec replace/stlvec}@anchor{31}
@deffn {Pure Function} replace msv i x

replace the ith member of msv by x and return x; throws out_of_bounds if
i is less than 0 or great or equal to the number of elements in msv
@end deffn

@geindex update (function)
@anchor{pure-stlvec update/stlvec}@anchor{32}
@deffn {Pure Function} update msv i x

the same as replace except that update returns msv instead of x. This
function is DEPRECATED.
@end deffn

@geindex append (function)
@anchor{pure-stlvec append/stlvec}@anchor{33}
@deffn {Pure Function} append sv x

append x to the end of sv
@end deffn

@geindex insert (function)
@anchor{pure-stlvec insert/stlvec}@anchor{34}
@deffn {Pure Function} insert (msv,p) xs

@deffnx {Pure Function} insert (msv,p) (sv,first,last)

insert members of the list xs or the range sv[first, last)
into msv, all preceding the pth member of msv. Members are shifted
to make room for the inserted members
@end deffn

@geindex rmfirst (function)
@geindex rmlast (function)
@anchor{pure-stlvec rmfirst/stlvec}@anchor{35}
@deffn {Pure Function} rmfirst msv
@anchor{pure-stlvec rmlast/stlvec}@anchor{36}
@deffnx {Pure Function} rmlast msv

remove the first or last member from msv
@end deffn

@geindex erase (function)
@anchor{pure-stlvec erase/stlvec}@anchor{37}
@deffn {Pure Function} erase (msv,first,last)

@deffnx {Pure Function} erase (msv,p)

@deffnx {Pure Function} erase msv

remove msv[first,last) from msv, remove msv!p from msv, or make msv
empty. Members are shifted to occupy vacated slots
@end deffn

@geindex == (infix function)
@geindex ~= (infix function)
@anchor{pure-stlvec ==/stlvec}@anchor{38}
@deffn {Pure Function} sv1 == sv2
@anchor{pure-stlvec ~=/stlvec}@anchor{39}
@deffnx {Pure Function} sv1 ~= sv2

(x == y) is the same as stl::allpairs (==) x y and x ~= y is simply
~(allpairs (==) x y)
@end deffn

Note that @code{==} and @code{~==} are not defined for iterator tuples (the rules
would never be executed because == is defined on tuples in the Prelude).

The stlvec module provides convenience functions that apply map, catmap,
foldl, etc, to directly access Pure expressions stored in a stlvec.

@geindex map (function)
@anchor{pure-stlvec map/stlvec}@anchor{3a}
@deffn {Pure Function} map unary_fun (sv, first, last)

one pass equivalent of map unary_fun $ members (sv, first,
last)
@end deffn

@geindex listmap (function)
@anchor{pure-stlvec listmap/stlvec}@anchor{3b}
@deffn {Pure Function} listmap unary_fun (sv, first, last)

same as map, used in list comprehensions
@end deffn

@geindex catmap (function)
@anchor{pure-stlvec catmap/stlvec}@anchor{3c}
@deffn {Pure Function} catmap unary_fun (sv, first, last)

one pass equivalent of catmap unary_fun $ members (sv, first,
last)
@end deffn

@geindex do (function)
@anchor{pure-stlvec do/stlvec}@anchor{3d}
@deffn {Pure Function} do unary_fun (sv, first, last)

one pass equivalent of do unary_fun $ members (sv, first,
last)
@end deffn

@geindex foldl (function)
@anchor{pure-stlvec foldl/stlvec}@anchor{3e}
@deffn {Pure Function} foldl bin_fun x (sv, first, last)

one pass equivalent of foldl bin_fun x $ members (sv,
first, last)
@end deffn

@geindex foldl1 (function)
@anchor{pure-stlvec foldl1/stlvec}@anchor{3f}
@deffn {Pure Function} foldl1 bin_fun (sv, first, last)

one pass equivalent of foldl1 bin_fun $ members (sv, first,
last)
@end deffn

@geindex filter (function)
@anchor{pure-stlvec filter/stlvec}@anchor{40}
@deffn {Pure Function} filter unary_pred (sv, first, last)

one pass equivalent of filter unary_pred $ members (sv, first,
last)
@end deffn

The following four functions map (or catmap) stlvecs onto row and col
matrixes, primarily for use in matrix comprehensions.

@geindex rowmap (function)
@anchor{pure-stlvec rowmap/stlvec}@anchor{41}
@deffn {Pure Function} rowmap unary_fun (sv, first, last)
@end deffn

@geindex rowcatmap (function)
@anchor{pure-stlvec rowcatmap/stlvec}@anchor{42}
@deffn {Pure Function} rowcatmap unary_fun (sv, first, last)
@end deffn

@geindex colmap (function)
@anchor{pure-stlvec colmap/stlvec}@anchor{43}
@deffn {Pure Function} colmap unary_fun (sv, first, last)
@end deffn

@geindex colcatmap (function)
@anchor{pure-stlvec colcatmap/stlvec}@anchor{44}
@deffn {Pure Function} colcatmap unary_fun (sv, first, last)
@end deffn

@node Operations in the stl Namespace,Examples<2>,Operations in the Global Namespace,Operations Included in the stlvec Module
@anchor{pure-stlvec operations-in-the-stl-namespace}@anchor{45}
@section Operations in the stl Namespace


@geindex stl;;empty (function)
@anchor{pure-stlvec stl empty/stlvec}@anchor{46}
@deffn {Pure Function} stl::empty sv

test whether sv is empty
@end deffn

@geindex stl;;vector (function)
@anchor{pure-stlvec stl vector/stlvec}@anchor{47}
@deffn {Pure Function} stl::vector (sv,first,last)

create a Pure vector that contains the members of sv[first,last)
@end deffn

@geindex stl;;allpairs (function)
@anchor{pure-stlvec stl allpairs/stlvec}@anchor{48}
@deffn {Pure Function} stl::allpairs bin_pred (sv1, first1, last1) (sv2, first2, last2)

returns true if bin_pred is true for all corresponding members of
sv1[first1, last1) and sv2[first2, last2)
@end deffn

@geindex stl;;bounds (function)
@anchor{pure-stlvec stl bounds/stlvec}@anchor{49}
@deffn {Pure Function} stl::bounds (sv,first,last)

throws out-of-bounds if first or last is out of bounds. returns the tuple
(sv,first,last) except that if first is stl::begin it will be replaced by 0
and if last is stl::svend it will be replaced by the number of elements in
sv.
@end deffn

@geindex stl;;reserve (function)
@anchor{pure-stlvec stl reserve/stlvec}@anchor{4a}
@deffn {Pure Function} stl::reserve msv count

modify the underlying STL vector to have at least count slots, useful for
packing data into a fixed size vector and possibly to speed up the addition
of new members
@end deffn

@geindex stl;;capacity (function)
@anchor{pure-stlvec stl capacity/stlvec}@anchor{4b}
@deffn {Pure Function} stl::capacity sv

return the number of slots (as opposed to the number of elements) held by
the underlying STL vector
@end deffn

@node Examples<2>,,Operations in the stl Namespace,Operations Included in the stlvec Module
@anchor{pure-stlvec id1}@anchor{4c}
@section Examples


See ut_stlvec.pure and ut_global_stlvec.pure in the pure-stlvec/ut directory.

@node STL Nonmodifying Algorithms,STL Modifying Algorithms,Operations Included in the stlvec Module,Top
@anchor{pure-stlvec stl-nonmodifying-algorithms}@anchor{4d}
@chapter STL Nonmodifying Algorithms


The stlvec::nonmodifying module provides an interface to the STL's
non-modifying sequence operations.

@menu
* Imports: Imports<2>. 
* Operations:: 
* Examples: Examples<3>. 

@end menu

@node Imports<2>,Operations,,STL Nonmodifying Algorithms
@anchor{pure-stlvec id2}@anchor{4e}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::nonmodifying;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations,Examples<3>,Imports<2>,STL Nonmodifying Algorithms
@anchor{pure-stlvec operations}@anchor{4f}
@section Operations


@geindex stl;;for_each (function)
@anchor{pure-stlvec stl for_each/stlvec}@anchor{50}
@deffn {Pure Function} stl::for_each (sv, first, last) unary_fun

applies unary_fun to each of the elements in sv[first,last)
@end deffn

@geindex stl;;find (function)
@anchor{pure-stlvec stl find/stlvec}@anchor{51}
@deffn {Pure Function} stl::find (sv, first, last) x

returns the position of the first element in sv[first,last)
for which (==x) is true (or stl::svend if not found)
@end deffn

@geindex stl;;find_if (function)
@anchor{pure-stlvec stl find_if/stlvec}@anchor{52}
@deffn {Pure Function} stl::find_if (sv, first, last) unary_pred

returns the position of the first element in sv[first,last)
for which unary_pred is true (or stl::svend if not found)
@end deffn

@geindex stl;;find_first_of (function)
@anchor{pure-stlvec stl find_first_of/stlvec}@anchor{53}
@deffn {Pure Function} stl::find_first_of (sv1, first1, last1) (sv2, first2, last2) bin_pred

Returns the position of the first element, x, in
sv1[first1,last1) for which there exists y in
sv2[first2,last2) and (bin_pred x y) is true (or stl::svend if
no such x exists).
@end deffn

@geindex stl;;adjacent_find (function)
@anchor{pure-stlvec stl adjacent_find/stlvec}@anchor{54}
@deffn {Pure Function} stl::adjacent_find (sv, first, last) bin_pred

search sv[first,last) for the first occurrence of two
consecutive elements (x,y) for which (bin_pred x y) is
true. Returns the position of x, if found, or stl::svend if not found)
@end deffn

@geindex stl;;count (function)
@anchor{pure-stlvec stl count/stlvec}@anchor{55}
@deffn {Pure Function} stl::count (sv, first, last) x

returns the number of elements in the range sv[first,last) for
which (x==) is true
@end deffn

@geindex stl;;count_if (function)
@anchor{pure-stlvec stl count_if/stlvec}@anchor{56}
@deffn {Pure Function} stl::count_if (sv, first, last) unary_pred

returns the number of elements in the range sv[first,last) for
which unary_pred is true
@end deffn

@geindex stl;;mismatch (function)
@anchor{pure-stlvec stl mismatch/stlvec}@anchor{57}
@deffn {Pure Function} stl::mismatch (sv1, first1, last1) (sv2, first2) bin_pred

applies bin_pred pairwise to the elements of
sv1[first1,last1) and (sv2,first2,first2 + n), with
n equal to last1-first1 until it finds i and j such
that bin_pred (sv1!i) (sv2!j) is false and returns
(i,j). If bin_pred is true for all of the pairs of elements,
i will be stl::svend and j will be first2 + n (or stl::svend)
@end deffn

@geindex stl;;equal (function)
@anchor{pure-stlvec stl equal/stlvec}@anchor{58}
@deffn {Pure Function} stl::equal (sv1, first1, last1) (sv2, first2) bin_pred

applies bin_pred pairwise to the elements of
sv1[first1,last1) and (sv2,first2,first2 + n), with
n equal to last1-first1, and returns true if bin_pred is
true for each pair
@end deffn

@geindex stl;;search (function)
@anchor{pure-stlvec stl search/stlvec}@anchor{59}
@deffn {Pure Function} stl::search (sv1, first1, last1) (sv2, first2) bin_pred

using bin_pred to determine equality of the elements, searches
sv1[first1,last1) for the first occurrence of the sequence
defined by sv2[first2,last2), and returns the position in sv1
of its first element (or stl::svend if not found)
@end deffn

@geindex stl;;search_n (function)
@anchor{pure-stlvec stl search_n/stlvec}@anchor{5a}
@deffn {Pure Function} stl::search_n (sv, first, last) count x bin_pred

using bin_pred to determine equality of the elements, searches
sv[first,last) for a sequence of count elements that equal
x. If such a sequence is found, it returns the position of the
first of its elements, otherwise it returns stl::svend
@end deffn

@geindex stl;;find_end (function)
@anchor{pure-stlvec stl find_end/stlvec}@anchor{5b}
@deffn {Pure Function} stl::find_end (sv1, first1, last1) (sv2, first2, last2) bin_pred

using bin_pred to determine equality of the elements, searches
sv1[first1,last1) for the last occurrence of
sv2[first2,last2). Returns the position of the first element in
sv1 of the occurrence (or stl::svend if not found).
@end deffn

@node Examples<3>,,Operations,STL Nonmodifying Algorithms
@anchor{pure-stlvec id3}@anchor{5c}
@section Examples


See ut_nonmodifying.pure in the pure-stlvec/ut directory.

@node STL Modifying Algorithms,STL Sort Algorithms,STL Nonmodifying Algorithms,Top
@anchor{pure-stlvec stl-modifying-algorithms}@anchor{5d}
@chapter STL Modifying Algorithms


The stlvec::modifying module provides an interface to the STL's modifying
algorithms.

@menu
* Imports: Imports<3>. 
* Operations: Operations<2>. 
* Examples: Examples<4>. 

@end menu

@node Imports<3>,Operations<2>,,STL Modifying Algorithms
@anchor{pure-stlvec id4}@anchor{5e}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::modifying;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<2>,Examples<4>,Imports<3>,STL Modifying Algorithms
@anchor{pure-stlvec id5}@anchor{5f}
@section Operations


@geindex stl;;copy (function)
@anchor{pure-stlvec stl copy/stlvec}@anchor{60}
@deffn {Pure Function} stl::copy (sv, first1, last1) (msv, first2)

copies the elements in sv[first1,last1) into the range whose
first element is (msv,first2)
@end deffn

@geindex stl;;copy_backward (function)
@anchor{pure-stlvec stl copy_backward/stlvec}@anchor{61}
@deffn {Pure Function} stl::copy_backward (sv,first1,last1) (msv,last2)

copies the elements in sv[first1,last1), moving backward from
(last1), into the range msv[first2,last2) where first2 is
last2 minus the number of elements in sv[first1,last1)
@end deffn

@geindex stl;;swap_ranges (function)
@anchor{pure-stlvec stl swap_ranges/stlvec}@anchor{62}
@deffn {Pure Function} stl::swap_ranges (sv,first,last) (msv, p)

exchanges the elements in sv[first, last) with those in
msv[p, p+n) where n is last - first
@end deffn

@geindex stl;;transform (function)
@anchor{pure-stlvec stl transform/stlvec}@anchor{63}
@deffn {Pure Function} stl::transform (sv,first,last) (msv, p) unary_fun

applies unary_fun to the elements of sv[first,last) and
places the resulting sequence in msv[p, p+n) where n is
last - first. If sv is mutable, msv and sv can be the
same stlvec. Returns (msv,p+n)
@end deffn

@geindex stl;;transform_2 (function)
@anchor{pure-stlvec stl transform_2/stlvec}@anchor{64}
@deffn {Pure Function} stl::transform_2 (sv1,first1,last1) (sv2,first2) (msv, p) bin_fun

applies bin_fun to corresponding pairs of elements of
sv1[first1,last1) sv2[first2,n) and and places the
resulting sequence in msv[p, p+n) where n is last1 -
first1. Returns (msv,p+n)
@end deffn

@geindex stl;;replace_if (function)
@anchor{pure-stlvec stl replace_if/stlvec}@anchor{65}
@deffn {Pure Function} stl::replace_if (msv,first,last) unary_pred x

replace the elements of msv[first,last) that satistfy
unary_pred with x
@end deffn

@geindex stl;;replace_copy (function)
@anchor{pure-stlvec stl replace_copy/stlvec}@anchor{66}
@deffn {Pure Function} stl::replace_copy (sv,first,last) (msv,p) x y

same as @code{replace} (msv,first,last) x y except that the
modified sequence is placed in msv[p,p+last-first)
@end deffn

@geindex stl;;replace_copy_if (function)
@anchor{pure-stlvec stl replace_copy_if/stlvec}@anchor{67}
@deffn {Pure Function} stl::replace_copy_if (sv,first,last) (msv,p) unary_pred x

same as @pxref{65,,replace_if} except that the modified sequence is
placed in msv[p,p+last-first)
@end deffn

@geindex stl;;fill (function)
@anchor{pure-stlvec stl fill/stlvec}@anchor{68}
@deffn {Pure Function} stl::fill (msv,first,last) x

replace all elements in msv[first,last) with x
@end deffn

@geindex stl;;fill_n (function)
@anchor{pure-stlvec stl fill_n/stlvec}@anchor{69}
@deffn {Pure Function} stl::fill_n (msv,first) n x

replace the elements of msv[first,first+n) with x
@end deffn

@geindex stl;;generate (function)
@anchor{pure-stlvec stl generate/stlvec}@anchor{6a}
@deffn {Pure Function} stl::generate (msv,first,last) gen_fun

replace the elements in msv[first,last) with the sequence generated by
successive calls to gen_fun (), e.g.,

@example
> let count = ref 0;

> g _ = n when n = get count + 1; put count n; end;

> let sv = mkstlvec 0 10;

> stl::generate sv g $$ members sv;
[1,2,3,4,5,6,7,8,9,10]
@end example

@noindent
@end deffn

@geindex stl;;generate_n (function)
@anchor{pure-stlvec stl generate_n/stlvec}@anchor{6b}
@deffn {Pure Function} stl::generate_n (msv,first) n gen_fun

replace all elements in msv[first,first+n) with the sequence
generated by successive calls to gen_fen
@end deffn

@geindex stl;;remove (function)
@anchor{pure-stlvec stl remove/stlvec}@anchor{6c}
@deffn {Pure Function} stl::remove (msv,first,last) x

same as @pxref{6d,,remove_if} (msv,first,last) (==x).
@end deffn

@geindex stl;;remove_if (function)
@anchor{pure-stlvec stl remove_if/stlvec}@anchor{6d}
@deffn {Pure Function} stl::remove_if (msv,first,last) unary_pred

remove elements in msv[first,last) that satisfy unary_pred. If n elements
do not satisfy unary_pred, they are moved to msv[first,first+n), preserving
their relative order. The content of msv[first+n,svend) is
undefined. Returns first+n, or stl::svend if first+n is greater than the
number of elements in msv
@end deffn

@geindex stl;;remove_copy (function)
@anchor{pure-stlvec stl remove_copy/stlvec}@anchor{6e}
@deffn {Pure Function} stl::remove_copy (sv,first,last) (msv,first) x

same as @pxref{6c,,remove} except that the purged sequence is copied to
(msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl;;remove_copy_if (function)
@anchor{pure-stlvec stl remove_copy_if/stlvec}@anchor{6f}
@deffn {Pure Function} stl::remove_copy_if (sv,first,last) (msv,first) unary_pred

same as @pxref{6d,,remove_if} except that the purged sequence is copied
to (msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl;;unique (function)
@anchor{pure-stlvec stl unique/stlvec}@anchor{70}
@deffn {Pure Function} stl::unique (msv,first,last) bin_pred

eliminates consecutive duplicates from sv[first,last), using
bin_pred to test for equality. The purged sequence is moved to
sv[first,first+n) preserving their relative order, where n
is the size of the purged sequence. Returns first+n or stl::svend if
first+n is greater than the number of elements in msv
@end deffn

@geindex stl;;unique_copy (function)
@anchor{pure-stlvec stl unique_copy/stlvec}@anchor{71}
@deffn {Pure Function} stl::unique_copy (sv,first,last) (msv,first) bin_pred

same as @pxref{70,,unique} except that the purged sequence is copied to
(msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl;;reverse (function)
@anchor{pure-stlvec stl reverse/stlvec}@anchor{72}
@deffn {Pure Function} stl::reverse (msv,first,last)

Reverses the order of the elements in sv[first,last).
@end deffn

@geindex stl;;reverse_copy (function)
@anchor{pure-stlvec stl reverse_copy/stlvec}@anchor{73}
@deffn {Pure Function} stl::reverse_copy (sv,first,last) (msv,first)

same as @pxref{72,,reverse} except that the reversed sequence is copied
to (msv,first) and sv[first,last) is not changed.
@end deffn

@geindex stl;;rotate (function)
@anchor{pure-stlvec stl rotate/stlvec}@anchor{74}
@deffn {Pure Function} stl::rotate (msv,first,middle,last)

rotates the elements of msv[first,middle,last] so that
middle becomes the first element of msv[first,last].
@end deffn

@geindex stl;;rotate_copy (function)
@anchor{pure-stlvec stl rotate_copy/stlvec}@anchor{75}
@deffn {Pure Function} stl::rotate_copy (msv,first,middle,last) (msv,first)

same as rotate except that the rotated sequence is copied to
(msv,first) and sv[first,last) is not changed.
@end deffn

@geindex stl;;random_shuffle (function)
@anchor{pure-stlvec stl random_shuffle/stlvec}@anchor{76}
@deffn {Pure Function} stl::random_shuffle (msv,first,last) int::seed

randomly reorders the elements in msv[first,last)
@end deffn

@geindex stl;;partition (function)
@anchor{pure-stlvec stl partition/stlvec}@anchor{77}
@deffn {Pure Function} stl::partition (msv,first,last) unary_pred

places the elements in msv[first,last) that satisfy unary_pred
before those that don't. Returns middle, where msv
[first,middle) contains all of the elements that satisfy unary_pre,
and msv [middle, last) contains those that do not
@end deffn

@geindex stl;;stable_partition (function)
@anchor{pure-stlvec stl stable_partition/stlvec}@anchor{78}
@deffn {Pure Function} stl::stable_partition (msv,first,last) unary_pred

same as partition except that the relative positions of the elements in
each group are preserved
@end deffn

@node Examples<4>,,Operations<2>,STL Modifying Algorithms
@anchor{pure-stlvec id6}@anchor{79}
@section Examples


See ut_modifying.pure in the pure-stlvec/ut directory.

@node STL Sort Algorithms,STL Merge Algorithms,STL Modifying Algorithms,Top
@anchor{pure-stlvec stl-sort-algorithms}@anchor{7a}
@chapter STL Sort Algorithms


The stlvec::sort module provides an interface to the STL's sorting and binary
search algorithms.

@menu
* Imports: Imports<4>. 
* Operations: Operations<3>. 
* Examples: Examples<5>. 

@end menu

@node Imports<4>,Operations<3>,,STL Sort Algorithms
@anchor{pure-stlvec id7}@anchor{7b}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::sort;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<3>,Examples<5>,Imports<4>,STL Sort Algorithms
@anchor{pure-stlvec id8}@anchor{7c}
@section Operations


All of the functions in this module require the caller to supply an ordering
function, comp. The functions (<) and (>) are commonly passed as comp.

@geindex stl;;sort (function)
@anchor{pure-stlvec stl sort/stlvec}@anchor{7d}
@deffn {Pure Function} stl::sort (msv, first, last) comp

sorts msv[first, last)
@end deffn

@geindex stl;;stable_sort (function)
@anchor{pure-stlvec stl stable_sort/stlvec}@anchor{7e}
@deffn {Pure Function} stl::stable_sort (msv, first, last) comp

sorts msv[first, last), preserving the relative order of equal
members
@end deffn

@geindex stl;;partial_sort (function)
@anchor{pure-stlvec stl partial_sort/stlvec}@anchor{7f}
@deffn {Pure Function} stl::partial_sort (msv, first, middle, last) comp

fills msv[first, middle) with the elements of msv[first,last) that would
appear there if msv[first,last) were sorted using comp and fills
msv[middle,last) with the remaining elements in unspecified order
@end deffn

@geindex stl;;partial_sort_copy (function)
@anchor{pure-stlvec stl partial_sort_copy/stlvec}@anchor{80}
@deffn {Pure Function} stl::partial_sort_copy (sv, first1, last1) (msv, first2, last2) comp

let n be the number of elements in sv[first1, last1) and r be the number of
elements in msv[first2, last2). If r < n, @pxref{80,,partial_sort_copy}
fills msv[first2, last2) with the first r elements of what sv[first1,
last1) would be if it had been sorted. If r >= n, it fills msv[first2,
first2+n) with the elements of sv[first1, last1) in sorted
order. sv[first1,last1) is unchanged
@end deffn

@geindex stl;;nth_element (function)
@anchor{pure-stlvec stl nth_element/stlvec}@anchor{81}
@deffn {Pure Function} stl::nth_element (msv, first, middle, last) comp

rearranges the elements of msv[first, last) as follows. Let n be middle -
first, and let x be the nth smallest element of msv[first, last). After the
function is called, sv!middle will be x. All of the elements of msv[first,
middle) will be less than x and all of the elements of msv[middle+1, last)
will be greater than x
@end deffn

The next four functions assume that sv[first, last) is ordered by comp.

@geindex stl;;lower_bound (function)
@anchor{pure-stlvec stl lower_bound/stlvec}@anchor{82}
@deffn {Pure Function} stl::lower_bound (sv, first, last) x comp

returns an int designating the first position into which x can be inserted
into sv[first, last) while maintaining the sorted ordering
@end deffn

@geindex stl;;upper_bound (function)
@anchor{pure-stlvec stl upper_bound/stlvec}@anchor{83}
@deffn {Pure Function} stl::upper_bound (sv, first, last) x comp

returns an int designating the last position into which x can be inserted
into sv[first, last) while maintaining the sorted ordering
@end deffn

@geindex stl;;equal_range (function)
@anchor{pure-stlvec stl equal_range/stlvec}@anchor{84}
@deffn {Pure Function} stl::equal_range (sv, first, last) x comp

returns a pair of ints, (lower, upper) where lower and upper would have
been returned by separate calls to lower_bound and upper_bound.
@end deffn

@geindex stl;;binary_search (function)
@anchor{pure-stlvec stl binary_search/stlvec}@anchor{85}
@deffn {Pure Function} stl::binary_search (sv, first, last) x comp

returns true if x is an element of sv[first, last)
@end deffn

@node Examples<5>,,Operations<3>,STL Sort Algorithms
@anchor{pure-stlvec id9}@anchor{86}
@section Examples


See ut_sort.pure in the pure-stlvec/ut directory.

@node STL Merge Algorithms,STL Heap Algorithms,STL Sort Algorithms,Top
@anchor{pure-stlvec stl-merge-algorithms}@anchor{87}
@chapter STL Merge Algorithms


The stlvec::merge module provides an interface to the STL's merge
algorithms. These algorithms operate on sorted ranges.

@menu
* Imports: Imports<5>. 
* Operations: Operations<4>. 
* Examples: Examples<6>. 

@end menu

@node Imports<5>,Operations<4>,,STL Merge Algorithms
@anchor{pure-stlvec id10}@anchor{88}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::merge;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<4>,Examples<6>,Imports<5>,STL Merge Algorithms
@anchor{pure-stlvec id11}@anchor{89}
@section Operations


All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). They only work
properly on input ranges that have been previously sorted using comp. The set
operations generally do not check for range overflow because it is not
generally possible to determine the length of the result of a set operation
until after it is completed. In most cases you will get a nasty segmentation
fault if the result is bigger than the target range. The best way to avoid
this possibility it to use a back iterator to specifify the target range.

See parameter naming conventions at ..

@geindex stl;;merge (function)
@anchor{pure-stlvec stl merge/stlvec}@anchor{8a}
@deffn {Pure Function} stl::merge (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

merges the two sorted ranges into the sorted range msv[p,p+n) where n is
the total length of the merged sequence
@end deffn

@geindex stl;;inplace_merge (function)
@anchor{pure-stlvec stl inplace_merge/stlvec}@anchor{8b}
@deffn {Pure Function} stl::inplace_merge (msv,first, middle, last) comp

merges msv[first,middle) and msv[middle,last) into the sorted range
msv[first,last)
@end deffn

@geindex stl;;includes (function)
@anchor{pure-stlvec stl includes/stlvec}@anchor{8c}
@deffn {Pure Function} stl::includes (sv1,first1,last1) (sv2,first2,last2) comp

returns true if every element of sv2[first2,last2) is an element
of sv1[first1,last1)
@end deffn

@geindex stl;;set_union (function)
@anchor{pure-stlvec stl set_union/stlvec}@anchor{8d}
@deffn {Pure Function} stl::set_union (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted union of sv1[first1,last1) and
sv2[first2,last2) into msv[p,p+n) where n is the number
of elements in the sorted union, and returns the past-the-end position of
the sorted union
@end deffn

@geindex stl;;set_intersection (function)
@anchor{pure-stlvec stl set_intersection/stlvec}@anchor{8e}
@deffn {Pure Function} stl::set_intersection (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted intersection of sv1[first1,last1) and sv2[first2,last2)
into msv[p,p+n) where n is the number of elements in the sorted
intersection, and returns p+n (or stl::svend, if applicable)
@end deffn

@geindex stl;;set_difference (function)
@anchor{pure-stlvec stl set_difference/stlvec}@anchor{8f}
@deffn {Pure Function} stl::set_difference (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted difference of sv1[first1,last1) and sv2[first2,last2)
into msv[p,p+n) where n is the number of elements in the sorted difference,
and returns p+n (or stl::svend, if applicable)
@end deffn

@geindex stl;;set_symmetric_difference (function)
@anchor{pure-stlvec stl set_symmetric_difference/stlvec}@anchor{90}
@deffn {Pure Function} stl::set_symmetric_difference (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted symmetric_difference of sv1[first1,last1) and
sv2[first2,last2) into msv[p,p+n) where n is the number of elements in the
sorted symmetric_difference, and returns returns p+n (or stl::svend, if
applicable)
@end deffn

@node Examples<6>,,Operations<4>,STL Merge Algorithms
@anchor{pure-stlvec id12}@anchor{91}
@section Examples


See ut_merge.pure in the pure-stlvec/ut directory.

@node STL Heap Algorithms,Min/Max STL Algorithms,STL Merge Algorithms,Top
@anchor{pure-stlvec stl-heap-algorithms}@anchor{92}
@chapter STL Heap Algorithms


The stlvec::heap module provides an interface to the STL's heap operations.

@menu
* Imports: Imports<6>. 
* Operations: Operations<5>. 
* Examples: Examples<7>. 

@end menu

@node Imports<6>,Operations<5>,,STL Heap Algorithms
@anchor{pure-stlvec id13}@anchor{93}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::heap;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<5>,Examples<7>,Imports<6>,STL Heap Algorithms
@anchor{pure-stlvec id14}@anchor{94}
@section Operations


All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). The functions (<)
and (>) are commonly passed as comp.

@geindex stl;;make_heap (function)
@anchor{pure-stlvec stl make_heap/stlvec}@anchor{95}
@deffn {Pure Function} stl::make_heap (msv,first,last) comp

rearranges the elements of msv[first,last) so that they are a
heap, i.e., after this msv!first will be the largest element in
msv[first,last), and push_heap and pop_heap will work properly
@end deffn

@geindex stl;;push_heap (function)
@anchor{pure-stlvec stl push_heap/stlvec}@anchor{96}
@deffn {Pure Function} stl::push_heap (msv,first,last) comp

makes msv[first,last) a heap (assuming that msv[first,last-1) was a heap)
@end deffn

@geindex stl;;pop_heap (function)
@anchor{pure-stlvec stl pop_heap/stlvec}@anchor{97}
@deffn {Pure Function} stl::pop_heap (msv,first,last) comp

swaps msv!first with msv!(last-1), and makes msv[first,last-1) a heap
(assuming that msv[first,last) was a heap)
@end deffn

@geindex stl;;sort_heap (function)
@anchor{pure-stlvec stl sort_heap/stlvec}@anchor{98}
@deffn {Pure Function} stl::sort_heap (msv,first,last) comp

sorts the elements in msv[first,last)
@end deffn

@node Examples<7>,,Operations<5>,STL Heap Algorithms
@anchor{pure-stlvec id15}@anchor{99}
@section Examples


See ut_heap.pure in the pure-stlvec/ut directory.

@node Min/Max STL Algorithms,STL Numeric Algorithms,STL Heap Algorithms,Top
@anchor{pure-stlvec min-max-stl-algorithms}@anchor{9a}
@chapter Min/Max STL Algorithms


The stlvec::minmax module provides an interface to a few additional STL
algorithms.

@menu
* Imports: Imports<7>. 
* Operations: Operations<6>. 
* Examples: Examples<8>. 

@end menu

@node Imports<7>,Operations<6>,,Min/Max STL Algorithms
@anchor{pure-stlvec id16}@anchor{9b}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::minmax;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<6>,Examples<8>,Imports<7>,Min/Max STL Algorithms
@anchor{pure-stlvec id17}@anchor{9c}
@section Operations


All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). The functions (<)
and (>) are commonly passed as comp.

@geindex stl;;min_element (function)
@anchor{pure-stlvec stl min_element/stlvec}@anchor{9d}
@deffn {Pure Function} stl::min_element (sv,first,last) comp

returns the position of the minimal element of sv[first,last) under the
ordering defined by comp
@end deffn

@geindex stl;;max_element (function)
@anchor{pure-stlvec stl max_element/stlvec}@anchor{9e}
@deffn {Pure Function} stl::max_element (sv,first,last) comp

returns the position of the maximal element of sv[first,last) under the
ordering defined by comp
@end deffn

@geindex stl;;lexicographical_compare (function)
@anchor{pure-stlvec stl lexicographical_compare/stlvec}@anchor{9f}
@deffn {Pure Function} stl::lexicographical_compare (sv1,first1,last1) (sv2,first2,last2) comp

compares sv1[first1,last1) and sv2[first2,last2) element by element
according to the ordering defined by comp, and returns true if the first
sequence is less than the second
@end deffn

Algorithms are provided for stepping through all the permutations the elements
of a stlvec. For these purposes, the first permutation has the elements of
msv[first,last) sorted in ascending order and the last has the elements sorted
in descending order.

@geindex stl;;next_permutation (function)
@anchor{pure-stlvec stl next_permutation/stlvec}@anchor{a0}
@deffn {Pure Function} stl::next_permutation (msv,first,last) comp

rearranges msv[first,last) to produce the next permutation, in the ordering
imposed by comp. If the elements of the next permutation is ordered
(ascending or decending) by comp, return false. Otherwise return true.
@end deffn

@geindex stl;;prev_permutation (function)
@anchor{pure-stlvec stl prev_permutation/stlvec}@anchor{a1}
@deffn {Pure Function} stl::prev_permutation (msv,first,last) comp

next_permutation in reverse
@end deffn

@node Examples<8>,,Operations<6>,Min/Max STL Algorithms
@anchor{pure-stlvec id18}@anchor{a2}
@section Examples


See ut_minmax.pure in the pure-stlvec/ut directory.

@node STL Numeric Algorithms,Reference Counting,Min/Max STL Algorithms,Top
@anchor{pure-stlvec stl-numeric-algorithms}@anchor{a3}
@chapter STL Numeric Algorithms


The stlvec::numeric module provides an interface to the STL's numeric
algorithms.

@menu
* Imports: Imports<8>. 
* Operations: Operations<7>. 
* Examples: Examples<9>. 

@end menu

@node Imports<8>,Operations<7>,,STL Numeric Algorithms
@anchor{pure-stlvec id19}@anchor{a4}
@section Imports


To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::numeric;
@end example

@noindent

All of the functions are in the stl namespace.

@node Operations<7>,Examples<9>,Imports<8>,STL Numeric Algorithms
@anchor{pure-stlvec id20}@anchor{a5}
@section Operations


@geindex stl;;accumulate (function)
@anchor{pure-stlvec stl accumulate/stlvec}@anchor{a6}
@deffn {Pure Function} stl::accumulate (sv,first,last) x bin_fun

accumulate bin_fun over x and the members of sv[first,last), like foldl
@end deffn

@geindex stl;;inner_product (function)
@anchor{pure-stlvec stl inner_product/stlvec}@anchor{a7}
@deffn {Pure Function} stl::inner_product (sv1,first1,last1) (sv2,first2,last2) x bin_fun1 bin_fun2

initialize ret with x. Traverse pairs of elements of sv1[first1,last1) and
sv2[first2,last2), denoted by (e1, e2), replacing ret with (bin_fun1 ret $
bin_fun2 e1 e2). The number pairs traversed is equal to the size of
sv1[first1,last1)
@end deffn

@geindex stl;;partial_sum (function)
@anchor{pure-stlvec stl partial_sum/stlvec}@anchor{a8}
@deffn {Pure Function} stl::partial_sum (sv,first,last) (msv, p) bin_fun

accumulate bin_fun f over the elements of sv1[first1,last1), placing
itermediate results in msv[p,p+n), where n is last - first, and returns q
where m is q - n and msv[m,q) is the intermediate sequence
@end deffn

@geindex stl;;adjacent_difference (function)
@anchor{pure-stlvec stl adjacent_difference/stlvec}@anchor{a9}
@deffn {Pure Function} stl::adjacent_difference (sv,first,last) (msv, p) bin_fun

produce a sequence of new elements by applying bin_fun to adjacent elements
of sv[first,last), placing the new elements in msv[p,p+n), where n is last
- first, with the intermediate results, and returns q where m is q - n and
msv[m,q) is the new sequence
@end deffn

@node Examples<9>,,Operations<7>,STL Numeric Algorithms
@anchor{pure-stlvec id21}@anchor{aa}
@section Examples


See ut_numeric.pure in the pure-stlvec/ut directory.

@node Reference Counting,Backward Compatibilty,STL Numeric Algorithms,Top
@anchor{pure-stlvec reference-counting}@anchor{ab}
@chapter Reference Counting


The following function, also in the stl namespace, is available if you want to
observe how pure-stlvec maintains reference counts for items in its
containers.

@geindex stl;;refc (function)
@anchor{pure-stlvec stl refc/stlvec}@anchor{ac}
@deffn {Pure Function} stl::refc x

returns the x's reference count (maintained by the Pure runtime for
garbage collection purposes)
@end deffn

@node Backward Compatibilty,Module Index,Reference Counting,Top
@anchor{pure-stlvec backward-compatibilty}@anchor{ad}
@chapter Backward Compatibilty


This section documents changes in pure-stlvec that might have introduced
backward compatiblity issues.

@menu
* pure-stlvec-0.2: pure-stlvec-0 2. 
* pure-stlvec-0.3: pure-stlvec-0 3. 
* pure-stlvec-0.4: pure-stlvec-0 4. 

@end menu

@node pure-stlvec-0 2,pure-stlvec-0 3,,Backward Compatibilty
@anchor{pure-stlvec pure-stlvec-0-2}@anchor{ae}
@section pure-stlvec-0.2


Bug fixes.

@node pure-stlvec-0 3,pure-stlvec-0 4,pure-stlvec-0 2,Backward Compatibilty
@anchor{pure-stlvec pure-stlvec-0-3}@anchor{af}
@section pure-stlvec-0.3


Version 0.3 reflects some changes made to make @pxref{2,,pure-stlvec} consistent
with its sister package, @code{pure-stlmap}.

The @pxref{32,,update} function was deprecated. Please use
@pxref{31,,replace} instead.

The @pxref{31,,replace} function was added to the stlvec module. This
function is the same as @pxref{32,,update} except that
"@pxref{31,,replace} sv i x" returns x instead of sv.

The @code{stl::replace} function was removed from the stlvec/modifying
module. You can use "@pxref{65,,stl;;replace_if} (sv,first,last) (x==) y"
instead of "@code{stl::replace} (sv,first,last) x y" to replace all
instances of x in the specified range.

The function @code{null} was removed and @pxref{46,,stl;;empty} was
added to replace it.

The function @code{list} was removed. You can use
@pxref{30,,members} instead.

The function @pxref{76,,stl;;random_shuffle} was changed to take a seed as
a second parameter.

All of the tracing functions were removed.

@node pure-stlvec-0 4,,pure-stlvec-0 3,Backward Compatibilty
@anchor{pure-stlvec pure-stlvec-0-4}@anchor{b0}
@section pure-stlvec-0.4


Fixed (>) predicate operating on plain old data when passed to STL algorithms.

@node Module Index,Index,Backward Compatibilty,Top
@unnumbered Module Index


@menu
* stlvec: 0. 
* stlvec;;algorithms: 1. 
@end menu


@node Index,,Module Index,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

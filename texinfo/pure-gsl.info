This is pure-gsl.info, produced by makeinfo version 6.5 from
pure-gsl.texi.

     Pure 0.66, January 15, 2018

     Albert Gräf (Editor)

     Copyright © 2009-2018, Albert Gräf et al

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-gsl: (pure-gsl.info). pure-gsl - GNU Scientific Library Interface for Pure
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: pure-gsl.info,  Node: Top,  Next: Polynomials,  Up: (dir)

pure-gsl
********

     Pure 0.66, January 15, 2018

     Albert Gräf (Editor)

     Copyright © 2009-2018, Albert Gräf et al

  Version 0.12, January 13, 2018

     Albert Graef <<aggraef@gmail.com>> 
     Eddie Rucker <<erucker@bmc.edu>> 

  License: GPL V3 or later, see the accompanying COPYING file

  Building on Pure’s GSL-compatible matrix support, this module aims to
provide a complete wrapper for the GNU Scientific Library which provides
a wide range of mathematical routines useful for scientific programming,
number crunching and signal processing applications.

  This is still work in progress, only a small part of the interface is
finished right now.  Here is a brief summary of the operations which are
implemented:

   - Matrix-scalar and matrix-matrix arithmetic.  This is fairly
     complete and includes matrix multiplication, as well as
     element-wise exponentiation (^) and integer operations (div, mod,
     bit shifts and bitwise logical operations) which aren’t actually in
     the GSL API.

   - SVD (singular value decomposition), as well as the corresponding
     solvers, pseudo inverses and left and right matrix division.  This
     is only available for real matrices right now, as GSL doesn’t
     implement complex SVD.

   - Random distributions (p.d.f.  and c.d.f.)  and statistic functions.

   - Polynomial evaluation and roots.

   - Linear least-squares fitting.  Multi-fitting is not available yet.

  Installation instructions: Get the latest source from
‘https://bitbucket.org/purelang/pure-lang/downloads/pure-gsl-0.12.tar.gz’.
Run ‘make’ to compile the module and ‘make install’ (as root) to install
it in the Pure library directory.  This requires GNU make, and of course
you need to have Pure and GSL installed.  The ‘make install’ step is
only necessary for system-wide installation.

  ‘make’ tries to guess your Pure installation directory and
platform-specific setup.  If it gets this wrong, you can set some
variables manually.  In particular, ‘make install prefix=/usr’ sets the
installation prefix, and ‘make PIC=-fPIC’ or some similar flag might be
needed for compilation on 64 bit systems.  Please see the Makefile for
details.

  The current release requires GSL 1.11 or later and Pure 0.45 or later.
Older GSL versions might still work, but then some operations may be
missing.  The latest and greatest GSL version is always available from
‘http://www.gnu.org/software/gsl’.

  After installation, you can import the entire GSL interface as
follows:

     using gsl;


  For convenience, the different parts of the GSL interface are also
available as separate modules.  E.g., if you only need the matrix
operations:

     using gsl::matrix;


  In either case, the global ‘gsl_version’ variable reports the
installed GSL version:

     > show gsl_version
     let gsl_version = "1.11";


  (This variable used to be defined by the Pure runtime but has been
moved into pure-gsl as of Pure 0.37.)

  Most other operations are declared in separate namespaces which are in
1-1 correspondence with the module names.  Thus, e.g., the
‘gsl_poly_eval’ routine is named ‘gsl::poly::eval’ in Pure and can be
found in the ‘gsl::poly’ module and namespace.  The ‘using namespace’
declaration can be used to facilitate access to the operations in a
given namespace, e.g.:

     > using gsl::poly;
     > using namespace gsl::poly;
     > eval {1,2,3} 2;
     17


  See the ‘examples’ folder in the sources for some examples.

  If you’d like to contribute, please mail the authors or contact us at
‘http://groups.google.com/group/pure-lang’.

* Menu:

* Polynomials::
* Special Functions::
* Matrices::
* Least-Squares Fitting::
* Statistics::
* Random Number Distributions::
* Sorting::
* Module Index::
* Index::

 — The Detailed Node Listing —

Polynomials

* Routines::
* Examples::

Special Functions

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.

Matrices

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::

Least-Squares Fitting

* Routines: Routines<2>.
* Examples: Examples<11>.

Statistics

* Routines: Routines<3>.
* Examples: Examples<12>.

Random Number Distributions

* Routines: Routines<4>.
* Examples: Examples<13>.

Sorting

* Routines: Routines<5>.
* Examples: Examples<14>.



File: pure-gsl.info,  Node: Polynomials,  Next: Special Functions,  Prev: Top,  Up: Top

1 Polynomials
*************

This module provides Pure wrappers for the GSL polynomial routines.  For
detail about the routines, see Chapter 6 of the GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Polynomials.html’.

  Polynomials are represented by vectors (one row matrices).

* Menu:

* Routines::
* Examples::


File: pure-gsl.info,  Node: Routines,  Next: Examples,  Up: Polynomials

1.1 Routines
============

 -- Pure Function: gsl::poly::eval c::matrix x

     implements ‘gsl_poly_eval’, ‘gsl_poly_complex_eval’, and
     ‘gsl_complex_poly_eval’ without the ‘len’ parameter.

     GSL does not supply an integer routine for evaluating polynomials
     with ‘int’ or ‘bigint’ coefficients.  Therefore, an integer routine
     has been provided in pure-gsl using the Chinese Remainder Theorem.

 -- Pure Function: gsl::poly::dd_init x::matrix y::matrix

     implements ‘gsl_poly_dd_init’ without the ‘size’ parameter.

 -- Pure Function: gsl::poly::dd_eval dd::matrix xa::matrix x::double

     implements ‘gsl_poly_dd_eval’ without the ‘size’ parameter.

 -- Pure Function: gsl::poly::dd_taylor xp::double dd::matrix xa::matrix

     implements ‘gsl_poly_dd_taylor’ without the ‘size’ and workspace
     ‘w’ arguments.

 -- Pure Function: gsl::poly::solve_quadratic a b c

     implements ‘gsl_poly_solve_quadratic’.  This function returns a
     list of roots instead of passing them through the parameters ‘x0’
     and ‘x1’.

 -- Pure Function: gsl::poly::complex_solve_quadratic a b c

     implements ‘gsl_poly_complex_solve_quadratic’.  This function
     returns a list of roots instead of passing trhough the parameters
     ‘z0’ and ‘z1’.

 -- Pure Function: gsl::poly::solve_cubic a b c

     implements ‘gsl_poly_solve_cubic’.  This function returns a list of
     roots instead of passing them through the parameters ‘x0’, ‘x1’,
     and ‘x2’.

 -- Pure Function: gsl::poly::complex_solve_cubic a b c

     implements ‘gsl_poly_complex_colve_cubic’.  This function returns a
     list of roots instead of passing them through the parameters ‘z0’,
     ‘z1’, and ‘z2’.

 -- Pure Function: gsl::poly::complex_solve c::matrix

     implements ‘gsl_poly_complex_solve’ omitting the parametrs ‘n’ and
     ‘w’.  The GSL routines for creating and freeing the workspace are
     handled automatically.


File: pure-gsl.info,  Node: Examples,  Prev: Routines,  Up: Polynomials

1.2 Examples
============

Usage of each library routine is illustrated below.

     > using gsl::poly;
     > using namespace gsl::poly;
     > eval {1,2,3} 2;
     17
     > eval {1.0,2.0,3.0} (-2.0);
     9.0
     > eval {1, 2, 2} (1+:1);
     3.0+:6.0
     > eval {1+:2, 2+:3, 2+:3} (1+:1);
     -6.0+:11.0
     > let dd = dd_init {1,2,3} {2,4,6};
     > dd;
     {2.0,2.0,0.0}
     > dd_eval dd {1,2,3} 2;
     4.0
     > dd_taylor 0.0 dd {1,2,3};
     {0.0,2.0,0.0}
     > solve_quadratic 2 4 1;
     [-1.70710678118655,-0.292893218813452]
     > solve_quadratic 1 4 4;
     [-2.0,-2.0]
     > solve_quadratic 0 2 1;
     [-0.5]
     > solve_quadratic 1 2 8;
     []
     > complex_solve_quadratic 0 2 1;
     [-0.5+:0.0]
     > complex_solve_quadratic 2 2 3;
     [-0.5+:-1.11803398874989,-0.5+:1.11803398874989]
     > solve_cubic 3 3 1;
     [-1.0,-1.0,-1.0]
     > solve_cubic 3 2 1;
     [-2.32471795724475]
     > complex_solve_cubic 2 2 1;
     [-1.0+:0.0,-0.5+:-0.866025403784439,-0.5+:0.866025403784439]
     > complex_solve {6,1,-7,-1,1};
     [1.0+:0.0,-1.0+:0.0,-2.0+:0.0,3.0+:0.0]



File: pure-gsl.info,  Node: Special Functions,  Next: Matrices,  Prev: Polynomials,  Up: Top

2 Special Functions
*******************

This module is loaded via the command ‘using gsl::sf’ and provides Pure
wrappers for the GSL Special Functions.  For details, see Chapter 7 of
the GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Special-Functions.html’.

  To load the library, use the Pure command ‘using gsl::sf’.  Modes for
the functions must be one of:

     GSL_PREC_DOUBLE
     GSL_PREC_SINGLE
     GSL_PREC_APPROX


  Results for some of the functions are returned as a Pure list instead
of the ‘gsl_sf_result’ or ‘gsl_sf_result_e10’ structures in C. In these
cases, the resulting list is one of the following forms.

        - ‘[val, err]’ for the ‘gsl_sf_result’ struct and

        - ‘[val, err, e10]’ for the ‘gsl_sf_result_e10’ struct.

* Menu:

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.


File: pure-gsl.info,  Node: Airy Functions,  Next: Examples<2>,  Up: Special Functions

2.1 Airy Functions
==================

 -- Pure Function: gsl::sf::airy_Ai x

 -- Pure Function: gsl::sf::airy_Ai (x, mode::int)

     implements ‘gsl_sf_airy_Ai’.  The first form computes the function
     with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_e x

 -- Pure Function: gsl::sf::airy_Ai_e (x, mode::int)

     implements ‘gsl_sf_airy_Ai_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_scaled x

 -- Pure Function: gsl::sf::airy_Ai_scaled (x, mode::int)

     implements ‘gsl_sf_airy_Ai_scaled’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_scaled_e x

 -- Pure Function: gsl::sf::airy_Ai_scaled_e (x, mode::int)

     implements ‘gsl_sf_airy_Ai_scaled_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi x

 -- Pure Function: gsl::sf::airy_Bi (x, mode::int)

     implements ‘gsl_sf_airy_Bi’.  The first form computes the function
     with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_e x

 -- Pure Function: gsl::sf::airy_Bi_e (x, mode::int)

     implements ‘gsl_sf_airy_Bi_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_scaled x

 -- Pure Function: gsl::sf::airy_Bi_scaled (x, mode::int)

     implements ‘gsl_sf_airy_Bi_scaled’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_scaled_e x

 -- Pure Function: gsl::sf::airy_Bi_scaled_e (x, mode::int)

     implements ‘gsl_sf_airy_Bi_scaled_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_deriv x

 -- Pure Function: gsl::sf::airy_Ai_deriv (x, mode::int)

     implements ‘gsl_sf_airy_Ai_deriv’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_deriv_e x

 -- Pure Function: gsl::sf::airy_Ai_deriv_e (x, mode::int)

     implements ‘gsl_sf_airy_Ai_deriv_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled x

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled (x, mode::int)

     implements ‘gsl_sf_airy_Ai_deriv_scaled’.  The first form computes
     the function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled_e x

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled_e (x, mode::int)

     implements ‘gsl_sf_airy_Ai_deriv_scaled_e’.  The first form
     computes the function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_deriv x

 -- Pure Function: gsl::sf::airy_Bi_deriv (x, mode::int)

     implements ‘gsl_sf_airy_Bi_deriv’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_deriv_e x

 -- Pure Function: gsl::sf::airy_Bi_deriv_e (x, mode::int)

     implements ‘gsl_sf_airy_Bi_deriv_e’.  The first form computes the
     function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled x

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled (x, mode::int)

     implements ‘gsl_sf_airy_Bi_deriv_scaled’.  The first form computes
     the function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled_e x

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled_e (x, mode::int)

     implements ‘gsl_sf_airy_Bi_deriv_scaled_e’.  The first form
     computes the function with ‘mode = GSL_PREC_DOUBLE’.

 -- Pure Function: gsl::sf::airy_zero_Ai s

     implements ‘gsl_sf_airy_zero_Ai’.

 -- Pure Function: gsl::sf::airy_zero_Ai_e s

     implements ‘gsl_sf_airy_zero_Ai_e’.

 -- Pure Function: gsl::sf::airy_zero_Bi s

     implements ‘gsl_sf_airy_zero_Bi’.

 -- Pure Function: gsl::sf::airy_zero_Bi_e s

     implements ‘gsl_sf_airy_zero_Bi_e’.

 -- Pure Function: gsl::sf::airy_zero_Ai_deriv s

     implements ‘gsl_sf_airy_zero_Ai_deriv’.

 -- Pure Function: gsl::sf::airy_zero_Ai_deriv_e s

     implements ‘gsl_sf_airy_zero_Ai_deriv_e’.

 -- Pure Function: gsl::sf::airy_zero_Bi_deriv s

     implements ‘gsl_sf_airy_zero_Bi_deriv’.

 -- Pure Function: gsl::sf::airy_zero_Bi_deriv_e s

     implements ‘gsl_sf_airy_zero_Bi_deriv_e’.


File: pure-gsl.info,  Node: Examples<2>,  Next: Bessel Functions,  Prev: Airy Functions,  Up: Special Functions

2.2 Examples
============

The following illustrate the Airy functions.

     > using gsl::sf;
     > using namespace gsl::sf;
     > airy_Ai (-1.2); // defaults to GSL_PREC_DOUBLE
     0.52619437480212
     > airy_Ai_scaled (-1.2);
     0.52619437480212
     > airy_Ai (-1.2,GSL_PREC_APPROX);
     0.526194374771687
     > airy_Ai_scaled (-1.2, GSL_PREC_SINGLE);
     0.526194374771687
     > airy_Ai_e (-1.2);
     [0.52619437480212,1.88330586480371e-15]
     > airy_Ai_e (-1.2,GSL_PREC_APPROX);
     [0.526194374771687,1.01942940819652e-08]
     > airy_Ai_scaled_e (-1.2);
     [0.52619437480212,1.88330586480371e-15]
     > airy_Ai_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.526194374771687,1.01942940819652e-08]
     > airy_Bi (-1.2);
     -0.015821370184632
     > airy_Bi_scaled (-1.2);
     -0.015821370184632
     > airy_Bi (-1.2,GSL_PREC_APPROX);
     -0.0158213701898015
     > airy_Bi_scaled (-1.2, GSL_PREC_SINGLE);
     -0.0158213701898015
     > airy_Bi_e (-1.2);
     [-0.015821370184632,1.31448899295896e-16]
     > airy_Bi_e (-1.2,GSL_PREC_APPROX);
     [-0.0158213701898015,4.10638404843775e-10]
     > airy_Bi_scaled_e (-1.2);
     [-0.015821370184632,1.31448899295896e-16]
     > airy_Bi_scaled_e (-1.2,GSL_PREC_APPROX);
     [-0.0158213701898015,4.10638404843775e-10]
     > airy_Ai_deriv (-1.2); // defaults to GSL_PREC_DOUBLE
     0.107031569272281
     > airy_Ai_deriv_scaled (-1.2);
     0.107031569272281
     > airy_Ai_deriv (-1.2,GSL_PREC_APPROX);
     0.107031569264504
     > airy_Ai_deriv_scaled (-1.2, GSL_PREC_SINGLE);
     0.107031569264504
     > airy_Ai_deriv_e (-1.2);
     [0.107031569272281,3.02919983680384e-16]
     > airy_Ai_deriv_e (-1.2,GSL_PREC_APPROX);
     [0.107031569264504,9.25921017197604e-11]
     > airy_Ai_deriv_scaled_e (-1.2);
     [0.107031569272281,3.02919983680384e-16]
     > airy_Ai_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.107031569264504,9.25921017197604e-11]
     > airy_Bi_deriv (-1.2);
     0.601710157437464
     > airy_Bi_deriv_scaled (-1.2);
     0.601710157437464
     > airy_Bi_deriv (-1.2,GSL_PREC_APPROX);
     0.601710157441937
     > airy_Bi_deriv_scaled (-1.2, GSL_PREC_SINGLE);
     0.601710157441937
     > airy_Bi_deriv_e (-1.2);
     [0.601710157437464,1.7029557943563e-15]
     > airy_Bi_deriv_e (-1.2,GSL_PREC_APPROX);
     [0.601710157441937,5.20534347823991e-10]
     > airy_Bi_deriv_scaled_e (-1.2);
     [0.601710157437464,1.7029557943563e-15]
     > airy_Bi_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
     [0.601710157441937,5.20534347823991e-10]
     > airy_zero_Ai 2;
     -4.08794944413097
     > airy_zero_Ai_e 3;
     [-5.52055982809555,1.22581052599448e-15]
     > airy_zero_Bi 2;
     -3.27109330283635
     > airy_zero_Bi_e 3;
     [-4.83073784166202,1.07263927554824e-15]
     > airy_zero_Ai_deriv 2;
     -3.24819758217984
     > airy_zero_Ai_deriv_e 3;
     [-4.82009921117874,1.07027702504564e-15]
     > airy_zero_Bi_deriv 2;
     -4.07315508907183
     > airy_zero_Bi_deriv_e 3;
     [-5.5123957296636,1.22399773198358e-15]



File: pure-gsl.info,  Node: Bessel Functions,  Next: Examples<3>,  Prev: Examples<2>,  Up: Special Functions

2.3 Bessel Functions
====================

 -- Pure Function: gsl::sf::bessel_J0 x

     implements ‘gsl_sf_bessel_J0’.

 -- Pure Function: gsl::sf::bessel_J0_e x

     implements ‘gsl_sf_besselJ0_e’.

 -- Pure Function: gsl::sf::bessel_J1 x

     implements ‘gsl_sf_bessel_J1’.

 -- Pure Function: gsl::sf::bessel_J1_e x

     implements ‘gsl_sf_bessel_J1_e’.

 -- Pure Function: gsl::sf::bessel_Jn n x

     implements ‘gsl_sf_bessel_Jn’.

 -- Pure Function: gsl::sf::bessel_Jn_e n x

     implements ‘gsl_sf_bessel_Jn_e’.

 -- Pure Function: gsl::sf::bessel_Jn_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_Jn_array’.

 -- Pure Function: gsl::sf::bessel_Y0 x

     implements ‘gsl_sf_bessel_Y0’.

 -- Pure Function: gsl::sf::bessel_Y0_e x

     implements ‘gsl_sf_bessel_Y0_e’.

 -- Pure Function: gsl::sf::bessel_Y1 x

     implements ‘gsl_sf_bessel_Y1’.

 -- Pure Function: gsl::sf::bessel_Y1_e x

     implements ‘gsl_sf_bessel_Y1_e’.

 -- Pure Function: gsl::sf::bessel_Yn x

     implements ‘gsl_sf_bessel_Yn’.

 -- Pure Function: gsl::sf::bessel_Yn_e x

     implements ‘gsl_sf_bessel_Yn_e’.

 -- Pure Function: gsl::sf::bessel_Yn_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_Yn_array’.

 -- Pure Function: gsl::sf::bessel_I0 x

     implements ‘gsl_sf_bessel_I0’.

 -- Pure Function: gsl::sf::bessel_I0_e x

     implements ‘gsl_sf_bessel_I0_e’.

 -- Pure Function: gsl::sf::bessel_I1 x

     implements ‘gsl_sf_bessel_I1’.

 -- Pure Function: gsl::sf::bessel_I1_e x

     implements ‘gsl_sf_bessel_I1_e’.

 -- Pure Function: gsl::sf::bessel_In n::int x

     implements ‘gsl_sf_bessel_In’.

 -- Pure Function: gsl::sf::bessel_In_e n::int x

     implements ‘gsl_sf_bessel_In_e’

 -- Pure Function: gsl::sf::bessel_In_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_In_array’.

 -- Pure Function: gsl::sf::bessel_I0_scaled x

     implements ‘gsl_sf_bessel_I0_scaled’.

 -- Pure Function: gsl::sf::bessel_I0_scaled_e x

     implements ‘gsl_sf_bessel_I0_scaled_e’.

 -- Pure Function: gsl::sf::bessel_I1_scaled x

     implements ‘gsl_sf_bessel_I1_scaled’.

 -- Pure Function: gsl::sf::bessel_I1_scaled_e x

     implements ‘gsl_sf_bessel_I1_scaled_e’.

 -- Pure Function: gsl::sf::bessel_In_scaled n::int x

     implements ‘gsl_sf_bessel_In_scaled’.

 -- Pure Function: gsl::sf::bessel_In_scaled_e n::int x

     implements ‘gsl_sf_bessel_In_scaled_e’.

 -- Pure Function: gsl::sf::bessel_In_scaled_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_In_array’.

 -- Pure Function: gsl::sf::bessel_K0 x

     implements ‘gsl_sf_bessel_K0’.

 -- Pure Function: gsl::sf::bessel_K0_e x

     implements ‘gsl_sf_bessel_K0_e’.

 -- Pure Function: gsl::sf::bessel_K1 x

     implements ‘gsl_sf_bessel_K1’.

 -- Pure Function: gsl::sf::bessel_K1_e x

     implements ‘gsl_sf_bessel_K1_e’.

 -- Pure Function: gsl::sf::bessel_Kn n::int x

     implements ‘gsl_sf_bessel_Kn’.

 -- Pure Function: gsl::sf::bessel_Kn_e n::int x

     implements ‘gsl_sf_bessel_Kn_e’

 -- Pure Function: gsl::sf::bessel_Kn_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_Kn_array’.

 -- Pure Function: gsl::sf::bessel_K0_scaled x

     implements ‘gsl_sf_bessel_K0_scaled’.

 -- Pure Function: gsl::sf::bessel_K0_scaled_e x

     implements ‘gsl_sf_bessel_K0_scaled_e’.

 -- Pure Function: gsl::sf::bessel_K1_scaled x

     implements ‘gsl_sf_bessel_K1_scaled’.

 -- Pure Function: gsl::sf::bessel_K1_scaled_e x

     implements ‘gsl_sf_bessel_K1_scaled_e’.

 -- Pure Function: gsl::sf::bessel_Kn_scaled n::int x

     implements ‘gsl_sf_bessel_Kn_scaled’.

 -- Pure Function: gsl::sf::bessel_Kn_scaled_e n::int x

     implements ‘gsl_sf_bessel_Kn_scaled_e’.

 -- Pure Function: gsl::sf::bessel_Kn_scaled_array nmin::int nmax::int x

     implements ‘gsl_sf_bessel_Kn_array’.

 -- Pure Function: gsl::sf::bessel_j0 x

     implements ‘gsl_sf_bessel_j0’.

 -- Pure Function: gsl::sf::bessel_j0_e x

     implements ‘gsl_sf_bessel_j0_e’.

 -- Pure Function: gsl::sf::bessel_j1 x

     implements ‘gsl_sf_bessel_j1’.

 -- Pure Function: gsl::sf::bessel_j1_e x

     implements ‘gsl_sf_bessel_j1_e’.

 -- Pure Function: gsl::sf::bessel_j2 x

     implements ‘gsl_sf_bessel_j2’.

 -- Pure Function: gsl::sf::bessel_j2_e x

     implements ‘gsl_sf_bessel_j2_e’.

 -- Pure Function: gsl::sf::bessel_jl l::int x

     implements ‘gsl_sf_bessel_jl’.

 -- Pure Function: gsl::sf::bessel_jl_e l::int x

     implements ‘gsl_sf_bessel_jl_e’.

 -- Pure Function: gsl::sf::bessel_jl_array lmax::int x

     implements ‘gsl_sf_bessel_jl_array’.

 -- Pure Function: gsl::sf::bessel_jl_steed_array lmax::int x

     implements ‘gsl_sf_bessel_jl_steed_array’.

 -- Pure Function: gsl::sf::bessel_y0 x

     implements ‘gsl_sf_bessel_y0’.

 -- Pure Function: gsl::sf::bessel_y0_e x

     implements ‘gsl_sf_bessel_y0_e’.

 -- Pure Function: gsl::sf::bessel_y1 x

     implements ‘gsl_sf_bessel_y1’.

 -- Pure Function: gsl::sf::bessel_y1_e x

     implements ‘gsl_sf_bessel_y1_e’.

 -- Pure Function: gsl::sf::bessel_y2 x

     implements ‘gsl_sf_bessel_y2’.

 -- Pure Function: gsl::sf::bessel_y2_e x

     implements ‘gsl_sf_bessel_y2_e’.

 -- Pure Function: gsl::sf::bessel_yl l::int x

     implements ‘gsl_sf_bessel_yl’.

 -- Pure Function: gsl::sf::bessel_yl_e l::int x

     implements ‘gsl_sf_bessel_yl_e’.

 -- Pure Function: gsl::sf::bessel_yl_array lmax::int x

     implements ‘gsl_sf_bessel_yl_array’.

 -- Pure Function: gsl::sf::bessel_i0_scaled x

     implements ‘gsl_sf_bessel_i0_scaled’.

 -- Pure Function: gsl::sf::bessel_i0_scaled_e x

     implements ‘gsl_sf_bessel_i0_scaled_e’.

 -- Pure Function: gsl::sf::bessel_i1_scaled x

     implements ‘gsl_sf_bessel_i1_scaled’.

 -- Pure Function: gsl::sf::bessel_i1_scaled_e x

     implements ‘gsl_sf_bessel_i1_scaled_e’.

 -- Pure Function: gsl::sf::bessel_i2_scaled x

     implements ‘gsl_sf_bessel_i2_scaled’.

 -- Pure Function: gsl::sf::bessel_i2_scaled_e x

     implements ‘gsl_sf_bessel_i2_scaled_e’.

 -- Pure Function: gsl::sf::bessel_il_scaled l::int x

     implements ‘gsl_sf_bessel_il_scaled’.

 -- Pure Function: gsl::sf::bessel_il_scaled_e l::int x

     implements ‘gsl_sf_bessel_il_scaled_e’.

 -- Pure Function: gsl::sf::bessel_il_scaled_array lmax::int x

     implements ‘gsl_sf_bessel_il_scaled_array’.

 -- Pure Function: gsl::sf::bessel_k0_scaled x

     implements ‘gsl_sf_bessel_k0_scaled’.

 -- Pure Function: gsl::sf::bessel_k0_scaled_e x

     implements ‘gsl_sf_bessel_k0_scaled_e’.

 -- Pure Function: gsl::sf::bessel_k1_scaled x

     implements ‘gsl_sf_bessel_k1_scaled’.

 -- Pure Function: gsl::sf::bessel_k1_scaled_e x

     implements ‘gsl_sf_bessel_ik_scaled_e’.

 -- Pure Function: gsl::sf::bessel_k2_scaled x

     implements ‘gsl_sf_bessel_k2_scaled’.

 -- Pure Function: gsl::sf::bessel_k2_scaled_e x

     implements ‘gsl_sf_bessel_k2_scaled_e’.

 -- Pure Function: gsl::sf::bessel_kl_scaled l::int x

     implements ‘gsl_sf_bessel_kl_scaled’.

 -- Pure Function: gsl::sf::bessel_kl_scaled_e l::int x

     implements ‘gsl_sf_bessel_kl_scaled_e’.

 -- Pure Function: gsl::sf::bessel_kl_scaled_array lmax::int x

     implements ‘gsl_sf_bessel_il_scaled_array’.

 -- Pure Function: gsl::sf::bessel_Jnu nu x

     implements ‘gsl_sf_bessel_Jnu’.

 -- Pure Function: gsl::sf::bessel_Jnu_e nu x

     implements ‘gsl_sf_bessel_Jnu_e’.

 -- Pure Function: gsl::sf::bessel_sequence_Jnu_e nu v::matrix

     implements ‘gsl_sf_bessel_sequence_Jnu_e’.

 -- Pure Function: gsl::sf::bessel_Ynu nu x

     implements ‘gsl_sf_bessel_Ynu’.

 -- Pure Function: gsl::sf::bessel_Ynu_e nu x

     implements ‘gsl_sf_bessel_Ynu_e’.

 -- Pure Function: gsl::sf::bessel_Inu nu x

     implements ‘gsl_sf_bessel_Inu’.

 -- Pure Function: gsl::sf::bessel_Inu_e nu x

     implements ‘gsl_sf_bessel_Inu_e’.

 -- Pure Function: gsl::sf::bessel_Inu_scaled nu x

     implements ‘gsl_sf_bessel_Inu_scaled’.

 -- Pure Function: gsl::sf::bessel_Inu_scaled_e nu x

     implements ‘gsl_sf_bessel_Inu_scaled_e’.

 -- Pure Function: gsl::sf::bessel_Knu nu x

     implements ‘gsl_sf_bessel_Knu’.

 -- Pure Function: gsl::sf::bessel_Knu_e nu x

     implements ‘gsl_sf_bessel_Knu’.

 -- Pure Function: gsl::sf::bessel_lnKnu nu x

     implements ‘gsl_sf_bessel_lnKnu’.

 -- Pure Function: gsl::sf::bessel_lnKnu_e nu x

     implements ‘gsl_sf_bessel_lnKnu_e’.

 -- Pure Function: gsl::sf::bessel_Knu_scaled nu x

     implements ‘gsl_sf_bessel_Knu_scaled’.

 -- Pure Function: gsl::sf::bessel_Knu_scaled_e nu x

     implements ‘gsl_sf_bessel_Knu_scaled_e’.

 -- Pure Function: gsl::sf::bessel_zero_J0 s::int

     implements ‘gsl_sf_bessel_zero_J0’.

 -- Pure Function: gsl::sf::bessel_zero_J0_e s::int

     implements ‘gsl_sf_bessel_zero_J0_e’.

 -- Pure Function: gsl::sf::bessel_zero_J1 s::int

     implements ‘gsl_sf_bessel_zero_J1’.

 -- Pure Function: gsl::sf::bessel_zero_J1_e s::int

     implements ‘gsl_sf_bessel_zero_J1_e’.

 -- Pure Function: gsl::sf::bessel_zero_Jnu nu s::int

     implements ‘gsl_sf_bessel_zero_Jnu’.

 -- Pure Function: gsl::sf::bessel_zero_Jnu_e nu s::int

     implements ‘gsl_sf_bessel_zero_Jnu’.


File: pure-gsl.info,  Node: Examples<3>,  Next: Clausen Functions,  Prev: Bessel Functions,  Up: Special Functions

2.4 Examples
============

The following illustrate the Bessel functions.

     > using gsl::sf;
     > using namespace gsl::sf;
     > bessel_J0 (-1.2);
     0.671132744264363
     > bessel_J0_e 0.75;
     [0.864242275166649,7.07329111491049e-16]
     > bessel_J1 1.2;
     0.498289057567216
     > bessel_J1_e (-0.2);
     [-0.099500832639236,5.00768737808415e-17]
     > bessel_Jn 0 (-1.2);
     0.671132744264363
     > bessel_Jn_e 2 0.75;
     [0.0670739972996506,5.48959386474892e-17]
     > bessel_Jn_array 0 4 0.5;
     [0.938469807240813,0.242268457674874,0.0306040234586826,
      0.00256372999458724,0.000160736476364288]
     > bessel_Y0 0.25;
     -0.931573024930059
     > bessel_Y0_e 0.25;
     [-0.931573024930059,6.4279898430593e-16]
     > bessel_Y1 0.125;
     -5.19993611253477
     > bessel_Y1_e 4.325;
     [0.343041276811844,2.74577716760089e-16]
     > bessel_Yn 3 4.325;
     -0.0684784962694202
     > bessel_Yn_e 3 4.325;
     [-0.0684784962694202,3.37764590906247e-16]
     > bessel_Yn_array 2 4 1.35;
     [-1.07379345815726,-2.66813016175689,-10.7845628163178]
     > bessel_I0 1.35;
     1.51022709775726
     > bessel_I0_e 1.35;
     [1.51022709775726,2.37852166449918e-15]
     > bessel_I1 0.35;
     0.177693400031422
     > bessel_I1_e 0.35;
     [0.177693400031422,1.55520651386126e-16]
     > bessel_In 2 3.0;
     2.24521244092995
     > bessel_In_e 2 3.0;
     2.24521244092995,5.98244771302867e-15]
     > bessel_In_array 3 5 (-0.1);
     [-2.08463574223272e-05,2.60546902129966e-07,-2.6052519298937e-09]
     > bessel_I0_scaled 1.05;
     0.453242541279856
     > bessel_I0_scaled_e 1.05;
     [0.453242541279856,4.10118141697477e-16]
     > bessel_I1_scaled 1.05;
     0.210226017612868
     > bessel_I1_scaled_e 1.05;
     [0.210226017612868,2.12903131803686e-16]
     > bessel_In_scaled 3 1.05;
     0.00903732602788281
     > bessel_In_scaled_e 3 1.05;
     [0.00903732602788281,2.00668948743994e-17]
     > bessel_In_scaled_array 3 5 1.05;
     [0.00903732602788281,0.0011701685245855,0.000121756316755217]
     > bessel_K0 2.3;
     0.0791399330020936
     > bessel_K0_e 2.3;
     [0.0791399330020936,1.15144454318261e-16]
     > bessel_K1 2.3;
     0.0949824438453627
     > bessel_K1_e 2.3;
     [0.0949824438453627,9.85583638959967e-17]
     > bessel_Kn 2 3.4;
     0.0366633035851529
     > bessel_Kn_e 2 3.4;
     [0.0366633035851529,2.01761856558251e-16]
     > bessel_Kn_array 1 3 2.5;
     [0.0738908163477471,0.121460206278564,0.268227146393449]
     > bessel_K0_scaled 1.5;
     0.367433609054158
     > bessel_K0_scaled_e 1.5;
     [0.958210053294896,1.25816573186951e-14]
     > bessel_K1_scaled 1.5;
     1.24316587355255
     > bessel_K1_scaled_e 1.5;
     [1.24316587355255,2.32370553362606e-15]
     > bessel_Kn_scaled 4 1.5;
     35.4899165934682
     > bessel_Kn_scaled_e 4 1.5;
     [35.4899165934682,3.89252285021454e-14]
     > bessel_Kn_scaled_array 4 6 1.5;
     [35.4899165934682,197.498093175689,1352.14387109806]
     > bessel_j0 0.01;
     0.999983333416666
     > bessel_j0_e 0.01;
     [0.999983333416666,4.44081808400239e-16]
     > bessel_j1 0.2;
     0.0664003806703222
     > bessel_j1_e 0.2;
     [0.0664003806703222,2.94876925856268e-17]
     > bessel_j2 0.3;
     0.00596152486862022
     > bessel_j2_e 0.3;
     [0.00596152486862022,2.64744886840705e-18]
     > bessel_jl 4 0.3;
     8.53642426502516e-06
     > bessel_jl_e 4 0.3;
     [8.53642426502516e-06,1.02355215483598e-19]
     > bessel_jl_array 2 1.2;
     [0.776699238306022,0.34528456985779,0.0865121863384538]
     > bessel_jl_steed_array 2 1.2;
     [0.776699238306022,0.34528456985779,0.0865121863384538]
     > bessel_y0 1;
     -0.54030230586814
     > bessel_y0_e 3;
     [0.329997498866815,2.93096657048522e-16]
     > bessel_y1 3;
     0.062959163602316
     > bessel_y1_e 3.0;
     [0.062959163602316,1.04609100698801e-16]
     > bessel_yl 3 5;
     -0.0154429099129942
     > bessel_yl_e 3 5;
     [-0.0154429099129942,2.87258769784673e-17]
     > bessel_i0_scaled 3;
     0.166253541303889
     > bessel_i0_scaled_e 3;
     [0.166253541303889,7.38314037924188e-17]
     > bessel_i1_scaled 3;
     0.111661944928148
     > bessel_i1_scaled_e 3;
     [0.111661944928148,4.95878648934625e-17]
     > bessel_i2_scaled 3;
     0.0545915963757409
     > bessel_i2_scaled_e 3;
     [0.0545915963757409,2.42435388989563e-17]
     > bessel_il_scaled 3 1;
     0.0037027398773348
     > bessel_il_scaled_e 3 1;
     [0.0037027398773348,8.46838615599053e-17]
     > bessel_il_scaled_array 3 1;
     [0.432332358381693,0.135335283236613,0.0263265086718556,0.0037027398773348]
     > bessel_k0_scaled 3;
     0.523598775598299
     > bessel_k0_scaled_e 3;
     [0.523598775598299,2.32524566533909e-16]
     > bessel_k1_scaled 4;
     0.490873852123405
     > bessel_k1_scaled_e 4;
     [0.490873852123405,2.17991781125539e-16]
     > bessel_k2_scaled 4;
     0.760854470791278
     > bessel_k2_scaled_e 4;
     [0.760854470791278,3.37887260744586e-16]
     > bessel_kl_scaled 2 4;
     0.760854470791278
     > bessel_kl_scaled_e 2 4;
     [0.760854470791278,3.37887260744586e-16]
     > bessel_kl_scaled_array 2 4;
     [0.392699081698724,0.490873852123405,0.760854470791278]
     > bessel_Jnu 2 2.3;
     0.413914591732062
     > bessel_Jnu_e 2 2.3;
     [0.413914591732062,6.43352513956959e-16]
     > bessel_sequence_Jnu_e 2 {.1,.2,.3};
     [0.00124895865879992,0.00498335415278356,0.011165861949064]
     > bessel_Ynu 1 0.5;
     -1.47147239267024
     > bessel_Ynu_e 1 0.5;
     [-1.47147239267024,8.49504515830242e-15]
     > bessel_Inu 1.2 3.4;
     5.25626563437082
     > bessel_Inu_e 1.2 3.4;
     [5.25626563437082,1.00839636820646e-13]
     > bessel_Inu_scaled 1.2 3.4;
     0.175418771999042
     > bessel_Inu_scaled_e 1.2 3.4;
     [0.175418771999042,3.15501414592188e-15]
     > bessel_Knu 3 3;
     0.122170375757184
     > bessel_Knu_e 3 3;
     [0.122170375757184,4.34036365096743e-16]
     > bessel_lnKnu 3 3;
     -2.10233868587978
     > bessel_lnKnu_e 3 3;
     [-2.10233868587978,4.24157124665032e-15]
     > bessel_Knu_scaled 3 3;
     2.45385759319062
     > bessel_Knu_scaled_e 3 3;
     [2.45385759319062,7.6281217575122e-15]
     > bessel_zero_J0 3;
     8.65372791291102
     > bessel_zero_J0_e 3;
     [8.65372791291102,2.59611837387331e-14]
     > bessel_zero_J1 3;
     10.1734681350627
     > bessel_zero_J1_e 3;
     [10.1734681350627,2.03469362701254e-13]
     > bessel_zero_Jnu 1.2 3;
     10.46769
     > bessel_zero_Jnu_e 1.2 3;
     [10.4676986203553,2.09353972407105e-14]86203553



File: pure-gsl.info,  Node: Clausen Functions,  Next: Examples<4>,  Prev: Examples<3>,  Up: Special Functions

2.5 Clausen Functions
=====================

 -- Pure Function: gsl::sf::clausen x

     implements ‘gsl_sf_clausen’.

 -- Pure Function: gsl::sf::clausen_e x

     implements ‘gsl_sf_clausen_e’.


File: pure-gsl.info,  Node: Examples<4>,  Next: Colomb Functions,  Prev: Clausen Functions,  Up: Special Functions

2.6 Examples
============

The following illustrate the Clausen functions.

     > using gsl::sf;
     > using namespace gsl::sf;
     > clausen 4.5;
     -0.831839220823219
     > clausen_e 4.5;
     [-0.831839220823219,8.60688668835964e-16]



File: pure-gsl.info,  Node: Colomb Functions,  Next: Examples<5>,  Prev: Examples<4>,  Up: Special Functions

2.7 Colomb Functions
====================

The results of the Coulomb wave functions are returned as a list whose
elements are ordered corresponding to the argument order of the
corresponding C functions in GSL library.

 -- Pure Function: gsl::sf::hydrogenicR_1 Z r

     implements ‘gsl_sf_hydrogenicR_1’.

 -- Pure Function: gsl::sf::hydrogenicR_1_e Z r

     implements ‘gsl_sf_hydrogenicR_1_e’.

 -- Pure Function: gsl::sf::hydrogenicR n::int l::int Z r

     implements ‘gsl_sf_hydrogenicR_1’.

 -- Pure Function: gsl::sf::hydrogenicR_e n::int l::int Z r

     implements ‘gsl_sf_hydrogenicR_1_e’.

 -- Pure Function: gsl::sf::coulomb_wave_FG_e eta x L_F k::int

     implements ‘gsl_sf_coulomb_wave_FG_e’.

 -- Pure Function: gsl::sf::coulomb_wave_F_array L_min kmax::int eta x

     implements ‘gsl_sf_coulomb_wave_F_array’.

 -- Pure Function: gsl::sf::coulomb_wave_FG_array L_min kmax::int eta x

     implements ‘gsl_sf_coulomb_wave_FG_array’.

 -- Pure Function: gsl::sf::coulomb_wave_FGp_array L_min kmax::int eta x

     implements ‘gsl_sf_coulomb_wave_FGp_array’.

 -- Pure Function: gsl::sf::coulomb_wave_sphF_array L_min kmax::int eta
          x

     implements ‘gsl_sf_coulomb_wave_sphF_array’.

 -- Pure Function: gsl::sf::coulomb_CL_e L eta

     implements ‘gsl_sf_coulomb_wave_CL_e’.

 -- Pure Function: gsl::sf::coulomb_CL_array Lmin kmax eta

     implements ‘gsl_sf_coulomb_wave_CL_array’.


File: pure-gsl.info,  Node: Examples<5>,  Next: Coupling Coefficients,  Prev: Colomb Functions,  Up: Special Functions

2.8 Examples
============

The following illustrate the Coulomb functions.

     > using gsl::sf;
     > using namespace gsl::sf;
     > hydrogenicR_1 0.2 4;
     0.0803784086420537
     > hydrogenicR_1_e 0.2 4;
     [0.0803784086420537,2.85561471862841e-17]
     > hydrogenicR 3 1 0.25 3.2;
     0.00802954301593587
     > hydrogenicR_e 3 1 0.25 3.2;
     [0.00802954301593587,3.90138748076797e-17]
     > coulomb_wave_F_array 1 2 0.5 0.5;
     [{0.0387503306520188,0.0038612830533923,0.000274978904710252},0.0]
     > coulomb_wave_FG_array 1 2 0.5 0.5;
     [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
      {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
     > coulomb_wave_FGp_array 1 2 0.5 0.5;
     [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
      {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
     > coulomb_wave_sphF_array 1 2 0.5 0.5;
     [{0.0775006613040376,0.0077225661067846,0.000549957809420504},0.0]
     > coulomb_CL_e (-0.5) 3;
     [0.000143036170217949,2.92195771135514e-18]
     > coulomb_CL_array (-0.5) 4 1.5;
     [0.0159218263353144,0.0251746178646226,0.00890057150292734,
      0.00172996014234001,0.000235267570111599]



File: pure-gsl.info,  Node: Coupling Coefficients,  Next: Examples<6>,  Prev: Examples<5>,  Up: Special Functions

2.9 Coupling Coefficients
=========================

 -- Pure Function: gsl::sf::coupling_3j m::matrix

     implements ‘gsl_sf_coupling_3j’ except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_3j_e m::matrix

     implements ‘gsl_sf_coupling_3j_e’ except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_6j m::matrix

     implements ‘gsl_sf_coupling_6j’ except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_6j_e m::matrix

     implements ‘gsl_sf_coupling_6j_e’ except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_9j m::matrix

     implements ‘gsl_sf_coupling_9j’ except the input is a 3x3 integer
     matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_9j_e m::matrix

     implements ‘gsl_sf_coupling_9j_e’ except the input is a 3x3 integer
     matrix instead of six integer arguments.


File: pure-gsl.info,  Node: Examples<6>,  Next: Dawson Function,  Prev: Coupling Coefficients,  Up: Special Functions

2.10 Examples
=============

The following illustrate the coupling coefficient functions.

     > using gsl::sf;
     > using namespace gsl::sf;
     > coupling_3j {6,4,2;0,0,0};
     -0.29277002188456
     > coupling_3j_e {6,4,2;0,0,0};
     [-0.29277002188456,1.300160076865e-16]
     > coupling_6j {1,2,3;2,1,2};
     -0.166666666666667
     > coupling_6j_e {1,2,3;2,1,2};
     [-0.166666666666667,2.22044604925031e-16]
     > coupling_9j {1,2,3;2,1,2;1,1,1};
     -0.0962250448649376
     > coupling_9j_e {1,2,3;2,1,2;1,1,1};
     [-0.0962250448649376,4.84948508304183e-16]



File: pure-gsl.info,  Node: Dawson Function,  Next: Examples<7>,  Prev: Examples<6>,  Up: Special Functions

2.11 Dawson Function
====================

 -- Pure Function: gsl::sf::dawson x

     implements ‘gsl_sf_dawson’.

 -- Pure Function: gsl::sf::dawson_e x

     implements ‘gsl_sf_dawson_e’.


File: pure-gsl.info,  Node: Examples<7>,  Next: Debye Functions,  Prev: Dawson Function,  Up: Special Functions

2.12 Examples
=============

The following illustrate the dawson functions.

     > dawson 3;/**-
     0.178271030610558
     > dawson_e 3;
     [0.178271030610558,8.9920386788099e-16]



File: pure-gsl.info,  Node: Debye Functions,  Next: Examples<8>,  Prev: Examples<7>,  Up: Special Functions

2.13 Debye Functions
====================

 -- Pure Function: gsl::sf::debye_1 x

     implements ‘gsl_sf_debye_1’.

 -- Pure Function: gsl::sf::debye_1_e x

     implements ‘gsl_sf_debye_1_e’.

 -- Pure Function: gsl::sf::debye_2 x

     implements ‘gsl_sf_debye_2’.

 -- Pure Function: gsl::sf::debye_2_e x

     implements ‘gsl_sf_debye_2_e’.

 -- Pure Function: gsl::sf::debye_3 x

     implements ‘gsl_sf_debye_3’.

 -- Pure Function: gsl::sf::debye_3_e x

     implements ‘gsl_sf_debye_3_e’.

 -- Pure Function: gsl::sf::debye_4 x

     implements ‘gsl_sf_debye_4’.

 -- Pure Function: gsl::sf::debye_4_e x

     implements ‘gsl_sf_debye_4_e’.

 -- Pure Function: gsl::sf::debye_5 x

     implements ‘gsl_sf_debye_5’.

 -- Pure Function: gsl::sf::debye_5_e x

     implements ‘gsl_sf_debye_5_e’.

 -- Pure Function: gsl::sf::debye_6 x

     implements ‘gsl_sf_debye_6’.

 -- Pure Function: gsl::sf::debye_6_e x

     implements ‘gsl_sf_debye_6_e’.


File: pure-gsl.info,  Node: Examples<8>,  Next: Dilogarithm,  Prev: Debye Functions,  Up: Special Functions

2.14 Examples
=============

The following illustrate the debye functions.

     > debye_1 0.4;
     0.904437352623294
     > debye_1_e 0.4;
     [0.904437352623294,3.84040456356756e-16]
     > debye_2 1.4;
     0.613281386045505
     > debye_2_e 1.4;
     [0.613281386045505,5.15090106564116e-16]
     > debye_3 2.4;
     0.370136882985216
     > debye_3_e 2.4;
     [0.370136882985216,6.0792125556598e-16]
     > debye_4 3.4;
     0.205914922541978
     > debye_4_e 3.4;
     [0.205914922541978,7.42872979584512e-16]
     > debye_5 4.4;
     0.107477287722471
     > debye_5_e 4.4;
     [0.107477287722471,2.38647518907499e-17]
     > debye_6 5.4;
     0.0533132925698824
     > debye_6_e 5.4;
     [0.0533132925698824,1.18379289859322e-17]



File: pure-gsl.info,  Node: Dilogarithm,  Next: Examples<9>,  Prev: Examples<8>,  Up: Special Functions

2.15 Dilogarithm
================

 -- Pure Function: gsl::sf::dilog x

     implements ‘gsl_sf_dilog’.

 -- Pure Function: gsl::sf::dilog (r<:theta)

     implements ‘gsl_sf_complex_dilog_e’ except that results are
     returned as the complex value ‘re+:im’ and the error values are not
     returned.

 -- Pure Function: gsl::sf::dilog_e x

     implements ‘gsl_sf_dilog_e’.

 -- Pure Function: gsl::sf::dilog_e (r<:theta)

     implements ‘gsl_sf_complex_dilog_e’ except the results are returned
     as the list ‘[re+:im, re_error, im_error]’.


File: pure-gsl.info,  Node: Examples<9>,  Next: Examples<10>,  Prev: Dilogarithm,  Up: Special Functions

2.16 Examples
=============

The following illustrate the dilog functions.

     > dilog 1.0;
     1.64493406684823
     > dilog (1<:2);
     -0.496658586741567+:0.727146050863279
     > dilog_e (1%3);
     [0.366213229977064,8.22687466397711e-15]
     > dilog_e (1<:3);
     [-0.817454913536463+:0.0980262093913011,3.8224192909699e-15,
      1.47247478976757e-15]


 -- Pure Function: gsl::sf::multiply_e x y

     implements ‘gsl_sf_multiply_e’.

 -- Pure Function: gsl::sf::multiply_err_e x dx y dy

     implements ‘gsl_sf_multiply_err_e’.


File: pure-gsl.info,  Node: Examples<10>,  Prev: Examples<9>,  Up: Special Functions

2.17 Examples
=============

The following illustrate the multiply functions.

     > multiply_e 10.0 11.0;
     [110.0,4.88498130835069e-14]
     > multiply_err_e 10.0 0.04 11.0 0.002;
     [110.0,0.460000000000049]



File: pure-gsl.info,  Node: Matrices,  Next: Least-Squares Fitting,  Prev: Special Functions,  Up: Top

3 Matrices
**********

This module is loaded via the command ‘using gsl::matrix’ and provides
wrappers for many of the GSL matrix, BLAS, and linear algebra routines
found in Chapters 8, 12, and 13, respectively of the GSL Reference
Manual:

   * Vectors and Matrices(1)

   * BLAS Support(2)

   * Linear Algebra(3)

  It also contains some general utility functions for creating various
types of matrices.

* Menu:

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::

   ---------- Footnotes ----------

   (1) 
http://www.gnu.org/software/gsl/manual/html_node/Vectors-and-Matrices.html

   (2) 
http://www.gnu.org/software/gsl/manual/html_node/BLAS-Support.html

   (3) 
http://www.gnu.org/software/gsl/manual/html_node/Linear-Algebra.html


File: pure-gsl.info,  Node: Matrix Creation,  Next: Matrix Operators and Functions,  Up: Matrices

3.1 Matrix Creation
===================

The utility functions ‘zeros’ and ‘ones’ create matrices with all
elements zero or one, respectively, and ‘eye’ creates identity matrices.
These functions can be invoked either with a pair *(n,m)* denoting the
desired number of rows or columns, or an integer *n* in which case a
square *n* x *n* matrix is created.  The result is always a double
matrix.  Analogous functions ‘izeros’, ‘czeros’, etc.  are provided to
create integer and complex matrices, respectively.

 -- Pure Function: gsl::matrix::zeros (n :: int, m :: int)

     creates an *n* x *m* double matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::zeros n :: int

     creates an *n* x *n* double matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::izeros (n :: int, m :: int)

     creates an *n* x *m* integer matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::izeros n :: int

     creates an *n‘x‘n* integer matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::czeros (n :: int, m :: int)

     creates an *n* x *m* complex matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::czeros n :: int

     creates an *n* x *n* complex matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::ones (n :: int, m :: int)

     creates an *n* x *m* double matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::ones n :: int

     creates an *n* x *n* double matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::iones (n :: int, m :: int)

     creates an *n* x *m* integer matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::iones n :: int

     creates an *n* x *n* integer matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::cones (n :: int, m :: int)

     creates an *n* x *m* complex matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::cones n :: int

     creates an *n* x *n* complex matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::eye (n :: int, m :: int)

     creates an *n* x *m* identity matrix with double entries.

 -- Pure Function: gsl::matrix::eye n :: int

     creates an *n* x *n* identity matrix with double entries.

 -- Pure Function: gsl::matrix::ieye (n :: int, m :: int)

     creates an *n* x *m* identity matrix with integer entries.

 -- Pure Function: gsl::matrix::ieye n :: int

     creates an *n* x *n* identity matrix with integer entries.

 -- Pure Function: gsl::matrix::ceye (n :: int, m :: int)

     creates an *n* x *m* identity matrix with complex entries.

 -- Pure Function: gsl::matrix::ceye n :: int

     creates an *n* x *n* identity matrix with complex entries.


File: pure-gsl.info,  Node: Matrix Operators and Functions,  Next: Singular Value Decomposition,  Prev: Matrix Creation,  Up: Matrices

3.2 Matrix Operators and Functions
==================================

The following operations are defined for constant ‘a’ and matrices ‘x’
and ‘y’.  Some operators are not defined in the GSL library but are
provided here for convenience.

 -- Pure Function: a + x

 -- Pure Function: x + a

     returns a matrix with entries ‘a + x!(i,j)’.

 -- Pure Function: x + y

     adds matrix ‘x’ to matrix ‘y’.

 -- Pure Function: - x

     returns a matrix with entries ‘- x!(i,j)’.  Note that ‘neg x’ is
     equivalent to ‘- x’.

 -- Pure Function: a - x

     returns a matrix with entries ‘a - x!(i,j)’.

 -- Pure Function: x - a

     returns a matrix with entries ‘x!(i,j) - a’.

 -- Pure Function: x - y

     subtracts matrix ‘y’ from matrix ‘x’.

 -- Pure Function: a * x

 -- Pure Function: x * a

     returns a matrix with entries ‘a * x!(i,j)’.

 -- Pure Function: x .* y

     multiplies, element-wise, matrix ‘x’ to matrix ‘y’.

 -- Pure Function: x * y

     multiplies matrix ‘x’ to matrix ‘y’.

 -- Pure Function: a / x

     returns a matrix with entries ‘a / x!(i,j)’.  Note that matrix ‘x’
     must not have any zero entries.

 -- Pure Function: x / a

     returns a matrix with entries ‘x!(i,j) / a’.  Note that ‘a’ must be
     nonzero.

 -- Pure Function: x ./ y

     divides, element-wise, matrix *x* by matrix *y*.

 -- Pure Function: x / y

     right divides matrix *x* by matrix *y*.

 -- Pure Function: x \ y

     left divides matrix *x* by matrix *y*.

 -- Pure Function: a div x

     returns an integer matrix with entries ‘a div x!(i,j)’.  Note that
     *a* must be an integer and matrix ‘x’ must be an integer matrix
     with nonzero entries.

 -- Pure Function: x div a

     returns an integer matrix with entries ‘x!(i,j) div a’.  Note that
     ‘a’ must be a nonzero integer and matrix ‘x’ must have integer
     entries.

 -- Pure Function: x div y

     computes the quotient integer matrix ‘x’ by integer matrix ‘y’.

 -- Pure Function: a mod x

     returns an integer matrix with entries ‘a mod x!(i,j)’.  Note that
     ‘a’ must be an integer and matrix ‘x’ must be an integer matrix
     with nonzero entries.

 -- Pure Function: x mod a

     returns an integer matrix with entries ‘a mod x!(i,j)’.  Note that
     ‘a’ must be an integer and matrix ‘x’ must be an integer matrix
     with nonzero entries.

 -- Pure Function: x mod y

     returns the remainder integer matrix ‘x’ mod integer matrix ‘y’.

 -- Pure Function: not x

     returns a matrix with integer entries ‘not x!(i,j)’.  Note that ‘x’
     must be a matrix with integer entries and ‘not’ is the bitwise
     negation operation.

 -- Pure Function: a ^ x

     returns a matrix with entries ‘a ^ x!(i,j)’.  Note that ‘0^0’ is
     defined as 1.

 -- Pure Function: x ^ a

     returns a matrix with entries ‘x!(i,j) ^ a’.  Note that ‘0^0’ is
     defined as 1.

 -- Pure Function: x .^ y

     returns a matrix with entries ‘x!(i,j) ^ y!(i,j)’.

 -- Pure Function: x ^ y

     returns a matrix with entries ‘x!(i,j) ^ y!(i,j)’.

 -- Pure Function: x << a

     returns an integer matrix with entries ‘x!(i,j) << a’.  Note that
     ‘a’ must be an integer and matrix ‘x’ must have integer entries.

 -- Pure Function: x << y

     returns an integer matrix with entries ‘x!(i,j) << y!(i,j)’.  Note
     that ‘x’ and ‘y’ must have integer entries.

 -- Pure Function: x >> a

     returns an integer matrix with entries ‘x!(i,j) >> a’.  Note that
     ‘a’ must be an integer and matrix ‘x’ must have integer entries.

 -- Pure Function: x >> y

     returns an integer matrix with entries ‘x!(i,j) >> y!(i,j)’.  Note
     that ‘x’ and ‘y’ must have integer entries.

 -- Pure Function: x and a

 -- Pure Function: a and x

     returns an integer matrix with entries ‘a and x!(i,j)’.  Note that
     ‘a’ must be an integer, matrix ‘x’ must have integer entries, and
     ‘and’ is a bitwise operator.

 -- Pure Function: x and y

     returns an integer matrix with entries ‘x!(i,j) and y!(i,j)’.  Note
     that ‘x’ and ‘y’ must be matrices with integer entries.

 -- Pure Function: x or a

 -- Pure Function: a or x

     returns an integer matrix with entries ‘a or x!(i,j)’.  Note that
     ‘a’ must be an integer, matrix ‘x’ must have integer entries, and
     ‘or’ is a bitwise operator.

 -- Pure Function: x or y

     returns an integer matrix with entries ‘x!(i,j) or y!(i,j)’.  Note
     that ‘x’ and ‘y’ must be matrices with integer entries.

  The ‘pow’ function computes powers of matrices by repeated matrix
multiplication.

 -- Pure Function: pow x :: matrix k :: int

 -- Pure Function: pow x :: matrix k :: bigint

     Raises matrix ‘x’ to the ‘k’ th power.  Note ‘x’ must be a square
     matrix and ‘k’ a nonnegative integer.


File: pure-gsl.info,  Node: Singular Value Decomposition,  Prev: Matrix Operators and Functions,  Up: Matrices

3.3 Singular Value Decomposition
================================

For a given *n* x *m* matrix ‘x’, these functions yield a singular-value
decomposition ‘u’, ‘s’, ‘v’ of the matrix such that ‘x == u*s*transpose
v’, where ‘u’ and ‘v’ are orthogonal matrices of dimensions *n* x *m*
and *n* x *n*, respectively, and *s* is a *n* x *n* diagonal matrix
which has the singular values in its diagonal, in descending order.
Note that GSL implements this only for double matrices right now.  Also,
GSL only handles the case of square or overdetermined systems, but we
work around that in our wrapper functions by just adding a suitable
number of zero rows in the underdetermined case.

 -- Pure Function: gsl::matrix::svd x

     singular-value decomposition of matrix ‘x’.

 -- Pure Function: gsl::matrix::svd_mod x

     This uses the modified Golub-Reinsch algorithm, which is faster if
     ‘n > m’ but needs *O(m^2)* extra memory as internal workspace.

 -- Pure Function: gsl::matrix::svd_jacobi x

     This uses one-sided Jacobi orthogonalization which provides better
     relative accuracy but is slower.

 -- Pure Function: gsl::matrix::svd_solve (u, s, v) b

     Solve the system ‘Ax=b’, using the SVD of ‘A’.  ‘svd_solve’ takes
     the result ‘(u,s,v)’ of a ‘svd’ call, and a column vector ‘b’ of
     the appropriate dimension.  The result is another column vector
     solving the system (possibly in the least-squares sense).

 -- Pure Function: gsl::matrix::pinv x

     Computes the pseudo inverse of a matrix from its singular value
     decomposition.


File: pure-gsl.info,  Node: Least-Squares Fitting,  Next: Statistics,  Prev: Matrices,  Up: Top

4 Least-Squares Fitting
***********************

This module is loaded via the command ‘using gsl::fit’ and provides Pure
wrappers for the GSL least-squares fitting routines found in Chapter 36
of the GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Least_002dSquares-Fitting.html’.

* Menu:

* Routines: Routines<2>.
* Examples: Examples<11>.


File: pure-gsl.info,  Node: Routines<2>,  Next: Examples<11>,  Up: Least-Squares Fitting

4.1 Routines
============

 -- Pure Function: gsl::fit::linear x::matrix y::matrix

     implements ‘gsl_fit_linear’ without the ‘xstride’, ‘ystride’, and
     ‘n’ parameters.  Results are returned as a list ‘[c0, c1, cov00,
     cov01, cov11, sumsq]’.

 -- Pure Function: gsl::fit::wlinear x::matrix w::matrix y::matrix

     implements ‘gsl_fit_wlinear’ without the ‘xstride’, ‘wstride’,
     ‘ystride’, and ‘n’ parameters.  Results are given as a list ‘[c0,
     c1, cov00, cov01, cov11, chisq]’.

 -- Pure Function: gsl::fit::linear_est x c0::double c1::double
          cov00::double cov01::double cov11::double

     implements ‘gsl_fit_linear_est’.  Results are returned as a list
     ‘[y, y_err]’.

 -- Pure Function: gsl::fit::mul x::matrix y::matrix

     implements ‘gsl_fit_mul’ omitting the parameters ‘xstride’,
     ‘ystride’, and ‘n’.  Results are returned as a list ‘[c1, cov11,
     sumsq]’.

 -- Pure Function: gsl::fit::wmul x::matrix w::matrix y::matrix

     implements ‘gsl_fit_wmul’ omitting the parametrs ‘xstride’,
     ‘ystride’, and ‘n’.  Results are returned as a list ‘[c1, cov11,
     sumsq]’.

 -- Pure Function: gsl::fit::mul_est x c1::double cov11::double

     implements ‘gsl_fit_mul_est’.  Results are returned as a list ‘[y,
     y_err]’.


File: pure-gsl.info,  Node: Examples<11>,  Prev: Routines<2>,  Up: Least-Squares Fitting

4.2 Examples
============

Usage of each implemented library routine is illustrated below.

     > using gsl::fit;
     > using namespace gsl::fit;


  The following code determines the equation for the least-squares line
through the points (1,0.01), (2,1.11), (3,1.9), (4,2.85), and (5,4.01).

     > Y x = '(a + b * x)
     > when
     >   a:b:_ = linear {1,2,3,4,5} {0.01,1.11,1.9,2.85,4.01}
     > end;
     > Y x;
     -0.946+0.974*x
     > eval $ Y 2;
     1.002


  The following code illustrates estimating y-values without
constructing an equation for the least-squares line determined by the
points ‘{x1,x2,x3,...,xn}’, ‘{y1,y2,y3,...,yn}’.  Here we estimate the
*y*-value at *x* = 1, *x* = 2, and *x* = 3.  Compare the output above at
*x* = 2 to the output at *x* = 2 below.

     > let c0:c1:cov00:cov01:cov11:_ = linear {1,2,3,4,5}
     >   {0.01,1.11,1.9,2.85,4.01};
     > linear_est 1 c0 c1 cov00 cov01 cov11;
     [0.028,0.0838570211729465]
     > linear_est 2 c0 c1 cov00 cov01 cov11;
     [1.002,0.0592958683214944]
     > linear_est 3 c0 c1 cov00 cov01 cov11;
     [1.976,0.0484148737476408]


  Next, we determine a least-squares line through the points (1,0.01),
(2,1.11), (3,1.9), (4,2.85), and (5,4.01) using weights 0.1, 0.2, 0.3,
0.4, and 0.5.

     > W x = '(a + b * x)
     > when
     >   a:b:_ = wlinear (matrix (1..5))
     >           {0.1, 0.2, 0.3, 0.4, 0.5}
     >           {0.01, 1.11, 1.9, 2.85, 4.01};
     > end;
     > W u;
     -0.99+0.986*u
     > eval $ W 2;
     0.982


  The least-squares slope for ‘Y = c1 * X’ using the points (1,3),
(2,5), and (3,7) is calculated below.  Also, the *y*-values and standard
error about *x* = 1, 2, and 3 are given.

     > let c1:cov11:sumsq:_ = mul {1,2,3} {3,5,7};
     > mul_est 1 c1 cov11;
     [2.42857142857143,0.123717914826348]
     > mul_est 2 c1 cov11;
     [4.85714285714286,0.247435829652697]
     > mul_est 3 c1 cov11;
     [7.28571428571428,0.371153744479045]


  The least-squares slope for ‘Y = c1 * X’ using the points (1,3),
(2,5), and (3,7), and weights 0.4, 0.9, and 0.4 is calculated below.
The approximation of y-values and standard error about *x* = 1, 2, and 3
follows.

     > let c1:cov11:sumsq:_ = wmul {1,2,3} {0.4,0.9,0.4} {3,5,7};
     > mul_est 1 c1 cov11;
     [2.44736842105263,0.362738125055006]
     > mul_est 2 c1 cov11;
     [4.89473684210526,0.725476250110012]
     > mul_est 3 c1 cov11;
     [7.34210526315789,1.08821437516502]



File: pure-gsl.info,  Node: Statistics,  Next: Random Number Distributions,  Prev: Least-Squares Fitting,  Up: Top

5 Statistics
************

This module is loaded via the command ‘using gsl::stats’ and provides
Pure wrappers for the GSL Statistics routines found in Chapter 20 of the
GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Statistics.html’.

* Menu:

* Routines: Routines<3>.
* Examples: Examples<12>.


File: pure-gsl.info,  Node: Routines<3>,  Next: Examples<12>,  Up: Statistics

5.1 Routines
============

 -- Pure Function: gsl::stats::mean data::matrix

     implements ‘gsl_stats_mean’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::variance data::matrix

     implements ‘gsl_stats_variance’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::variance data::matrix mean

     implements ‘gsl_stats_variance_m’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::sd data::matrix

     implements ‘gsl_stats_sd’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::sd_m data::matrix mean

     implements ‘gsl_stats_sd_m’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::tss data::matrix

     implements ‘gsl_stats_tss’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::tss_m data::matrix mean

     implements ‘gsl_stats_tss_m’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::variance_with_fixed_mean data::matrix
          mean

     implements ‘gsl_stats_variance_with_fixed_mean’ without ‘stride’
     and ‘n’ arguments.

 -- Pure Function: gsl::stats::sd_with_fixed_mean data::matrix mean

     implements ‘gsl_stats_sd_with_fixed_mean’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::absdev data::matrix

     implements ‘gsl_stats_absdev’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::absdev_m data::matrix mean

     implements ‘gsl_stats_absdev_m’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::skew data::matrix mean

     implements ‘gsl_stats_skew’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::skew_m_sd data::matrix mean sd

     implements ‘gsl_stats_skew_m_sd’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::kurtosis data::matrix

     implements ‘gsl_stats_kurtosis’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::kurtosis_m_sd data::matrix mean sd

     implements ‘gsl_stats_kurtosis_m_sd’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::lag1_autocorrelation data::matrix

     implements ‘gsl_stats_lag1_autocorrelation’ without ‘stride’ and
     ‘n’ arguments.

 -- Pure Function: gsl::stats::lag1_autocorrelation_m data::matrix mean

     implements ‘gsl_stats_lag1_autocorrelation_m’ without ‘stride’ and
     ‘n’ arguments.

 -- Pure Function: gsl::stats::covariance d1::matrix d2::matrix

     implements ‘gsl_stats_covariance’ without ‘stride1’, ‘stride2’, and
     ‘n’ arguments.

 -- Pure Function: gsl::stats::covariance_m d1::matrix d2::matrix mean1
          mean2

     implements ‘gsl_stats_covariance_m’ without ‘stride1’, ‘stride2’,
     and ‘n’ arguments.

 -- Pure Function: gsl::stats::correlation d1::matrix d2::matrix

     implements ‘gsl_stats_correlation’ without ‘stride1’, ‘stride2’,
     and ‘n’ arguments.

 -- Pure Function: gsl::stats::wmean weight::matrix data::matrix

     implements ‘gsl_stats_wmean’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wvariance weight::matrix data::matrix

     implements ‘gsl_stats_wvariance’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wvariance_m weight::matrix data::matrix
          mean

     implements ‘gsl_stats_wvariance_m’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wsd weight::matrix data::matrix

     implements ‘gsl_stats_wsd’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wsd_m weight::matrix data::matrix mean

     implements ‘gsl_stats_wsd_m’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wvariance_with_fixed_mean weight::matrix
          data::matrix mean

     implements ‘gsl_stats_wvariance_with_fixed_mean’ without ‘stride’
     and ‘n’ arguments.

 -- Pure Function: gsl::stats::wsd_with_fixed_mean weight::matrix
          data::matrix mean

     implements ‘gsl_stats_wsd_with_fixed_mean’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wtss weight::matrix data::matrix

     implements ‘gsl_stats_wtss’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wtss_m weight::matrix data::matrix mean

     implements ‘gsl_stats_wtss_m’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wabsdev weight::matrix data::matrix

     implements ‘gsl_stats_wabsdev’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wabsdev_m weight::matrix data::matrix
          mean

     implements ‘gsl_stats_wabsdev_m’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wskew weight::matrix data::matrix

     implements ‘gsl_stats_wskew’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::wskew_m_sd weight::matrix data::matrix
          mean sd

     implements ‘gsl_stats_wskew_m_sd’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wkurtosis weight::matrix data::matrix

     implements ‘gsl_stats_wkurtosis’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::wkurtosis_m_sd weight::matrix
          data::matrix

     implements ‘gsl_stats_wkurtosis_m_sd’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::max data::matrix

     implements ‘gsl_stats_max’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::min data::matrix

     implements ‘gsl_stats_min’ without ‘stride’ and ‘n’ arguments.

 -- Pure Function: gsl::stats::minmax data::matrix

     implements ‘gsl_stats_minmax’ without ‘stride’ and ‘n’ arguments.
     Results are returned as a list ‘[min, max]’.

 -- Pure Function: gsl::stats::min_index data::matrix

     implements ‘gsl_stats_min_index’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::max_index data::matrix

     implements ‘gsl_stats_max_index’ without ‘stride’ and ‘n’
     arguments.

 -- Pure Function: gsl::stats::minmax_index data::matrix

     implements ‘gsl_stats_minmax_index’ without ‘stride’ and ‘n’
     arguments.  Results are returned as a list ‘[min_index,
     max_index]’.

 -- Pure Function: gsl::stats::median_from_sorted_data data::matrix

     implements ‘gsl_stats_median_from_sorted_data’ without ‘stride’ and
     ‘n’ arguments.

 -- Pure Function: gsl::stats::quantile_from_sorted_data data::matrix
          f::double

     implements ‘gsl_stats_quantile_from_sorted_data’ without ‘stride’
     and ‘n’ arguments.


File: pure-gsl.info,  Node: Examples<12>,  Prev: Routines<3>,  Up: Statistics

5.2 Examples
============

The following illustrates the use of each function in the ‘stats’
module.

     > using gsl::stats;
     > using namespace gsl::stats;
     > mean {1,2,3,4,5};
     3.0
     > variance {1,2,3,4,5};
     2.5
     > variance_m {1,2,3,4,5}  4;
     3.75
     > sd {1,2,3,4,5};
     1.58113883008419
     > sd_m {1,2,3,4,5} 4;
     1.93649167310371
     > tss {1,2,3,4,5};
     10.0
     > tss_m {1,2,3,4,5} 4;
     15.0
     > variance_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
     6.314
     > sd_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
     2.51276739870606
     > absdev {2,2,3,4,4};
     0.8
     > absdev_m {2,2,3,4,4} 4;
     1.0
     > skew {1,1,1,1,2,2,2,2,2,2,2,2,3,30};
     2.94796699504537
     > skew_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
     0.0
     > kurtosis  {1,2,2,3,3,3,3,3,3,3,4,4,5};
     -0.230769230769231
     > kurtosis_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
     -0.230769230769231
     > lag1_autocorrelation {1,2,3,4,5};
     0.4
     > lag1_autocorrelation_m {1,2,3,4,5} 2.5;
     0.444444444444444
     > covariance {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0};
     3.75
     > covariance_m {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0} 3 6;
     3.75
     > correlation {1,2,3,4} {2,3,4,5};
     1.0
     > wmean {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
     3.93333333333333
     > wvariance {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
     2.7752808988764
     > wvariance_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
     3.87640449438202
     > wsd {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
     1.66591743459164
     > wsd_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
     1.96885867811329
     > wvariance_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
     1.25
     > wsd_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
     1.11803398874989
     > wtss {1,1,2,2} {2,3,4,5};
     6.83333333333333
     > wtss_m {1,1,2,2} {2,3,4,5} 3.1;
     10.06
     > wabsdev {1,1,2,2} {2,3,4,5};
     0.888888888888889
     > wabsdev_m {1,1,2,2} {2,3,4,5} 3.1;
     1.13333333333333
     > wskew {1,1,2,2} {2,3,4,5};
     -0.299254338484713
     > wskew_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
     1.33526234567901
     > wkurtosis {1,1,2,2} {2,3,4,5};
     -1.96206512878137
     > wkurtosis_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
     -0.681921939300412
     > min {9,4,2,1,9};
     1
     > max {9.1,4.2,2.6,1.1,9.2};
     9.2
     > minmax {9.0,4.0,2.0,1.0,9.0};
     [1.0,9.0]
     > min_index {9.1,4.2,2.6,1.1,9.2};
     3
     > max_index {9,4,2,1,9};
     0
     > minmax_index {9,4,2,1,0,9};
     [4,0]
     > median_from_sorted_data {1.0,2.0,3.0};
     2.0
     > quantile_from_sorted_data {1.0,2.0,3.0} 0.25;
     1.5



File: pure-gsl.info,  Node: Random Number Distributions,  Next: Sorting,  Prev: Statistics,  Up: Top

6 Random Number Distributions
*****************************

This module is loaded via the command ‘using gsl::randist’ and provides
Pure wrappers for the GSL random distribution routines found in Chapter
19 of the GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html’.

  There are two namespaces provided by randist.pure, ‘gsl::ran’ for
probability densitity functions and ‘gsl::cdf’ for cumulative
distribution functions.  The two namespaces minimize typing of the
prefixes ‘gsl_ran_’ and ‘gsl_cdf_’ respectively.

* Menu:

* Routines: Routines<4>.
* Examples: Examples<13>.


File: pure-gsl.info,  Node: Routines<4>,  Next: Examples<13>,  Up: Random Number Distributions

6.1 Routines
============

 -- Pure Function: gsl::ran::ugaussian_pdf x

     implements ‘gsl_ran_ugaussian’.

 -- Pure Function: gsl::ran::gaussian_pdf x sigma

     implements ‘gsl_ran_gaussian_pdf’.

 -- Pure Function: gsl::ran::gaussian_tail_pdf x a sigma

     implements ‘gsl_ran_gaussian_tail_pdf’.

 -- Pure Function: gsl::ran::ugaussian_tail_pdf x a

     implements ‘gsl_ran_ugaussian_tail_pdf’.

 -- Pure Function: gsl::ran::bivariate_gaussian_pdf x a

     implements ‘gsl_ran_bivariate_gaussian_pdf’.

 -- Pure Function: gsl::ran::exponential_pdf x mu

     implements ‘gsl_ran_exponential_pdf’.

 -- Pure Function: gsl::ran::laplace_pdf x a

     implements ‘gsl_ran_laplace_pdf’.

 -- Pure Function: gsl::ran::exppow_pdf x a b

     implements ‘gsl_ran_exppow_pdf’.

 -- Pure Function: gsl::ran::cauchy_pdf x a

     implements ‘gsl_ran_cauchy_pdf’.

 -- Pure Function: gsl::ran::rayleigh_pdf x sigma

     implements ‘gsl_ran_rayleigh_pdf’.

 -- Pure Function: gsl::ran::rayleigh_tail_pdf x a sigma

     implements ‘gsl_ran_rayleigh_tail_pdf’.

 -- Pure Function: gsl::ran::landau_pdf x

     implements ‘gsl_ran_landau_pdf’.

 -- Pure Function: gsl::ran::gamma_pdf x a b

     implements ‘gsl_ran_gamma_pdf’.

 -- Pure Function: gsl::ran::flat_pdf x a b

     implements ‘gsl_ran_flat_pdf’.

 -- Pure Function: gsl::ran::lognormal_pdf x zeta sigma

     implements ‘gsl_ran_lognormal_pdf’.

 -- Pure Function: gsl::ran::chisq_pdf x nu

     implements ‘gsl_ran_chisq_pdf’.

 -- Pure Function: gsl::ran::fdist_pdf x nu1 nu2

     implements ‘gsl_ran_fdist_pdf’.

 -- Pure Function: gsl::ran::tdist_pdf x nu

     implements ‘gsl_ran_tdist_pdf’.

 -- Pure Function: gsl::ran::beta_pdf x a b

     implements ‘gsl_ran_beta_pdf’.

 -- Pure Function: gsl::ran::logistic_pdf x a

     implements ‘gsl_ran_logistic_pdf’.

 -- Pure Function: gsl::ran::pareto_pdf x a b

     implements ‘gsl_ran_pareto_pdf’.

 -- Pure Function: gsl::ran::weibull_pdf x a b

     implements ‘gsl_ran_weibull_pdf’.

 -- Pure Function: gsl::ran::gumbel1_pdf x a b

     implements ‘gsl_ran_gumbel1_pdf’.

 -- Pure Function: gsl::ran::gumbel2_pdf x a b

     implements ‘gsl_ran_gumbel2_pdf’.

 -- Pure Function: gsl::ran::dirichlet_pdf alpha::matrix theta::matrix

     implements ‘gsl_ran_dirichlet_pdf’.

 -- Pure Function: gsl::ran::dirichlet_lnpdf alpha::matrix theta::matrix

     implements ‘gsl_ran_dirichlet_lnpdf’.

 -- Pure Function: gsl::ran::discrete_preproc p::matrix

     implements ‘gsl_ran_discrete_preproc’ without the ‘K’ parameter.

 -- Pure Function: gsl::ran::discrete_pdf k::int p::pointer

     implements ‘gsl_ran_discrete_pdf’ without the ‘K’ parameter.

 -- Pure Function: gsl::ran::discrete_free p::pointer

     implements ‘gsl_ran_discrete_free’

 -- Pure Function: gsl::ran::poisson_pdf k::int mu

     implements ‘gsl_ran_poisson_pdf’.

 -- Pure Function: gsl::ran::bernoulli_pdf k::int p

     implements ‘gsl_ran_bernoulli_pdf’.

 -- Pure Function: gsl::ran::binomial_pdf k::int p n::int

     implements ‘gsl_ran_binomial_pdf’.

 -- Pure Function: gsl::ran::multinomial_pdf p::matrix n::matrix

     implements ‘gsl_ran_multinomial_pdf’.

 -- Pure Function: gsl::ran::multinomial_lnpdf p::matrix n::matrix

     implements ‘gsl_ran_multinomial_lnpdf’.

 -- Pure Function: gsl::ran::negative_binomial_pdf k::int p n

     implements ‘gsl_ran_negative_binomial_pdf’.

 -- Pure Function: gsl::ran::pascal_pdf k::int p n::int

     implements ‘gsl_ran_pascal_pdf’.

 -- Pure Function: gsl::ran::geometric_pdf k::int p

     implements ‘gsl_ran_geometric_pdf’.

 -- Pure Function: gsl::ran::hypergeometric_pdf k::int n1::int n2::int
          t::int

     implements ‘gsl_ran_hypergeometric_pdf’.

 -- Pure Function: gsl::ran::logarithmic_pdf k::int p

     implements ‘gsl_ran_logarithmic_pdf’.

 -- Pure Function: gsl::cdf::ugaussian_P x

     implements ‘gsl_cdf_ugaussian_P’.

 -- Pure Function: gsl::cdf::ugaussian_Q x

     implements ‘gsl_cdf_ugaussian_Q’.

 -- Pure Function: gsl::cdf::ugaussian_Pinv p

     implements ‘gsl_cdf_ugaussian_Pinv’.

 -- Pure Function: gsl::cdf::ugaussian_Qinv q

     implements ‘gsl_cdf_ugaussian_Qinv’.

 -- Pure Function: gsl::cdf::gaussian_P x sigma

     implements ‘gsl_cdf_gaussian_P’.

 -- Pure Function: gsl::cdf::gaussian_Q x sigma

     implements ‘gsl_cdf_gaussian_Q’.

 -- Pure Function: gsl::cdf::gaussian_Pinv p sigma

     implements ‘gsl_cdf_gaussian_Pinv’.

 -- Pure Function: gsl::cdf::guassian_Qinv q sigma

     implements ‘gsl_cdf_gaussian_Qinv’.

 -- Pure Function: gsl::cdf::exponential_P x mu

     implements ‘gsl_cdf_exponential_P’.

 -- Pure Function: gsl::cdf::exponential_Q x mu

     implements ‘gsl_cdf_exponential_Q’.

 -- Pure Function: gsl::cdf::exponential_Pinv p mu

     implements ‘gsl_cdf_exponential_Pinv’.

 -- Pure Function: gsl::cdf::exponential_Qinv q mu

     implements ‘gsl_cdf_exponential_Qinv’.

 -- Pure Function: gsl::cdf::laplace_P x a

     implements ‘gsl_cdf_laplace_P’.

 -- Pure Function: gsl::cdf::laplace_Q x a

     implements ‘gsl_cdf_laplace_Q’.

 -- Pure Function: gsl::cdf::laplace_Pinv p a

     implements ‘gsl_cdf_laplace_Pinv’.

 -- Pure Function: gsl::cdf::laplace_Qinv q a

     implements ‘gsl_cdf_laplace_Qinv’.

 -- Pure Function: gsl::cdf::exppow_P x a b

     implements ‘gsl_cdf_exppow_P’.

 -- Pure Function: gsl::cdf::exppow_Q x a b

     implements ‘gsl_cdf_exppow_Q’.

 -- Pure Function: gsl::cdf::cauchy_P x a

     implements ‘gsl_cdf_cauchy_P’.

 -- Pure Function: gsl::cdf::cauchy_Q x a

     implements ‘gsl_cdf_cauchy_Q’.

 -- Pure Function: gsl::cdf::cauchy_Pinv p a

     implements ‘gsl_cdf_cauchy_Pinv’.

 -- Pure Function: gsl::cdf::cauchy_Qinv q a

     implements ‘gsl_cdf_cauchy_Qinv’.

 -- Pure Function: gsl::cdf::rayleigh_P x sigma

     implements ‘gsl_cdf_rayleigh_P’.

 -- Pure Function: gsl::cdf::rayleigh_Q x sigma

     implements ‘gsl_cdf_rayleigh_Q’.

 -- Pure Function: gsl::cdf::rayleigh_Pinv p sigma

     implements ‘gsl_cdf_rayleigh_Pinv’.

 -- Pure Function: gsl::cdf::rayleigh_Qinv q sigma

     implements ‘gsl_cdf_rayleigh_Qinv’.

 -- Pure Function: gsl::cdf::gamma_P x a b

     implements ‘gsl_cdf_gamma_P’.

 -- Pure Function: gsl::cdf::gamma_Q x a b

     implements ‘gsl_cdf_gamMa_Q’.

 -- Pure Function: gsl::cdf::gamma_Pinv p a b

     implements ‘gsl_cdf_gamma_Pinv’.

 -- Pure Function: gsl::cdf::gamma_Qinv q a b

     implements ‘gsl_cdf_gamma_Qinv’.

 -- Pure Function: gsl::cdf::flat_P x a b

     implements ‘gsl_cdf_flat_P’.

 -- Pure Function: gsl::cdf::flat_Q x a b

     implements ‘gsl_cdf_flat_Q’.

 -- Pure Function: gsl::cdf::flat_Pinv p a b

     implements ‘gsl_cdf_flat_Pinv’.

 -- Pure Function: gsl::cdf::flat_Qinv q a b

     implements ‘gsl_cdf_flat_Qinv’.

 -- Pure Function: gsl::cdf::lognormal_P x zeta sigma

     implements ‘gsl_cdf_lognormal_P’.

 -- Pure Function: gsl::cdf::lognormal_Q x zeta sigma

     implements ‘gsl_cdf_lognormal_Q’.

 -- Pure Function: gsl::cdf::lognormal_Pinv p zeta sigma

     implements ‘gsl_cdf_lognormal_Pinv’.

 -- Pure Function: gsl::cdf::lognormal_Qinv q zeta sigma

     implements ‘gsl_cdf_lognormal_Qinv’.

 -- Pure Function: gsl::cdf::chisq_P x nu

     implements ‘gsl_cdf_chisq_P’.

 -- Pure Function: gsl::cdf::chisq_Q x nu

     implements ‘gsl_cdf_chisq_Q’.

 -- Pure Function: gsl::cdf::chisq_Pinv p nu

     implements ‘gsl_cdf_chisq_Pinv’.

 -- Pure Function: gsl::cdf::chisq_Qinv q nu

     implements ‘gsl_cdf_chisq_Qinv’.

 -- Pure Function: gsl::cdf::fdist_P x nu1 nu2

     implements ‘gsl_cdf_fdist_P’.

 -- Pure Function: gsl::cdf::fdist_Q x nu1 nu2

     implements ‘gsl_cdf_fdist_Q’.

 -- Pure Function: gsl::cdf::fdist_Pinv p nu1 nu2

     implements ‘gsl_cdf_fdist_Pinv’.

 -- Pure Function: gsl::cdf::fdist_Qinv q nu1 nu2

     implements ‘gsl_cdf_fdist_Qinv’.

 -- Pure Function: gsl::cdf::tdist_P x nu

     implements ‘gsl_cdf_tdist_P’.

 -- Pure Function: gsl::cdf::tdist_Q x nu

     implements ‘gsl_cdf_tdist_Q’.

 -- Pure Function: gsl::cdf::tdist_Pinv p nu

     implements ‘gsl_cdf_tdist_Pinv’.

 -- Pure Function: gsl::cdf::tdist_Qinv q nu

     implements ‘gsl_cdf_tdist_Qinv’.

 -- Pure Function: gsl::cdf::beta_P x a b

     implements ‘gsl_cdf_beta_P’.

 -- Pure Function: gsl::cdf::beta_Q x a b

     implements ‘gsl_cdf_beta_Q’.

 -- Pure Function: gsl::cdf::beta_Pinv p a b

     implements ‘gsl_cdf_beta_Pinv’.

 -- Pure Function: gsl::cdf::beta_Qinv q a b

     implements ‘gsl_cdf_beta_Qinv’.

 -- Pure Function: gsl::cdf::logistic_P x a

     implements ‘gsl_cdf_logistic_P’.

 -- Pure Function: gsl::cdf::logistic_Q x a

     implements ‘gsl_cdf_logistic_Q’.

 -- Pure Function: gsl::cdf::logistic_Pinv p a

     implements ‘gsl_cdf_logistic_Pinv’.

 -- Pure Function: gsl::cdf::logistic_Qinv q a

     implements ‘gsl_cdf_logistic_Qinv’.

 -- Pure Function: gsl::cdf::pareto_P x a b

     implements ‘gsl_cdf_pareto_P’.

 -- Pure Function: gsl::cdf::pareto_Q x a b

     implements ‘gsl_cdf_pareto_Q’.

 -- Pure Function: gsl::cdf::pareto_Pinv p a b

     implements ‘gsl_cdf_pareto_Pinv’.

 -- Pure Function: gsl::cdf::pareto_Qinv q a b

     implements ‘gsl_cdf_pareto_Qinv’.

 -- Pure Function: gsl::cdf::weibull_P x a b

     implements ‘gsl_cdf_weibull_P’.

 -- Pure Function: gsl::cdf::weibull_Q x a b

     implements ‘gsl_cdf_weibull_Q’.

 -- Pure Function: gsl::cdf::weibull_Pinv p a b

     implements ‘gsl_cdf_weibull_Pinv’.

 -- Pure Function: gsl::cdf::weibull_Qinv q a b

     implements ‘gsl_cdf_weibull_Qinv’.

 -- Pure Function: gsl::cdf::gumbel1_P x a b

     implements ‘gsl_cdf_gumbel1_P’.

 -- Pure Function: gsl::cdf::gumbel1_Q x a b

     implements ‘gsl_cdf_gumbel1_Q’.

 -- Pure Function: gsl::cdf::gumbel1_Pinv p a b

     implements ‘gsl_cdf_gumbel1_Pinv’.

 -- Pure Function: gsl::cdf::gumbel1_Qinv q a b

     implements ‘gsl_cdf_gumbel1_Qinv’.

 -- Pure Function: gsl::cdf::gumbel2_P x a b

     implements ‘gsl_cdf_gumbel2_P’.

 -- Pure Function: gsl::cdf::gumbel2_Q x a b

     implements ‘gsl_cdf_gumbel2_Q’.

 -- Pure Function: gsl::cdf::gumbel2_Pinv p a b

     implements ‘gsl_cdf_gumbel2_Pinv’.

 -- Pure Function: gsl::cdf::gumbel2_Qinv q a b

     implements ‘gsl_cdf_gumbel2_Qinv’.

 -- Pure Function: gsl::cdf::poisson_P k::int mu

     implements ‘gsl_cdf_poisson_P’.

 -- Pure Function: gsl::cdf::poisson_Q k::int mu

     implements ‘gsl_cdf_poisson_Q’.

 -- Pure Function: gsl::cdf::binomial_P k::int p n::int

     implements ‘gsl_cdf_binomial_P’.

 -- Pure Function: gsl::cdf::binomial_Q k::int q n::int

     implements ‘gsl_cdf_binomial_Q’.

 -- Pure Function: gsl::cdf::negative_binomial_P k::int p n

     implements ‘gsl_cdf_negative_binomial_P’.

 -- Pure Function: gsl::cdf::negative_binomial_Q k::int p n

     implements ‘gsl_cdf_negative_binomial_Q’.

 -- Pure Function: gsl::cdf::pascal_P k::int p n::int

     implements ‘gsl_cdf_pascal_P’.

 -- Pure Function: gsl::cdf::pascal_Q k::int p n::int

     implements ‘gsl_cdf_pascal_Q’.

 -- Pure Function: gsl::cdf::geometric_P k::int p

     implements ‘gsl_cdf_geometric_P’.

 -- Pure Function: gsl::cdf::geometric_Q k::int p

     implements ‘gsl_cdf_geometric_Q’.

 -- Pure Function: gsl::cdf::hypergeometric_P k::int n1::int n2::int
          t::int

     implements ‘gsl_cdf_hypergeometric_P’.

 -- Pure Function: gsl::cdf::hypergeometric_Q k::int n1::int n2::int
          t::int

     implements ‘gsl_cdf_hypergeometric_Q’.


File: pure-gsl.info,  Node: Examples<13>,  Prev: Routines<4>,  Up: Random Number Distributions

6.2 Examples
============

The following illustrates the use of each function in the ‘randist’
module.  The pdf functions are illustrated first.

     > using gsl::stats;
     > using namespace gsl::ran;
     > ugaussian_pdf 1.2;
     0.194186054983213
     > gaussian_pdf (-1.3) 1.5;
     0.182690978264686
     > gaussian_tail_pdf 2.0 1.0 1.5;
     0.433042698395299
     > ugaussian_tail_pdf 2.0 1.0;
     0.34030367841782
     > bivariate_gaussian_pdf 1.2 0.9 1.0 1.0 0.95;
     0.184646843689817
     > exponential_pdf 1.0 0.5;
     0.270670566473225
     > laplace_pdf 1.5 2.0;
     0.118091638185254
     > exppow_pdf 0.0 1.0 1.5;
     0.553866083716236
     > cauchy_pdf (-1.0) 1.0;
     0.159154943091895
     > rayleigh_pdf 2.5 1.0;
     0.109842334058519
     > rayleigh_tail_pdf 1.5 1.0 1.0;
     0.802892142778485
     > landau_pdf 1.1;
     0.140968737919623
     > gamma_pdf 1.0 1.0 1.5;
     0.342278079355061
     > flat_pdf 1.0 0.5 2.5;
     0.5
     > lognormal_pdf 0.01 0.0 1.0;
     0.000990238664959182
     > chisq_pdf 1.0 2.0;
     0.303265329856317
     > fdist_pdf 0.5 3.0 2.0;
     0.480970043785452
     > tdist_pdf 0.1 10.0;
     0.386975225815181
     > beta_pdf 0.5 4.0 1.0;
     0.499999999999999
     > logistic_pdf (-1.0) 2.0;
     0.117501856100797
     > pareto_pdf 0.01 3.0 2.0;
     0.0
     > weibull_pdf  0.01 1.0 1.0;
     0.990049833749168
     > gumbel1_pdf 0.01 1.0 1.0;
     0.367861108816436
     > gumbel2_pdf 0.01 1.0 1.0;
     3.72007597602084e-40
     > dirichlet_pdf {0.1,0.2,0.8} {2.0,2.0,2.0};
     0.00501316294425874
     > dirichlet_lnpdf {0.1,0.2,0.8} {2.0,2.0,2.0};
     -5.29568823688856
     > poisson_pdf 4 0.4;
     0.000715008049104682
     > bernoulli_pdf 1 0.7;
     0.7
     > binomial_pdf 3 0.5 9;
     0.1640625
     > multinomial_pdf {0.1,0.2,0.7} {2,2,2};
     0.0
     > multinomial_lnpdf {0.1,0.2,0.7} {2,2,2};
     -1728120799.71174
     > negative_binomial_pdf 10 0.5 3.5;
     0.0122430486923836
     > pascal_pdf 10 0.5 3;
     0.00805664062499999
     > geometric_pdf 5 0.4;
     0.05184
     > hypergeometric_pdf 1 5 20 3;
     0.413043478260872
     > logarithmic_pdf 10 0.7;
     0.00234619293712492
     > test_discrete
     >   = v
     >     when
     >       px = discrete_preproc {0.1,0.3,0.4};
     >       v = discrete_pdf 0 px +
     >           discrete_pdf 1 px +
     >           discrete_pdf 2 px;
     >       _ = discrete_free px
     >     end;
     > test_discrete;
     1.0


  The cumulative distribution functions are shown.

     > using namespace gsl::cdf;
     > ugaussian_P  (-1.3);
     0.0968004845856103
     > ugaussian_Q  (-1.3);
     0.90319951541439
     > ugaussian_Pinv  0.84;
     0.994457883209753
     > ugaussian_Qinv  0.84;
     -0.994457883209753
     > gaussian_P  (1.3)  1.5;
     0.806937662858093
     > gaussian_Q  (1.3)  1.5;
     0.193062337141907
     > gaussian_Pinv  0.4  5.0;
     -1.266735515679
     > gaussian_Qinv  0.4 5.0;
     1.266735515679
     > exponential_P  1.0  0.5;
     0.864664716763387
     > exponential_Q  1.0  0.5;
     0.135335283236613
     > exponential_Pinv  0.6  0.5;
     0.458145365937077
     > exponential_Qinv  0.6  0.5;
     0.255412811882995
     > laplace_P  1.5  2.0;
     0.763816723629493
     > laplace_Q  1.5  2.0;
     0.236183276370507
     > laplace_Pinv  0.6  2.0;
     0.446287102628419
     > laplace_Qinv  0.4  2.0;
     0.446287102628419
     > exppow_P  0.0  1.0  2.5;
     0.5
     > exppow_Q  0.0  1.0  0.5;
     0.5
     > cauchy_P  (-1.0)  1.0;
     0.25
     > cauchy_Q  (-1.0)  1.0;
     0.75
     > cauchy_Pinv  0.75  1.0;
     1.0
     > cauchy_Qinv  0.25  1.0;
     1.0
     > rayleigh_P  1.5  2.0;
     0.245160398010993
     > rayleigh_Q  0.5  1.0;
     0.882496902584595
     > rayleigh_Pinv  0.5  1.0;
     1.17741002251547
     > rayleigh_Qinv  0.5  1.0;
     1.17741002251547
     > gamma_P  1.0  1.0  3.0;
     0.283468689426211
     > gamma_Q  1.0  1.0  3.0;
     0.716531310573789
     > gamma_Pinv  0.5  1.0  1.0;
     0.693147180559945
     > gamma_Qinv  0.5  1.0  1.0;
     0.693147180559945
     > flat_P  2.0  1.2  4.8;
     0.222222222222222
     > flat_Q  2.0  1.2  4.8;
     0.777777777777778
     > flat_Pinv  0.2  0.5  2.5;
     0.9
     > flat_Qinv  0.2  0.5  2.5;
     2.1
     > lognormal_P  0.01  0.0  1.0;
     2.06064339597172e-06
     > lognormal_Q  0.01  0.0  1.0;
     0.999997939356604
     > lognormal_Pinv  0.1  0.0  1.0;
     0.27760624185201
     > lognormal_Qinv  0.1  0.0  1.0;
     3.60222447927916
     > chisq_P  1.0  2.0;
     0.393469340287367
     > chisq_Q  1.0  2.0;
     0.606530659712633
     > chisq_Pinv  0.5  2.0;
     0.221199216928595
     > chisq_Qinv  0.5  2.0;
     1.38629436111989
     > fdist_P  1.0  3.0  2.0;
     0.46475800154489
     > fdist_Q  1.0  3.0  2.0;
     0.53524199845511
     > fdist_Pinv  0.5  3.0  2.0;
     1.13494292261288
     > fdist_Qinv  0.5  3.0  2.0;
     1.13494292261288
     > tdist_P  2.1  10.0;
     0.968961377898891
     > tdist_Q  (-2.1)  10.0;
     0.968961377898891
     > tdist_Pinv  0.68  10.0;
     0.482264205919689
     > tdist_Qinv  0.68  10.0;
     -0.482264205919689
     > beta_P  0.75  2.0  2.0;
     0.84375
     > beta_Q  0.75  2.0  2.0;
     0.15625
     > beta_Pinv  0.75  2.0  2.0;
     0.673648177666931
     > beta_Qinv  0.25  2.0  2.0;
     0.673648177666931
     > logistic_P  (-1.0)  2.0;
     1
     > logistic_Q  (-1.0)  2.0;
     0.622459331201855
     > logistic_Pinv  0.75  1.0;
     1.09861228866811
     > logistic_Qinv  0.25  1.0;
     1.09861228866811
     > pareto_P  2.01  3.0  2.0;
     0.0148512406901899
     > pareto_Q  2.01  3.0  2.0;
     0.98514875930981
     > pareto_Pinv  0.1  3.0  2.0;
     2.07148833730257
     > pareto_Qinv  0.1  3.0  2.0;
     4.30886938006377
     > weibull_P  1.01  1.0  2.0;
     0.639441117518024
     > weibull_Q  1.01  2.0  3.0;
     0.879160657465162
     > weibull_Pinv  0.1  1.0  2.0;
     0.324592845974501
     > weibull_Qinv  0.1  1.0  2.0;
     1.51742712938515
     > gumbel1_P  1.01  1.0  1.0;
     0.694739044426344
     > gumbel1_Q  1.01  1.0  1.0;
     0.305260955573656
     > gumbel1_Pinv  0.1  1.0  1.0;
     -0.834032445247956
     > gumbel1_Qinv  0.1  1.0  1.0;
     2.25036732731245
     > gumbel2_P  1.01  1.0  1.0;
     0.371539903071873
     > gumbel2_Q  1.01  1.0  1.0;
     0.628460096928127
     > gumbel2_Pinv  0.1  1.0  1.0;
     0.434294481903252
     > gumbel2_Qinv  0.1  1.0  1.0;
     9.4912215810299
     > poisson_P  4  0.4;
     0.999938756672898
     > poisson_Q  4  0.6;
     0.000394486018340255
     > binomial_P  3  0.5  10;
     0.171874999999999
     > binomial_Q  3  0.5  10;
     0.828125000000001
     > negative_binomial_P  10  0.5  3.0;
     0.98876953125
     > negative_binomial_Q  10  0.5  3.0;
     0.01123046875
     > pascal_P  10  0.5  3;
     0.98876953125
     > pascal_Q  10  0.5  3;
     0.01123046875
     > geometric_P  5  0.4;
     0.92224
     > geometric_Q  5  0.6;
     0.01024
     > hypergeometric_P  1  5  20  3;
     0.908695652173913
     > hypergeometric_Q  1  5  20  3;
     0.0913043478260873



File: pure-gsl.info,  Node: Sorting,  Next: Module Index,  Prev: Random Number Distributions,  Up: Top

7 Sorting
*********

This module is loaded via the command ‘using gsl::sort’ and provides
Pure wrappers for the GSL sorting routines found in Chapter 11 of the
GSL manual,

  ‘http://www.gnu.org/software/gsl/manual/html_node/Sorting.html’.

* Menu:

* Routines: Routines<5>.
* Examples: Examples<14>.


File: pure-gsl.info,  Node: Routines<5>,  Next: Examples<14>,  Up: Sorting

7.1 Routines
============

 -- Pure Function: gsl::sort_vector m::matrix

     implements ‘gsl_sort’ and ‘gsl_sort_int’ without ‘stride’ and ‘n’
     parameters.

 -- Pure Function: gsl::sort_vector_index m::matrix

     implements ‘gsl_sort_index’ and ‘gsl_sort_int_index’ without
     ‘stride’ and ‘n’ parameters.


File: pure-gsl.info,  Node: Examples<14>,  Prev: Routines<5>,  Up: Sorting

7.2 Examples
============

Usage of each library routine is illustrated below.

     > using gsl::sort;
     > using namespace gsl;
     > sort_vector {0,3,2,4,5};
     {0,2,3,4,5}
     > sort_vector_index {0.0,1.0,5.0,2.0,8.0,0.0};
     {5,0,1,3,2,4}



File: pure-gsl.info,  Node: Module Index,  Next: Index,  Prev: Sorting,  Up: Top

Module Index
************

* Menu:

* gsl: 0.
* gsl;;fit: 1.
* gsl;;matrix: 2.
* gsl;;poly: 3.
* gsl;;randist: 4.
* gsl;;sf: 5.
* gsl;;sort: 6.
* gsl;;stats: 7.


File: pure-gsl.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* * (infix function):                    Matrix Operators and Functions.
                                                              (line  37)
* * (infix function) <1>:                Matrix Operators and Functions.
                                                              (line  47)
* + (infix function):                    Matrix Operators and Functions.
                                                              (line  10)
* + (infix function) <1>:                Matrix Operators and Functions.
                                                              (line  16)
* - (infix function):                    Matrix Operators and Functions.
                                                              (line  25)
* - (infix function) <1>:                Matrix Operators and Functions.
                                                              (line  29)
* - (infix function) <2>:                Matrix Operators and Functions.
                                                              (line  33)
* - (prefix function):                   Matrix Operators and Functions.
                                                              (line  20)
* .* (infix function):                   Matrix Operators and Functions.
                                                              (line  43)
* ./ (infix function):                   Matrix Operators and Functions.
                                                              (line  61)
* .^ (infix function):                   Matrix Operators and Functions.
                                                              (line 121)
* / (infix function):                    Matrix Operators and Functions.
                                                              (line  51)
* / (infix function) <1>:                Matrix Operators and Functions.
                                                              (line  56)
* / (infix function) <2>:                Matrix Operators and Functions.
                                                              (line  65)
* << (infix function):                   Matrix Operators and Functions.
                                                              (line 129)
* << (infix function) <1>:               Matrix Operators and Functions.
                                                              (line 134)
* >> (infix function):                   Matrix Operators and Functions.
                                                              (line 139)
* >> (infix function) <1>:               Matrix Operators and Functions.
                                                              (line 144)
* \ (infix function):                    Matrix Operators and Functions.
                                                              (line  69)
* ^ (infix function):                    Matrix Operators and Functions.
                                                              (line 111)
* ^ (infix function) <1>:                Matrix Operators and Functions.
                                                              (line 116)
* ^ (infix function) <2>:                Matrix Operators and Functions.
                                                              (line 125)
* and (infix function):                  Matrix Operators and Functions.
                                                              (line 149)
* and (infix function) <1>:              Matrix Operators and Functions.
                                                              (line 157)
* div (infix function):                  Matrix Operators and Functions.
                                                              (line  73)
* div (infix function) <1>:              Matrix Operators and Functions.
                                                              (line  79)
* div (infix function) <2>:              Matrix Operators and Functions.
                                                              (line  85)
* gsl (module):                          Top.                 (line  12)
* gsl;;cdf;;beta_P (function):           Routines<4>.         (line 363)
* gsl;;cdf;;beta_Pinv (function):        Routines<4>.         (line 371)
* gsl;;cdf;;beta_Q (function):           Routines<4>.         (line 367)
* gsl;;cdf;;beta_Qinv (function):        Routines<4>.         (line 375)
* gsl;;cdf;;binomial_P (function):       Routines<4>.         (line 467)
* gsl;;cdf;;binomial_Q (function):       Routines<4>.         (line 471)
* gsl;;cdf;;cauchy_P (function):         Routines<4>.         (line 235)
* gsl;;cdf;;cauchy_Pinv (function):      Routines<4>.         (line 243)
* gsl;;cdf;;cauchy_Q (function):         Routines<4>.         (line 239)
* gsl;;cdf;;cauchy_Qinv (function):      Routines<4>.         (line 247)
* gsl;;cdf;;chisq_P (function):          Routines<4>.         (line 315)
* gsl;;cdf;;chisq_Pinv (function):       Routines<4>.         (line 323)
* gsl;;cdf;;chisq_Q (function):          Routines<4>.         (line 319)
* gsl;;cdf;;chisq_Qinv (function):       Routines<4>.         (line 327)
* gsl;;cdf;;exponential_P (function):    Routines<4>.         (line 195)
* gsl;;cdf;;exponential_Pinv (function): Routines<4>.         (line 203)
* gsl;;cdf;;exponential_Q (function):    Routines<4>.         (line 199)
* gsl;;cdf;;exponential_Qinv (function): Routines<4>.         (line 207)
* gsl;;cdf;;exppow_P (function):         Routines<4>.         (line 227)
* gsl;;cdf;;exppow_Q (function):         Routines<4>.         (line 231)
* gsl;;cdf;;fdist_P (function):          Routines<4>.         (line 331)
* gsl;;cdf;;fdist_Pinv (function):       Routines<4>.         (line 339)
* gsl;;cdf;;fdist_Q (function):          Routines<4>.         (line 335)
* gsl;;cdf;;fdist_Qinv (function):       Routines<4>.         (line 343)
* gsl;;cdf;;flat_P (function):           Routines<4>.         (line 283)
* gsl;;cdf;;flat_Pinv (function):        Routines<4>.         (line 291)
* gsl;;cdf;;flat_Q (function):           Routines<4>.         (line 287)
* gsl;;cdf;;flat_Qinv (function):        Routines<4>.         (line 295)
* gsl;;cdf;;gamma_P (function):          Routines<4>.         (line 267)
* gsl;;cdf;;gamma_Pinv (function):       Routines<4>.         (line 275)
* gsl;;cdf;;gamma_Q (function):          Routines<4>.         (line 271)
* gsl;;cdf;;gamma_Qinv (function):       Routines<4>.         (line 279)
* gsl;;cdf;;gaussian_P (function):       Routines<4>.         (line 179)
* gsl;;cdf;;gaussian_Pinv (function):    Routines<4>.         (line 187)
* gsl;;cdf;;gaussian_Q (function):       Routines<4>.         (line 183)
* gsl;;cdf;;geometric_P (function):      Routines<4>.         (line 491)
* gsl;;cdf;;geometric_Q (function):      Routines<4>.         (line 495)
* gsl;;cdf;;guassian_Qinv (function):    Routines<4>.         (line 191)
* gsl;;cdf;;gumbel1_P (function):        Routines<4>.         (line 427)
* gsl;;cdf;;gumbel1_Pinv (function):     Routines<4>.         (line 435)
* gsl;;cdf;;gumbel1_Q (function):        Routines<4>.         (line 431)
* gsl;;cdf;;gumbel1_Qinv (function):     Routines<4>.         (line 439)
* gsl;;cdf;;gumbel2_P (function):        Routines<4>.         (line 443)
* gsl;;cdf;;gumbel2_Pinv (function):     Routines<4>.         (line 451)
* gsl;;cdf;;gumbel2_Q (function):        Routines<4>.         (line 447)
* gsl;;cdf;;gumbel2_Qinv (function):     Routines<4>.         (line 455)
* gsl;;cdf;;hypergeometric_P (function): Routines<4>.         (line 499)
* gsl;;cdf;;hypergeometric_Q (function): Routines<4>.         (line 504)
* gsl;;cdf;;laplace_P (function):        Routines<4>.         (line 211)
* gsl;;cdf;;laplace_Pinv (function):     Routines<4>.         (line 219)
* gsl;;cdf;;laplace_Q (function):        Routines<4>.         (line 215)
* gsl;;cdf;;laplace_Qinv (function):     Routines<4>.         (line 223)
* gsl;;cdf;;logistic_P (function):       Routines<4>.         (line 379)
* gsl;;cdf;;logistic_Pinv (function):    Routines<4>.         (line 387)
* gsl;;cdf;;logistic_Q (function):       Routines<4>.         (line 383)
* gsl;;cdf;;logistic_Qinv (function):    Routines<4>.         (line 391)
* gsl;;cdf;;lognormal_P (function):      Routines<4>.         (line 299)
* gsl;;cdf;;lognormal_Pinv (function):   Routines<4>.         (line 307)
* gsl;;cdf;;lognormal_Q (function):      Routines<4>.         (line 303)
* gsl;;cdf;;lognormal_Qinv (function):   Routines<4>.         (line 311)
* gsl;;cdf;;negative_binomial_P (function): Routines<4>.      (line 475)
* gsl;;cdf;;negative_binomial_Q (function): Routines<4>.      (line 479)
* gsl;;cdf;;pareto_P (function):         Routines<4>.         (line 395)
* gsl;;cdf;;pareto_Pinv (function):      Routines<4>.         (line 403)
* gsl;;cdf;;pareto_Q (function):         Routines<4>.         (line 399)
* gsl;;cdf;;pareto_Qinv (function):      Routines<4>.         (line 407)
* gsl;;cdf;;pascal_P (function):         Routines<4>.         (line 483)
* gsl;;cdf;;pascal_Q (function):         Routines<4>.         (line 487)
* gsl;;cdf;;poisson_P (function):        Routines<4>.         (line 459)
* gsl;;cdf;;poisson_Q (function):        Routines<4>.         (line 463)
* gsl;;cdf;;rayleigh_P (function):       Routines<4>.         (line 251)
* gsl;;cdf;;rayleigh_Pinv (function):    Routines<4>.         (line 259)
* gsl;;cdf;;rayleigh_Q (function):       Routines<4>.         (line 255)
* gsl;;cdf;;rayleigh_Qinv (function):    Routines<4>.         (line 263)
* gsl;;cdf;;tdist_P (function):          Routines<4>.         (line 347)
* gsl;;cdf;;tdist_Pinv (function):       Routines<4>.         (line 355)
* gsl;;cdf;;tdist_Q (function):          Routines<4>.         (line 351)
* gsl;;cdf;;tdist_Qinv (function):       Routines<4>.         (line 359)
* gsl;;cdf;;ugaussian_P (function):      Routines<4>.         (line 163)
* gsl;;cdf;;ugaussian_Pinv (function):   Routines<4>.         (line 171)
* gsl;;cdf;;ugaussian_Q (function):      Routines<4>.         (line 167)
* gsl;;cdf;;ugaussian_Qinv (function):   Routines<4>.         (line 175)
* gsl;;cdf;;weibull_P (function):        Routines<4>.         (line 411)
* gsl;;cdf;;weibull_Pinv (function):     Routines<4>.         (line 419)
* gsl;;cdf;;weibull_Q (function):        Routines<4>.         (line 415)
* gsl;;cdf;;weibull_Qinv (function):     Routines<4>.         (line 423)
* gsl;;fit (module):                     Least-Squares Fitting.
                                                              (line   6)
* gsl;;fit;;linear (function):           Routines<2>.         (line   6)
* gsl;;fit;;linear_est (function):       Routines<2>.         (line  18)
* gsl;;fit;;mul (function):              Routines<2>.         (line  24)
* gsl;;fit;;mul_est (function):          Routines<2>.         (line  36)
* gsl;;fit;;wlinear (function):          Routines<2>.         (line  12)
* gsl;;fit;;wmul (function):             Routines<2>.         (line  30)
* gsl;;matrix (module):                  Matrices.            (line   6)
* gsl;;matrix;;ceye (function):          Matrix Creation.     (line  90)
* gsl;;matrix;;ceye (function) <1>:      Matrix Creation.     (line  94)
* gsl;;matrix;;cones (function):         Matrix Creation.     (line  64)
* gsl;;matrix;;cones (function) <1>:     Matrix Creation.     (line  69)
* gsl;;matrix;;czeros (function):        Matrix Creation.     (line  34)
* gsl;;matrix;;czeros (function) <1>:    Matrix Creation.     (line  39)
* gsl;;matrix;;eye (function):           Matrix Creation.     (line  74)
* gsl;;matrix;;eye (function) <1>:       Matrix Creation.     (line  78)
* gsl;;matrix;;ieye (function):          Matrix Creation.     (line  82)
* gsl;;matrix;;ieye (function) <1>:      Matrix Creation.     (line  86)
* gsl;;matrix;;iones (function):         Matrix Creation.     (line  54)
* gsl;;matrix;;iones (function) <1>:     Matrix Creation.     (line  59)
* gsl;;matrix;;izeros (function):        Matrix Creation.     (line  24)
* gsl;;matrix;;izeros (function) <1>:    Matrix Creation.     (line  29)
* gsl;;matrix;;ones (function):          Matrix Creation.     (line  44)
* gsl;;matrix;;ones (function) <1>:      Matrix Creation.     (line  49)
* gsl;;matrix;;pinv (function):          Singular Value Decomposition.
                                                              (line  37)
* gsl;;matrix;;svd (function):           Singular Value Decomposition.
                                                              (line  16)
* gsl;;matrix;;svd_jacobi (function):    Singular Value Decomposition.
                                                              (line  25)
* gsl;;matrix;;svd_mod (function):       Singular Value Decomposition.
                                                              (line  20)
* gsl;;matrix;;svd_solve (function):     Singular Value Decomposition.
                                                              (line  30)
* gsl;;matrix;;zeros (function):         Matrix Creation.     (line  14)
* gsl;;matrix;;zeros (function) <1>:     Matrix Creation.     (line  19)
* gsl;;poly (module):                    Polynomials.         (line   6)
* gsl;;poly;;complex_solve (function):   Routines.            (line  52)
* gsl;;poly;;complex_solve_cubic (function): Routines.        (line  46)
* gsl;;poly;;complex_solve_quadratic (function): Routines.    (line  34)
* gsl;;poly;;dd_eval (function):         Routines.            (line  19)
* gsl;;poly;;dd_init (function):         Routines.            (line  15)
* gsl;;poly;;dd_taylor (function):       Routines.            (line  23)
* gsl;;poly;;eval (function):            Routines.            (line   6)
* gsl;;poly;;solve_cubic (function):     Routines.            (line  40)
* gsl;;poly;;solve_quadratic (function): Routines.            (line  28)
* gsl;;ran;;bernoulli_pdf (function):    Routines<4>.         (line 126)
* gsl;;ran;;beta_pdf (function):         Routines<4>.         (line  78)
* gsl;;ran;;binomial_pdf (function):     Routines<4>.         (line 130)
* gsl;;ran;;bivariate_gaussian_pdf (function): Routines<4>.   (line  22)
* gsl;;ran;;cauchy_pdf (function):       Routines<4>.         (line  38)
* gsl;;ran;;chisq_pdf (function):        Routines<4>.         (line  66)
* gsl;;ran;;dirichlet_lnpdf (function):  Routines<4>.         (line 106)
* gsl;;ran;;dirichlet_pdf (function):    Routines<4>.         (line 102)
* gsl;;ran;;discrete_free (function):    Routines<4>.         (line 118)
* gsl;;ran;;discrete_pdf (function):     Routines<4>.         (line 114)
* gsl;;ran;;discrete_preproc (function): Routines<4>.         (line 110)
* gsl;;ran;;exponential_pdf (function):  Routines<4>.         (line  26)
* gsl;;ran;;exppow_pdf (function):       Routines<4>.         (line  34)
* gsl;;ran;;fdist_pdf (function):        Routines<4>.         (line  70)
* gsl;;ran;;flat_pdf (function):         Routines<4>.         (line  58)
* gsl;;ran;;gamma_pdf (function):        Routines<4>.         (line  54)
* gsl;;ran;;gaussian_pdf (function):     Routines<4>.         (line  10)
* gsl;;ran;;gaussian_tail_pdf (function): Routines<4>.        (line  14)
* gsl;;ran;;geometric_pdf (function):    Routines<4>.         (line 150)
* gsl;;ran;;gumbel1_pdf (function):      Routines<4>.         (line  94)
* gsl;;ran;;gumbel2_pdf (function):      Routines<4>.         (line  98)
* gsl;;ran;;hypergeometric_pdf (function): Routines<4>.       (line 154)
* gsl;;ran;;landau_pdf (function):       Routines<4>.         (line  50)
* gsl;;ran;;laplace_pdf (function):      Routines<4>.         (line  30)
* gsl;;ran;;logarithmic_pdf (function):  Routines<4>.         (line 159)
* gsl;;ran;;logistic_pdf (function):     Routines<4>.         (line  82)
* gsl;;ran;;lognormal_pdf (function):    Routines<4>.         (line  62)
* gsl;;ran;;multinomial_lnpdf (function): Routines<4>.        (line 138)
* gsl;;ran;;multinomial_pdf (function):  Routines<4>.         (line 134)
* gsl;;ran;;negative_binomial_pdf (function): Routines<4>.    (line 142)
* gsl;;ran;;pareto_pdf (function):       Routines<4>.         (line  86)
* gsl;;ran;;pascal_pdf (function):       Routines<4>.         (line 146)
* gsl;;ran;;poisson_pdf (function):      Routines<4>.         (line 122)
* gsl;;ran;;rayleigh_pdf (function):     Routines<4>.         (line  42)
* gsl;;ran;;rayleigh_tail_pdf (function): Routines<4>.        (line  46)
* gsl;;ran;;tdist_pdf (function):        Routines<4>.         (line  74)
* gsl;;ran;;ugaussian_pdf (function):    Routines<4>.         (line   6)
* gsl;;ran;;ugaussian_tail_pdf (function): Routines<4>.       (line  18)
* gsl;;ran;;weibull_pdf (function):      Routines<4>.         (line  90)
* gsl;;randist (module):                 Random Number Distributions.
                                                              (line   6)
* gsl;;sf (module):                      Special Functions.   (line   6)
* gsl;;sf;;airy_Ai (function):           Airy Functions.      (line   6)
* gsl;;sf;;airy_Ai_deriv (function):     Airy Functions.      (line  62)
* gsl;;sf;;airy_Ai_deriv_e (function):   Airy Functions.      (line  69)
* gsl;;sf;;airy_Ai_deriv_scaled (function): Airy Functions.   (line  76)
* gsl;;sf;;airy_Ai_deriv_scaled_e (function): Airy Functions. (line  83)
* gsl;;sf;;airy_Ai_e (function):         Airy Functions.      (line  13)
* gsl;;sf;;airy_Ai_scaled (function):    Airy Functions.      (line  20)
* gsl;;sf;;airy_Ai_scaled_e (function):  Airy Functions.      (line  27)
* gsl;;sf;;airy_Bi (function):           Airy Functions.      (line  34)
* gsl;;sf;;airy_Bi_deriv (function):     Airy Functions.      (line  90)
* gsl;;sf;;airy_Bi_deriv_e (function):   Airy Functions.      (line  97)
* gsl;;sf;;airy_Bi_deriv_scaled (function): Airy Functions.   (line 104)
* gsl;;sf;;airy_Bi_deriv_scaled_e (function): Airy Functions. (line 111)
* gsl;;sf;;airy_Bi_e (function):         Airy Functions.      (line  41)
* gsl;;sf;;airy_Bi_scaled (function):    Airy Functions.      (line  48)
* gsl;;sf;;airy_Bi_scaled_e (function):  Airy Functions.      (line  55)
* gsl;;sf;;airy_zero_Ai (function):      Airy Functions.      (line 118)
* gsl;;sf;;airy_zero_Ai_deriv (function): Airy Functions.     (line 134)
* gsl;;sf;;airy_zero_Ai_deriv_e (function): Airy Functions.   (line 138)
* gsl;;sf;;airy_zero_Ai_e (function):    Airy Functions.      (line 122)
* gsl;;sf;;airy_zero_Bi (function):      Airy Functions.      (line 126)
* gsl;;sf;;airy_zero_Bi_deriv (function): Airy Functions.     (line 142)
* gsl;;sf;;airy_zero_Bi_deriv_e (function): Airy Functions.   (line 146)
* gsl;;sf;;airy_zero_Bi_e (function):    Airy Functions.      (line 130)
* gsl;;sf;;bessel_I0 (function):         Bessel Functions.    (line  62)
* gsl;;sf;;bessel_I0_e (function):       Bessel Functions.    (line  66)
* gsl;;sf;;bessel_I0_scaled (function):  Bessel Functions.    (line  90)
* gsl;;sf;;bessel_i0_scaled (function):  Bessel Functions.    (line 250)
* gsl;;sf;;bessel_I0_scaled_e (function): Bessel Functions.   (line  94)
* gsl;;sf;;bessel_i0_scaled_e (function): Bessel Functions.   (line 254)
* gsl;;sf;;bessel_I1 (function):         Bessel Functions.    (line  70)
* gsl;;sf;;bessel_I1_e (function):       Bessel Functions.    (line  74)
* gsl;;sf;;bessel_I1_scaled (function):  Bessel Functions.    (line  98)
* gsl;;sf;;bessel_i1_scaled (function):  Bessel Functions.    (line 258)
* gsl;;sf;;bessel_I1_scaled_e (function): Bessel Functions.   (line 102)
* gsl;;sf;;bessel_i1_scaled_e (function): Bessel Functions.   (line 262)
* gsl;;sf;;bessel_i2_scaled (function):  Bessel Functions.    (line 266)
* gsl;;sf;;bessel_i2_scaled_e (function): Bessel Functions.   (line 270)
* gsl;;sf;;bessel_il_scaled (function):  Bessel Functions.    (line 274)
* gsl;;sf;;bessel_il_scaled_array (function): Bessel Functions.
                                                              (line 282)
* gsl;;sf;;bessel_il_scaled_e (function): Bessel Functions.   (line 278)
* gsl;;sf;;bessel_In (function):         Bessel Functions.    (line  78)
* gsl;;sf;;bessel_Inu (function):        Bessel Functions.    (line 342)
* gsl;;sf;;bessel_Inu_e (function):      Bessel Functions.    (line 346)
* gsl;;sf;;bessel_Inu_scaled (function): Bessel Functions.    (line 350)
* gsl;;sf;;bessel_Inu_scaled_e (function): Bessel Functions.  (line 354)
* gsl;;sf;;bessel_In_array (function):   Bessel Functions.    (line  86)
* gsl;;sf;;bessel_In_e (function):       Bessel Functions.    (line  82)
* gsl;;sf;;bessel_In_scaled (function):  Bessel Functions.    (line 106)
* gsl;;sf;;bessel_In_scaled_array (function): Bessel Functions.
                                                              (line 114)
* gsl;;sf;;bessel_In_scaled_e (function): Bessel Functions.   (line 110)
* gsl;;sf;;bessel_J0 (function):         Bessel Functions.    (line   6)
* gsl;;sf;;bessel_j0 (function):         Bessel Functions.    (line 174)
* gsl;;sf;;bessel_J0_e (function):       Bessel Functions.    (line  10)
* gsl;;sf;;bessel_j0_e (function):       Bessel Functions.    (line 178)
* gsl;;sf;;bessel_J1 (function):         Bessel Functions.    (line  14)
* gsl;;sf;;bessel_j1 (function):         Bessel Functions.    (line 182)
* gsl;;sf;;bessel_J1_e (function):       Bessel Functions.    (line  18)
* gsl;;sf;;bessel_j1_e (function):       Bessel Functions.    (line 186)
* gsl;;sf;;bessel_j2 (function):         Bessel Functions.    (line 190)
* gsl;;sf;;bessel_j2_e (function):       Bessel Functions.    (line 194)
* gsl;;sf;;bessel_jl (function):         Bessel Functions.    (line 198)
* gsl;;sf;;bessel_jl_array (function):   Bessel Functions.    (line 206)
* gsl;;sf;;bessel_jl_e (function):       Bessel Functions.    (line 202)
* gsl;;sf;;bessel_jl_steed_array (function): Bessel Functions.
                                                              (line 210)
* gsl;;sf;;bessel_Jn (function):         Bessel Functions.    (line  22)
* gsl;;sf;;bessel_Jnu (function):        Bessel Functions.    (line 322)
* gsl;;sf;;bessel_Jnu_e (function):      Bessel Functions.    (line 326)
* gsl;;sf;;bessel_Jn_array (function):   Bessel Functions.    (line  30)
* gsl;;sf;;bessel_Jn_e (function):       Bessel Functions.    (line  26)
* gsl;;sf;;bessel_K0 (function):         Bessel Functions.    (line 118)
* gsl;;sf;;bessel_K0_e (function):       Bessel Functions.    (line 122)
* gsl;;sf;;bessel_K0_scaled (function):  Bessel Functions.    (line 146)
* gsl;;sf;;bessel_k0_scaled (function):  Bessel Functions.    (line 286)
* gsl;;sf;;bessel_K0_scaled_e (function): Bessel Functions.   (line 150)
* gsl;;sf;;bessel_k0_scaled_e (function): Bessel Functions.   (line 290)
* gsl;;sf;;bessel_K1 (function):         Bessel Functions.    (line 126)
* gsl;;sf;;bessel_K1_e (function):       Bessel Functions.    (line 130)
* gsl;;sf;;bessel_K1_scaled (function):  Bessel Functions.    (line 154)
* gsl;;sf;;bessel_k1_scaled (function):  Bessel Functions.    (line 294)
* gsl;;sf;;bessel_K1_scaled_e (function): Bessel Functions.   (line 158)
* gsl;;sf;;bessel_k1_scaled_e (function): Bessel Functions.   (line 298)
* gsl;;sf;;bessel_k2_scaled (function):  Bessel Functions.    (line 302)
* gsl;;sf;;bessel_k2_scaled_e (function): Bessel Functions.   (line 306)
* gsl;;sf;;bessel_kl_scaled (function):  Bessel Functions.    (line 310)
* gsl;;sf;;bessel_kl_scaled_array (function): Bessel Functions.
                                                              (line 318)
* gsl;;sf;;bessel_kl_scaled_e (function): Bessel Functions.   (line 314)
* gsl;;sf;;bessel_Kn (function):         Bessel Functions.    (line 134)
* gsl;;sf;;bessel_Knu (function):        Bessel Functions.    (line 358)
* gsl;;sf;;bessel_Knu_e (function):      Bessel Functions.    (line 362)
* gsl;;sf;;bessel_Knu_scaled (function): Bessel Functions.    (line 374)
* gsl;;sf;;bessel_Knu_scaled_e (function): Bessel Functions.  (line 378)
* gsl;;sf;;bessel_Kn_array (function):   Bessel Functions.    (line 142)
* gsl;;sf;;bessel_Kn_e (function):       Bessel Functions.    (line 138)
* gsl;;sf;;bessel_Kn_scaled (function):  Bessel Functions.    (line 162)
* gsl;;sf;;bessel_Kn_scaled_array (function): Bessel Functions.
                                                              (line 170)
* gsl;;sf;;bessel_Kn_scaled_e (function): Bessel Functions.   (line 166)
* gsl;;sf;;bessel_lnKnu (function):      Bessel Functions.    (line 366)
* gsl;;sf;;bessel_lnKnu_e (function):    Bessel Functions.    (line 370)
* gsl;;sf;;bessel_sequence_Jnu_e (function): Bessel Functions.
                                                              (line 330)
* gsl;;sf;;bessel_Y0 (function):         Bessel Functions.    (line  34)
* gsl;;sf;;bessel_y0 (function):         Bessel Functions.    (line 214)
* gsl;;sf;;bessel_Y0_e (function):       Bessel Functions.    (line  38)
* gsl;;sf;;bessel_y0_e (function):       Bessel Functions.    (line 218)
* gsl;;sf;;bessel_Y1 (function):         Bessel Functions.    (line  42)
* gsl;;sf;;bessel_y1 (function):         Bessel Functions.    (line 222)
* gsl;;sf;;bessel_Y1_e (function):       Bessel Functions.    (line  46)
* gsl;;sf;;bessel_y1_e (function):       Bessel Functions.    (line 226)
* gsl;;sf;;bessel_y2 (function):         Bessel Functions.    (line 230)
* gsl;;sf;;bessel_y2_e (function):       Bessel Functions.    (line 234)
* gsl;;sf;;bessel_yl (function):         Bessel Functions.    (line 238)
* gsl;;sf;;bessel_yl_array (function):   Bessel Functions.    (line 246)
* gsl;;sf;;bessel_yl_e (function):       Bessel Functions.    (line 242)
* gsl;;sf;;bessel_Yn (function):         Bessel Functions.    (line  50)
* gsl;;sf;;bessel_Ynu (function):        Bessel Functions.    (line 334)
* gsl;;sf;;bessel_Ynu_e (function):      Bessel Functions.    (line 338)
* gsl;;sf;;bessel_Yn_array (function):   Bessel Functions.    (line  58)
* gsl;;sf;;bessel_Yn_e (function):       Bessel Functions.    (line  54)
* gsl;;sf;;bessel_zero_J0 (function):    Bessel Functions.    (line 382)
* gsl;;sf;;bessel_zero_J0_e (function):  Bessel Functions.    (line 386)
* gsl;;sf;;bessel_zero_J1 (function):    Bessel Functions.    (line 390)
* gsl;;sf;;bessel_zero_J1_e (function):  Bessel Functions.    (line 394)
* gsl;;sf;;bessel_zero_Jnu (function):   Bessel Functions.    (line 398)
* gsl;;sf;;bessel_zero_Jnu_e (function): Bessel Functions.    (line 402)
* gsl;;sf;;clausen (function):           Clausen Functions.   (line   6)
* gsl;;sf;;clausen_e (function):         Clausen Functions.   (line  10)
* gsl;;sf;;coulomb_CL_array (function):  Colomb Functions.    (line  51)
* gsl;;sf;;coulomb_CL_e (function):      Colomb Functions.    (line  47)
* gsl;;sf;;coulomb_wave_FGp_array (function): Colomb Functions.
                                                              (line  38)
* gsl;;sf;;coulomb_wave_FG_array (function): Colomb Functions.
                                                              (line  34)
* gsl;;sf;;coulomb_wave_FG_e (function): Colomb Functions.    (line  26)
* gsl;;sf;;coulomb_wave_F_array (function): Colomb Functions. (line  30)
* gsl;;sf;;coulomb_wave_sphF_array (function): Colomb Functions.
                                                              (line  42)
* gsl;;sf;;coupling_3j (function):       Coupling Coefficients.
                                                              (line   6)
* gsl;;sf;;coupling_3j_e (function):     Coupling Coefficients.
                                                              (line  11)
* gsl;;sf;;coupling_6j (function):       Coupling Coefficients.
                                                              (line  16)
* gsl;;sf;;coupling_6j_e (function):     Coupling Coefficients.
                                                              (line  21)
* gsl;;sf;;coupling_9j (function):       Coupling Coefficients.
                                                              (line  26)
* gsl;;sf;;coupling_9j_e (function):     Coupling Coefficients.
                                                              (line  31)
* gsl;;sf;;dawson (function):            Dawson Function.     (line   6)
* gsl;;sf;;dawson_e (function):          Dawson Function.     (line  10)
* gsl;;sf;;debye_1 (function):           Debye Functions.     (line   6)
* gsl;;sf;;debye_1_e (function):         Debye Functions.     (line  10)
* gsl;;sf;;debye_2 (function):           Debye Functions.     (line  14)
* gsl;;sf;;debye_2_e (function):         Debye Functions.     (line  18)
* gsl;;sf;;debye_3 (function):           Debye Functions.     (line  22)
* gsl;;sf;;debye_3_e (function):         Debye Functions.     (line  26)
* gsl;;sf;;debye_4 (function):           Debye Functions.     (line  30)
* gsl;;sf;;debye_4_e (function):         Debye Functions.     (line  34)
* gsl;;sf;;debye_5 (function):           Debye Functions.     (line  38)
* gsl;;sf;;debye_5_e (function):         Debye Functions.     (line  42)
* gsl;;sf;;debye_6 (function):           Debye Functions.     (line  46)
* gsl;;sf;;debye_6_e (function):         Debye Functions.     (line  50)
* gsl;;sf;;dilog (function):             Dilogarithm.         (line   6)
* gsl;;sf;;dilog (function) <1>:         Dilogarithm.         (line  10)
* gsl;;sf;;dilog_e (function):           Dilogarithm.         (line  16)
* gsl;;sf;;dilog_e (function) <1>:       Dilogarithm.         (line  20)
* gsl;;sf;;hydrogenicR (function):       Colomb Functions.    (line  18)
* gsl;;sf;;hydrogenicR_1 (function):     Colomb Functions.    (line  10)
* gsl;;sf;;hydrogenicR_1_e (function):   Colomb Functions.    (line  14)
* gsl;;sf;;hydrogenicR_e (function):     Colomb Functions.    (line  22)
* gsl;;sf;;multiply_e (function):        Examples<9>.         (line  19)
* gsl;;sf;;multiply_err_e (function):    Examples<9>.         (line  23)
* gsl;;sort (module):                    Sorting.             (line   6)
* gsl;;sort_vector (function):           Routines<5>.         (line   6)
* gsl;;sort_vector_index (function):     Routines<5>.         (line  11)
* gsl;;stats (module):                   Statistics.          (line   6)
* gsl;;stats;;absdev (function):         Routines<3>.         (line  46)
* gsl;;stats;;absdev_m (function):       Routines<3>.         (line  50)
* gsl;;stats;;correlation (function):    Routines<3>.         (line  93)
* gsl;;stats;;covariance (function):     Routines<3>.         (line  82)
* gsl;;stats;;covariance_m (function):   Routines<3>.         (line  87)
* gsl;;stats;;kurtosis (function):       Routines<3>.         (line  63)
* gsl;;stats;;kurtosis_m_sd (function):  Routines<3>.         (line  67)
* gsl;;stats;;lag1_autocorrelation (function): Routines<3>.   (line  72)
* gsl;;stats;;lag1_autocorrelation_m (function): Routines<3>. (line  77)
* gsl;;stats;;max (function):            Routines<3>.         (line 172)
* gsl;;stats;;max_index (function):      Routines<3>.         (line 190)
* gsl;;stats;;mean (function):           Routines<3>.         (line   6)
* gsl;;stats;;median_from_sorted_data (function): Routines<3>.
                                                              (line 201)
* gsl;;stats;;min (function):            Routines<3>.         (line 176)
* gsl;;stats;;minmax (function):         Routines<3>.         (line 180)
* gsl;;stats;;minmax_index (function):   Routines<3>.         (line 195)
* gsl;;stats;;min_index (function):      Routines<3>.         (line 185)
* gsl;;stats;;quantile_from_sorted_data (function): Routines<3>.
                                                              (line 206)
* gsl;;stats;;sd (function):             Routines<3>.         (line  19)
* gsl;;stats;;sd_m (function):           Routines<3>.         (line  23)
* gsl;;stats;;sd_with_fixed_mean (function): Routines<3>.     (line  41)
* gsl;;stats;;skew (function):           Routines<3>.         (line  54)
* gsl;;stats;;skew_m_sd (function):      Routines<3>.         (line  58)
* gsl;;stats;;tss (function):            Routines<3>.         (line  27)
* gsl;;stats;;tss_m (function):          Routines<3>.         (line  31)
* gsl;;stats;;variance (function):       Routines<3>.         (line  10)
* gsl;;stats;;variance (function) <1>:   Routines<3>.         (line  14)
* gsl;;stats;;variance_with_fixed_mean (function): Routines<3>.
                                                              (line  35)
* gsl;;stats;;wabsdev (function):        Routines<3>.         (line 141)
* gsl;;stats;;wabsdev_m (function):      Routines<3>.         (line 145)
* gsl;;stats;;wkurtosis (function):      Routines<3>.         (line 161)
* gsl;;stats;;wkurtosis_m_sd (function): Routines<3>.         (line 166)
* gsl;;stats;;wmean (function):          Routines<3>.         (line  98)
* gsl;;stats;;wsd (function):            Routines<3>.         (line 113)
* gsl;;stats;;wsd_m (function):          Routines<3>.         (line 117)
* gsl;;stats;;wsd_with_fixed_mean (function): Routines<3>.    (line 127)
* gsl;;stats;;wskew (function):          Routines<3>.         (line 151)
* gsl;;stats;;wskew_m_sd (function):     Routines<3>.         (line 155)
* gsl;;stats;;wtss (function):           Routines<3>.         (line 133)
* gsl;;stats;;wtss_m (function):         Routines<3>.         (line 137)
* gsl;;stats;;wvariance (function):      Routines<3>.         (line 102)
* gsl;;stats;;wvariance_m (function):    Routines<3>.         (line 107)
* gsl;;stats;;wvariance_with_fixed_mean (function): Routines<3>.
                                                              (line 121)
* mod (infix function):                  Matrix Operators and Functions.
                                                              (line  89)
* mod (infix function) <1>:              Matrix Operators and Functions.
                                                              (line  95)
* mod (infix function) <2>:              Matrix Operators and Functions.
                                                              (line 101)
* not (prefix function):                 Matrix Operators and Functions.
                                                              (line 105)
* or (infix function):                   Matrix Operators and Functions.
                                                              (line 162)
* or (infix function) <1>:               Matrix Operators and Functions.
                                                              (line 170)
* pow (function):                        Matrix Operators and Functions.
                                                              (line 178)



Tag Table:
Node: Top400
Ref: pure-gsl doc597
Ref: 8597
Node: Polynomials5176
Ref: pure-gsl module-gsl poly5267
Ref: 35267
Ref: pure-gsl pure-gsl-gnu-scientific-library-interface-for-pure5267
Ref: 95267
Ref: pure-gsl polynomials5267
Ref: a5267
Ref: pure-gsl module-gsl5267
Ref: 05267
Node: Routines5604
Ref: pure-gsl routines5679
Ref: b5679
Ref: pure-gsl gsl poly eval5706
Ref: c5706
Ref: pure-gsl gsl poly dd_init6116
Ref: d6116
Ref: pure-gsl gsl poly dd_eval6249
Ref: e6249
Ref: pure-gsl gsl poly dd_taylor6394
Ref: f6394
Ref: pure-gsl gsl poly solve_quadratic6571
Ref: 106571
Ref: pure-gsl gsl poly complex_solve_quadratic6792
Ref: 116792
Ref: pure-gsl gsl poly solve_cubic7024
Ref: 127024
Ref: pure-gsl gsl poly complex_solve_cubic7248
Ref: 137248
Ref: pure-gsl gsl poly complex_solve7488
Ref: 147488
Node: Examples7727
Ref: pure-gsl examples7802
Ref: 157802
Node: Special Functions8904
Ref: pure-gsl special-functions9000
Ref: 169000
Ref: pure-gsl module-gsl sf9000
Ref: 59000
Node: Airy Functions10210
Ref: pure-gsl airy-functions10300
Ref: 1710300
Ref: pure-gsl gsl sf airy_Ai10339
Ref: 1810339
Ref: pure-gsl gsl sf airy_Ai_e10547
Ref: 1910547
Ref: pure-gsl gsl sf airy_Ai_scaled10761
Ref: 1a10761
Ref: pure-gsl gsl sf airy_Ai_scaled_e10990
Ref: 1b10990
Ref: pure-gsl gsl sf airy_Bi11225
Ref: 1c11225
Ref: pure-gsl gsl sf airy_Bi_e11433
Ref: 1d11433
Ref: pure-gsl gsl sf airy_Bi_scaled11647
Ref: 1e11647
Ref: pure-gsl gsl sf airy_Bi_scaled_e11876
Ref: 1f11876
Ref: pure-gsl gsl sf airy_Ai_deriv12111
Ref: 2012111
Ref: pure-gsl gsl sf airy_Ai_deriv_e12337
Ref: 2112337
Ref: pure-gsl gsl sf airy_Ai_deriv_scaled12569
Ref: 2212569
Ref: pure-gsl gsl sf airy_Ai_deriv_scaled_e12816
Ref: 2312816
Ref: pure-gsl gsl sf airy_Bi_deriv13069
Ref: 2413069
Ref: pure-gsl gsl sf airy_Bi_deriv_e13295
Ref: 2513295
Ref: pure-gsl gsl sf airy_Bi_deriv_scaled13527
Ref: 2613527
Ref: pure-gsl gsl sf airy_Bi_deriv_scaled_e13774
Ref: 2713774
Ref: pure-gsl gsl sf airy_zero_Ai14027
Ref: 2814027
Ref: pure-gsl gsl sf airy_zero_Ai_e14115
Ref: 2914115
Ref: pure-gsl gsl sf airy_zero_Bi14207
Ref: 2a14207
Ref: pure-gsl gsl sf airy_zero_Bi_e14295
Ref: 2b14295
Ref: pure-gsl gsl sf airy_zero_Ai_deriv14387
Ref: 2c14387
Ref: pure-gsl gsl sf airy_zero_Ai_deriv_e14487
Ref: 2d14487
Ref: pure-gsl gsl sf airy_zero_Bi_deriv14591
Ref: 2e14591
Ref: pure-gsl gsl sf airy_zero_Bi_deriv_e14691
Ref: 2f14691
Node: Examples<2>14795
Ref: pure-gsl id114910
Ref: 3014910
Node: Bessel Functions17938
Ref: pure-gsl bessel-functions18050
Ref: 3118050
Ref: pure-gsl gsl sf bessel_J018093
Ref: 3218093
Ref: pure-gsl gsl sf bessel_J0_e18175
Ref: 3318175
Ref: pure-gsl gsl sf bessel_J118260
Ref: 3418260
Ref: pure-gsl gsl sf bessel_J1_e18342
Ref: 3518342
Ref: pure-gsl gsl sf bessel_Jn18428
Ref: 3618428
Ref: pure-gsl gsl sf bessel_Jn_e18512
Ref: 3718512
Ref: pure-gsl gsl sf bessel_Jn_array18600
Ref: 3818600
Ref: pure-gsl gsl sf bessel_Y018714
Ref: 3918714
Ref: pure-gsl gsl sf bessel_Y0_e18796
Ref: 3a18796
Ref: pure-gsl gsl sf bessel_Y118882
Ref: 3b18882
Ref: pure-gsl gsl sf bessel_Y1_e18964
Ref: 3c18964
Ref: pure-gsl gsl sf bessel_Yn19050
Ref: 3d19050
Ref: pure-gsl gsl sf bessel_Yn_e19132
Ref: 3e19132
Ref: pure-gsl gsl sf bessel_Yn_array19218
Ref: 3f19218
Ref: pure-gsl gsl sf bessel_I019332
Ref: 4019332
Ref: pure-gsl gsl sf bessel_I0_e19414
Ref: 4119414
Ref: pure-gsl gsl sf bessel_I119500
Ref: 4219500
Ref: pure-gsl gsl sf bessel_I1_e19582
Ref: 4319582
Ref: pure-gsl gsl sf bessel_In19668
Ref: 4419668
Ref: pure-gsl gsl sf bessel_In_e19757
Ref: 4519757
Ref: pure-gsl gsl sf bessel_In_array19849
Ref: 4619849
Ref: pure-gsl gsl sf bessel_I0_scaled19963
Ref: 4719963
Ref: pure-gsl gsl sf bessel_I0_scaled_e20059
Ref: 4820059
Ref: pure-gsl gsl sf bessel_I1_scaled20159
Ref: 4920159
Ref: pure-gsl gsl sf bessel_I1_scaled_e20255
Ref: 4a20255
Ref: pure-gsl gsl sf bessel_In_scaled20355
Ref: 4b20355
Ref: pure-gsl gsl sf bessel_In_scaled_e20458
Ref: 4c20458
Ref: pure-gsl gsl sf bessel_In_scaled_array20565
Ref: 4d20565
Ref: pure-gsl gsl sf bessel_K020686
Ref: 4e20686
Ref: pure-gsl gsl sf bessel_K0_e20768
Ref: 4f20768
Ref: pure-gsl gsl sf bessel_K120854
Ref: 5020854
Ref: pure-gsl gsl sf bessel_K1_e20936
Ref: 5120936
Ref: pure-gsl gsl sf bessel_Kn21022
Ref: 5221022
Ref: pure-gsl gsl sf bessel_Kn_e21111
Ref: 5321111
Ref: pure-gsl gsl sf bessel_Kn_array21203
Ref: 5421203
Ref: pure-gsl gsl sf bessel_K0_scaled21317
Ref: 5521317
Ref: pure-gsl gsl sf bessel_K0_scaled_e21413
Ref: 5621413
Ref: pure-gsl gsl sf bessel_K1_scaled21513
Ref: 5721513
Ref: pure-gsl gsl sf bessel_K1_scaled_e21609
Ref: 5821609
Ref: pure-gsl gsl sf bessel_Kn_scaled21709
Ref: 5921709
Ref: pure-gsl gsl sf bessel_Kn_scaled_e21812
Ref: 5a21812
Ref: pure-gsl gsl sf bessel_Kn_scaled_array21919
Ref: 5b21919
Ref: pure-gsl gsl sf bessel_j022040
Ref: 5c22040
Ref: pure-gsl gsl sf bessel_j0_e22122
Ref: 5d22122
Ref: pure-gsl gsl sf bessel_j122208
Ref: 5e22208
Ref: pure-gsl gsl sf bessel_j1_e22290
Ref: 5f22290
Ref: pure-gsl gsl sf bessel_j222376
Ref: 6022376
Ref: pure-gsl gsl sf bessel_j2_e22458
Ref: 6122458
Ref: pure-gsl gsl sf bessel_jl22544
Ref: 6222544
Ref: pure-gsl gsl sf bessel_jl_e22633
Ref: 6322633
Ref: pure-gsl gsl sf bessel_jl_array22726
Ref: 6422726
Ref: pure-gsl gsl sf bessel_jl_steed_array22830
Ref: 6522830
Ref: pure-gsl gsl sf bessel_y022946
Ref: 6622946
Ref: pure-gsl gsl sf bessel_y0_e23028
Ref: 6723028
Ref: pure-gsl gsl sf bessel_y123114
Ref: 6823114
Ref: pure-gsl gsl sf bessel_y1_e23196
Ref: 6923196
Ref: pure-gsl gsl sf bessel_y223282
Ref: 6a23282
Ref: pure-gsl gsl sf bessel_y2_e23364
Ref: 6b23364
Ref: pure-gsl gsl sf bessel_yl23450
Ref: 6c23450
Ref: pure-gsl gsl sf bessel_yl_e23539
Ref: 6d23539
Ref: pure-gsl gsl sf bessel_yl_array23632
Ref: 6e23632
Ref: pure-gsl gsl sf bessel_i0_scaled23736
Ref: 6f23736
Ref: pure-gsl gsl sf bessel_i0_scaled_e23832
Ref: 7023832
Ref: pure-gsl gsl sf bessel_i1_scaled23932
Ref: 7123932
Ref: pure-gsl gsl sf bessel_i1_scaled_e24028
Ref: 7224028
Ref: pure-gsl gsl sf bessel_i2_scaled24128
Ref: 7324128
Ref: pure-gsl gsl sf bessel_i2_scaled_e24224
Ref: 7424224
Ref: pure-gsl gsl sf bessel_il_scaled24324
Ref: 7524324
Ref: pure-gsl gsl sf bessel_il_scaled_e24427
Ref: 7624427
Ref: pure-gsl gsl sf bessel_il_scaled_array24534
Ref: 7724534
Ref: pure-gsl gsl sf bessel_k0_scaled24652
Ref: 7824652
Ref: pure-gsl gsl sf bessel_k0_scaled_e24748
Ref: 7924748
Ref: pure-gsl gsl sf bessel_k1_scaled24848
Ref: 7a24848
Ref: pure-gsl gsl sf bessel_k1_scaled_e24944
Ref: 7b24944
Ref: pure-gsl gsl sf bessel_k2_scaled25044
Ref: 7c25044
Ref: pure-gsl gsl sf bessel_k2_scaled_e25140
Ref: 7d25140
Ref: pure-gsl gsl sf bessel_kl_scaled25240
Ref: 7e25240
Ref: pure-gsl gsl sf bessel_kl_scaled_e25343
Ref: 7f25343
Ref: pure-gsl gsl sf bessel_kl_scaled_array25450
Ref: 8025450
Ref: pure-gsl gsl sf bessel_Jnu25568
Ref: 8125568
Ref: pure-gsl gsl sf bessel_Jnu_e25655
Ref: 8225655
Ref: pure-gsl gsl sf bessel_sequence_Jnu_e25746
Ref: 8325746
Ref: pure-gsl gsl sf bessel_Ynu25863
Ref: 8425863
Ref: pure-gsl gsl sf bessel_Ynu_e25950
Ref: 8525950
Ref: pure-gsl gsl sf bessel_Inu26041
Ref: 8626041
Ref: pure-gsl gsl sf bessel_Inu_e26128
Ref: 8726128
Ref: pure-gsl gsl sf bessel_Inu_scaled26219
Ref: 8826219
Ref: pure-gsl gsl sf bessel_Inu_scaled_e26320
Ref: 8926320
Ref: pure-gsl gsl sf bessel_Knu26425
Ref: 8a26425
Ref: pure-gsl gsl sf bessel_Knu_e26512
Ref: 8b26512
Ref: pure-gsl gsl sf bessel_lnKnu26601
Ref: 8c26601
Ref: pure-gsl gsl sf bessel_lnKnu_e26692
Ref: 8d26692
Ref: pure-gsl gsl sf bessel_Knu_scaled26787
Ref: 8e26787
Ref: pure-gsl gsl sf bessel_Knu_scaled_e26888
Ref: 8f26888
Ref: pure-gsl gsl sf bessel_zero_J026993
Ref: 9026993
Ref: pure-gsl gsl sf bessel_zero_J0_e27090
Ref: 9127090
Ref: pure-gsl gsl sf bessel_zero_J127191
Ref: 9227191
Ref: pure-gsl gsl sf bessel_zero_J1_e27288
Ref: 9327288
Ref: pure-gsl gsl sf bessel_zero_Jnu27389
Ref: 9427389
Ref: pure-gsl gsl sf bessel_zero_Jnu_e27491
Ref: 9527491
Node: Examples<3>27595
Ref: pure-gsl id227713
Ref: 9627713
Node: Clausen Functions34279
Ref: pure-gsl clausen-functions34392
Ref: 9734392
Ref: pure-gsl gsl sf clausen34437
Ref: 9834437
Ref: pure-gsl gsl sf clausen_e34515
Ref: 9934515
Node: Examples<4>34597
Ref: pure-gsl id334715
Ref: 9a34715
Node: Colomb Functions34960
Ref: pure-gsl colomb-functions35072
Ref: 9b35072
Ref: pure-gsl gsl sf hydrogenicR_135293
Ref: 9c35293
Ref: pure-gsl gsl sf hydrogenicR_1_e35385
Ref: 9d35385
Ref: pure-gsl gsl sf hydrogenicR35481
Ref: 9e35481
Ref: pure-gsl gsl sf hydrogenicR_e35585
Ref: 9f35585
Ref: pure-gsl gsl sf coulomb_wave_FG_e35693
Ref: a035693
Ref: pure-gsl gsl sf coulomb_wave_F_array35806
Ref: a135806
Ref: pure-gsl gsl sf coulomb_wave_FG_array35930
Ref: a235930
Ref: pure-gsl gsl sf coulomb_wave_FGp_array36056
Ref: a336056
Ref: pure-gsl gsl sf coulomb_wave_sphF_array36184
Ref: a436184
Ref: pure-gsl gsl sf coulomb_CL_e36324
Ref: a536324
Ref: pure-gsl gsl sf coulomb_CL_array36421
Ref: a636421
Node: Examples<5>36534
Ref: pure-gsl id436656
Ref: a736656
Node: Coupling Coefficients37874
Ref: pure-gsl coupling-coefficients37991
Ref: a837991
Ref: pure-gsl gsl sf coupling_3j38044
Ref: a938044
Ref: pure-gsl gsl sf coupling_3j_e38233
Ref: aa38233
Ref: pure-gsl gsl sf coupling_6j38426
Ref: ab38426
Ref: pure-gsl gsl sf coupling_6j_e38615
Ref: ac38615
Ref: pure-gsl gsl sf coupling_9j38808
Ref: ad38808
Ref: pure-gsl gsl sf coupling_9j_e38981
Ref: ae38981
Node: Examples<6>39158
Ref: pure-gsl id539279
Ref: af39279
Node: Dawson Function39859
Ref: pure-gsl dawson-function39970
Ref: b039970
Ref: pure-gsl gsl sf dawson40013
Ref: b140013
Ref: pure-gsl gsl sf dawson_e40089
Ref: b240089
Node: Examples<7>40169
Ref: pure-gsl id640284
Ref: b340284
Node: Debye Functions40471
Ref: pure-gsl debye-functions40582
Ref: b440582
Ref: pure-gsl gsl sf debye_140625
Ref: b540625
Ref: pure-gsl gsl sf debye_1_e40703
Ref: b640703
Ref: pure-gsl gsl sf debye_240785
Ref: b740785
Ref: pure-gsl gsl sf debye_2_e40863
Ref: b840863
Ref: pure-gsl gsl sf debye_340945
Ref: b940945
Ref: pure-gsl gsl sf debye_3_e41023
Ref: ba41023
Ref: pure-gsl gsl sf debye_441105
Ref: bb41105
Ref: pure-gsl gsl sf debye_4_e41183
Ref: bc41183
Ref: pure-gsl gsl sf debye_541265
Ref: bd41265
Ref: pure-gsl gsl sf debye_5_e41343
Ref: be41343
Ref: pure-gsl gsl sf debye_641425
Ref: bf41425
Ref: pure-gsl gsl sf debye_6_e41503
Ref: c041503
Node: Examples<8>41585
Ref: pure-gsl id741696
Ref: c141696
Node: Dilogarithm42441
Ref: pure-gsl dilogarithm42548
Ref: c242548
Ref: pure-gsl gsl sf dilog42583
Ref: c342583
Ref: pure-gsl gsl sf dilog_e42865
Ref: c442865
Node: Examples<9>43122
Ref: pure-gsl id843230
Ref: c543230
Ref: pure-gsl gsl sf multiply_e43597
Ref: c643597
Ref: pure-gsl gsl sf multiply_err_e43683
Ref: c743683
Node: Examples<10>43783
Ref: pure-gsl id943871
Ref: c843871
Node: Matrices44090
Ref: pure-gsl matrices44196
Ref: c944196
Ref: pure-gsl module-gsl matrix44196
Ref: 244196
Ref: Matrices-Footnote-144742
Ref: Matrices-Footnote-244826
Ref: Matrices-Footnote-344902
Node: Matrix Creation44980
Ref: pure-gsl matrix-creation45081
Ref: ca45081
Ref: pure-gsl linear-algebra45081
Ref: cb45081
Ref: pure-gsl gsl matrix zeros45611
Ref: cc45611
Ref: pure-gsl gsl matrix izeros45883
Ref: cd45883
Ref: pure-gsl gsl matrix czeros46161
Ref: ce46161
Ref: pure-gsl gsl matrix ones46437
Ref: cf46437
Ref: pure-gsl gsl matrix iones46705
Ref: d046705
Ref: pure-gsl gsl matrix cones46977
Ref: d146977
Ref: pure-gsl gsl matrix eye47249
Ref: d247249
Ref: pure-gsl gsl matrix ieye47481
Ref: d347481
Ref: pure-gsl gsl matrix ceye47717
Ref: d447717
Node: Matrix Operators and Functions47953
Ref: pure-gsl matrix-operators-and-functions48091
Ref: d548091
Ref: pure-gsl +/gsl_matrix48345
Ref: d648345
Ref: pure-gsl -/gsl_matrix48523
Ref: d748523
Ref: pure-gsl */gsl_matrix48896
Ref: d848896
Ref: d949003
Ref: pure-gsl //gsl_matrix49173
Ref: da49173
Ref: db49439
Ref: pure-gsl \/gsl_matrix49593
Ref: dc49593
Ref: pure-gsl div/gsl_matrix49664
Ref: dd49664
Ref: pure-gsl mod/gsl_matrix50170
Ref: de50170
Ref: pure-gsl not/gsl_matrix50695
Ref: df50695
Ref: pure-gsl ^/gsl_matrix50900
Ref: e050900
Ref: e151148
Ref: pure-gsl <</gsl_matrix51323
Ref: e251323
Ref: pure-gsl >>/gsl_matrix51665
Ref: e351665
Ref: pure-gsl and/gsl_matrix52007
Ref: e452007
Ref: pure-gsl or/gsl_matrix52432
Ref: e552432
Ref: pure-gsl pow/gsl_matrix52940
Ref: e652940
Node: Singular Value Decomposition53164
Ref: pure-gsl singular-value-decomposition53278
Ref: e753278
Ref: pure-gsl gsl matrix svd53985
Ref: e853985
Ref: pure-gsl gsl matrix svd_mod54078
Ref: e954078
Ref: pure-gsl gsl matrix svd_jacobi54266
Ref: ea54266
Ref: pure-gsl gsl matrix svd_solve54423
Ref: eb54423
Ref: pure-gsl gsl matrix pinv54776
Ref: ec54776
Node: Least-Squares Fitting54906
Ref: pure-gsl least-squares-fitting55005
Ref: ed55005
Ref: pure-gsl module-gsl fit55005
Ref: 155005
Node: Routines<2>55374
Ref: pure-gsl id1055466
Ref: ee55466
Ref: pure-gsl gsl fit linear55493
Ref: ef55493
Ref: pure-gsl gsl fit wlinear55740
Ref: f055740
Ref: pure-gsl gsl fit linear_est56011
Ref: f156011
Ref: pure-gsl gsl fit mul56226
Ref: f256226
Ref: pure-gsl gsl fit wmul56450
Ref: f356450
Ref: pure-gsl gsl fit mul_est56685
Ref: f456685
Node: Examples<11>56845
Ref: pure-gsl id1156937
Ref: f556937
Node: Statistics59404
Ref: pure-gsl statistics59522
Ref: f659522
Ref: pure-gsl module-gsl stats59522
Ref: 759522
Node: Routines<3>59845
Ref: pure-gsl id1259926
Ref: f759926
Ref: pure-gsl gsl stats mean59953
Ref: f859953
Ref: pure-gsl gsl stats variance60085
Ref: f960085
Ref: pure-gsl gsl stats sd60377
Ref: fa60377
Ref: pure-gsl gsl stats sd_m60505
Ref: fb60505
Ref: pure-gsl gsl stats tss60642
Ref: fc60642
Ref: pure-gsl gsl stats tss_m60772
Ref: fd60772
Ref: pure-gsl gsl stats variance_with_fixed_mean60911
Ref: fe60911
Ref: pure-gsl gsl stats sd_with_fixed_mean61103
Ref: ff61103
Ref: pure-gsl gsl stats absdev61273
Ref: 10061273
Ref: pure-gsl gsl stats absdev_m61409
Ref: 10161409
Ref: pure-gsl gsl stats skew61554
Ref: 10261554
Ref: pure-gsl gsl stats skew_m_sd61691
Ref: 10361691
Ref: pure-gsl gsl stats kurtosis61846
Ref: 10461846
Ref: pure-gsl gsl stats kurtosis_m_sd61986
Ref: 10561986
Ref: pure-gsl gsl stats lag1_autocorrelation62149
Ref: 10662149
Ref: pure-gsl gsl stats lag1_autocorrelation_m62318
Ref: 10762318
Ref: pure-gsl gsl stats covariance62496
Ref: 10862496
Ref: pure-gsl gsl stats covariance_m62671
Ref: 10962671
Ref: pure-gsl gsl stats correlation62872
Ref: 10a62872
Ref: pure-gsl gsl stats wmean63049
Ref: 10b63049
Ref: pure-gsl gsl stats wvariance63198
Ref: 10c63198
Ref: pure-gsl gsl stats wvariance_m63360
Ref: 10d63360
Ref: pure-gsl gsl stats wsd63541
Ref: 10e63541
Ref: pure-gsl gsl stats wsd_m63686
Ref: 10f63686
Ref: pure-gsl gsl stats wvariance_with_fixed_mean63840
Ref: 11063840
Ref: pure-gsl gsl stats wsd_with_fixed_mean64049
Ref: 11164049
Ref: pure-gsl gsl stats wtss64246
Ref: 11264246
Ref: pure-gsl gsl stats wtss_m64393
Ref: 11364393
Ref: pure-gsl gsl stats wabsdev64549
Ref: 11464549
Ref: pure-gsl gsl stats wabsdev_m64702
Ref: 11564702
Ref: pure-gsl gsl stats wskew64879
Ref: 11664879
Ref: pure-gsl gsl stats wskew_m_sd65028
Ref: 11765028
Ref: pure-gsl gsl stats wkurtosis65210
Ref: 11865210
Ref: pure-gsl gsl stats wkurtosis_m_sd65372
Ref: 11965372
Ref: pure-gsl gsl stats max65554
Ref: 11a65554
Ref: pure-gsl gsl stats min65684
Ref: 11b65684
Ref: pure-gsl gsl stats minmax65814
Ref: 11c65814
Ref: pure-gsl gsl stats min_index66004
Ref: 11d66004
Ref: pure-gsl gsl stats max_index66151
Ref: 11e66151
Ref: pure-gsl gsl stats minmax_index66298
Ref: 11f66298
Ref: pure-gsl gsl stats median_from_sorted_data66518
Ref: 12066518
Ref: pure-gsl gsl stats quantile_from_sorted_data66693
Ref: 12166693
Node: Examples<12>66892
Ref: pure-gsl id1366973
Ref: 12266973
Node: Random Number Distributions69589
Ref: pure-gsl random-number-distributions69693
Ref: 12369693
Ref: pure-gsl module-gsl randist69693
Ref: 469693
Node: Routines<4>70341
Ref: pure-gsl id1470439
Ref: 12470439
Ref: pure-gsl gsl ran ugaussian_pdf70466
Ref: 12570466
Ref: pure-gsl gsl ran gaussian_pdf70554
Ref: 12670554
Ref: pure-gsl gsl ran gaussian_tail_pdf70650
Ref: 12770650
Ref: pure-gsl gsl ran ugaussian_tail_pdf70758
Ref: 12870758
Ref: pure-gsl gsl ran bivariate_gaussian_pdf70862
Ref: 12970862
Ref: pure-gsl gsl ran exponential_pdf70974
Ref: 12a70974
Ref: pure-gsl gsl ran laplace_pdf71073
Ref: 12b71073
Ref: pure-gsl gsl ran exppow_pdf71163
Ref: 12c71163
Ref: pure-gsl gsl ran cauchy_pdf71253
Ref: 12d71253
Ref: pure-gsl gsl ran rayleigh_pdf71341
Ref: 12e71341
Ref: pure-gsl gsl ran rayleigh_tail_pdf71437
Ref: 12f71437
Ref: pure-gsl gsl ran landau_pdf71545
Ref: 13071545
Ref: pure-gsl gsl ran gamma_pdf71631
Ref: 13171631
Ref: pure-gsl gsl ran flat_pdf71719
Ref: 13271719
Ref: pure-gsl gsl ran lognormal_pdf71805
Ref: 13371805
Ref: pure-gsl gsl ran chisq_pdf71908
Ref: 13471908
Ref: pure-gsl gsl ran fdist_pdf71995
Ref: 13571995
Ref: pure-gsl gsl ran tdist_pdf72087
Ref: 13672087
Ref: pure-gsl gsl ran beta_pdf72174
Ref: 13772174
Ref: pure-gsl gsl ran logistic_pdf72260
Ref: 13872260
Ref: pure-gsl gsl ran pareto_pdf72352
Ref: 13972352
Ref: pure-gsl gsl ran weibull_pdf72442
Ref: 13a72442
Ref: pure-gsl gsl ran gumbel1_pdf72534
Ref: 13b72534
Ref: pure-gsl gsl ran gumbel2_pdf72626
Ref: 13c72626
Ref: pure-gsl gsl ran dirichlet_pdf72718
Ref: 13d72718
Ref: pure-gsl gsl ran dirichlet_lnpdf72836
Ref: 13e72836
Ref: pure-gsl gsl ran discrete_preproc72958
Ref: 13f72958
Ref: pure-gsl gsl ran discrete_pdf73094
Ref: 14073094
Ref: pure-gsl gsl ran discrete_free73230
Ref: 14173230
Ref: pure-gsl gsl ran poisson_pdf73330
Ref: 14273330
Ref: pure-gsl gsl ran bernoulli_pdf73426
Ref: 14373426
Ref: pure-gsl gsl ran binomial_pdf73525
Ref: 14473525
Ref: pure-gsl gsl ran multinomial_pdf73629
Ref: 14573629
Ref: pure-gsl gsl ran multinomial_lnpdf73743
Ref: 14673743
Ref: pure-gsl gsl ran negative_binomial_pdf73861
Ref: 14773861
Ref: pure-gsl gsl ran pascal_pdf73978
Ref: 14873978
Ref: pure-gsl gsl ran geometric_pdf74078
Ref: 14974078
Ref: pure-gsl gsl ran hypergeometric_pdf74177
Ref: 14a74177
Ref: pure-gsl gsl ran logarithmic_pdf74317
Ref: 14b74317
Ref: pure-gsl gsl cdf ugaussian_P74420
Ref: 14c74420
Ref: pure-gsl gsl cdf ugaussian_Q74508
Ref: 14d74508
Ref: pure-gsl gsl cdf ugaussian_Pinv74596
Ref: 14e74596
Ref: pure-gsl gsl cdf ugaussian_Qinv74690
Ref: 14f74690
Ref: pure-gsl gsl cdf gaussian_P74784
Ref: 15074784
Ref: pure-gsl gsl cdf gaussian_Q74876
Ref: 15174876
Ref: pure-gsl gsl cdf gaussian_Pinv74968
Ref: 15274968
Ref: pure-gsl gsl cdf guassian_Qinv75066
Ref: 15375066
Ref: pure-gsl gsl cdf exponential_P75164
Ref: 15475164
Ref: pure-gsl gsl cdf exponential_Q75259
Ref: 15575259
Ref: pure-gsl gsl cdf exponential_Pinv75354
Ref: 15675354
Ref: pure-gsl gsl cdf exponential_Qinv75455
Ref: 15775455
Ref: pure-gsl gsl cdf laplace_P75556
Ref: 15875556
Ref: pure-gsl gsl cdf laplace_Q75642
Ref: 15975642
Ref: pure-gsl gsl cdf laplace_Pinv75728
Ref: 15a75728
Ref: pure-gsl gsl cdf laplace_Qinv75820
Ref: 15b75820
Ref: pure-gsl gsl cdf exppow_P75912
Ref: 15c75912
Ref: pure-gsl gsl cdf exppow_Q75998
Ref: 15d75998
Ref: pure-gsl gsl cdf cauchy_P76084
Ref: 15e76084
Ref: pure-gsl gsl cdf cauchy_Q76168
Ref: 15f76168
Ref: pure-gsl gsl cdf cauchy_Pinv76252
Ref: 16076252
Ref: pure-gsl gsl cdf cauchy_Qinv76342
Ref: 16176342
Ref: pure-gsl gsl cdf rayleigh_P76432
Ref: 16276432
Ref: pure-gsl gsl cdf rayleigh_Q76524
Ref: 16376524
Ref: pure-gsl gsl cdf rayleigh_Pinv76616
Ref: 16476616
Ref: pure-gsl gsl cdf rayleigh_Qinv76714
Ref: 16576714
Ref: pure-gsl gsl cdf gamma_P76812
Ref: 16676812
Ref: pure-gsl gsl cdf gamma_Q76896
Ref: 16776896
Ref: pure-gsl gsl cdf gamma_Pinv76980
Ref: 16876980
Ref: pure-gsl gsl cdf gamma_Qinv77070
Ref: 16977070
Ref: pure-gsl gsl cdf flat_P77160
Ref: 16a77160
Ref: pure-gsl gsl cdf flat_Q77242
Ref: 16b77242
Ref: pure-gsl gsl cdf flat_Pinv77324
Ref: 16c77324
Ref: pure-gsl gsl cdf flat_Qinv77412
Ref: 16d77412
Ref: pure-gsl gsl cdf lognormal_P77500
Ref: 16e77500
Ref: pure-gsl gsl cdf lognormal_Q77599
Ref: 16f77599
Ref: pure-gsl gsl cdf lognormal_Pinv77698
Ref: 17077698
Ref: pure-gsl gsl cdf lognormal_Qinv77803
Ref: 17177803
Ref: pure-gsl gsl cdf chisq_P77908
Ref: 17277908
Ref: pure-gsl gsl cdf chisq_Q77991
Ref: 17377991
Ref: pure-gsl gsl cdf chisq_Pinv78074
Ref: 17478074
Ref: pure-gsl gsl cdf chisq_Qinv78163
Ref: 17578163
Ref: pure-gsl gsl cdf fdist_P78252
Ref: 17678252
Ref: pure-gsl gsl cdf fdist_Q78340
Ref: 17778340
Ref: pure-gsl gsl cdf fdist_Pinv78428
Ref: 17878428
Ref: pure-gsl gsl cdf fdist_Qinv78522
Ref: 17978522
Ref: pure-gsl gsl cdf tdist_P78616
Ref: 17a78616
Ref: pure-gsl gsl cdf tdist_Q78699
Ref: 17b78699
Ref: pure-gsl gsl cdf tdist_Pinv78782
Ref: 17c78782
Ref: pure-gsl gsl cdf tdist_Qinv78871
Ref: 17d78871
Ref: pure-gsl gsl cdf beta_P78960
Ref: 17e78960
Ref: pure-gsl gsl cdf beta_Q79042
Ref: 17f79042
Ref: pure-gsl gsl cdf beta_Pinv79124
Ref: 18079124
Ref: pure-gsl gsl cdf beta_Qinv79212
Ref: 18179212
Ref: pure-gsl gsl cdf logistic_P79300
Ref: 18279300
Ref: pure-gsl gsl cdf logistic_Q79388
Ref: 18379388
Ref: pure-gsl gsl cdf logistic_Pinv79476
Ref: 18479476
Ref: pure-gsl gsl cdf logistic_Qinv79570
Ref: 18579570
Ref: pure-gsl gsl cdf pareto_P79664
Ref: 18679664
Ref: pure-gsl gsl cdf pareto_Q79750
Ref: 18779750
Ref: pure-gsl gsl cdf pareto_Pinv79836
Ref: 18879836
Ref: pure-gsl gsl cdf pareto_Qinv79928
Ref: 18979928
Ref: pure-gsl gsl cdf weibull_P80020
Ref: 18a80020
Ref: pure-gsl gsl cdf weibull_Q80108
Ref: 18b80108
Ref: pure-gsl gsl cdf weibull_Pinv80196
Ref: 18c80196
Ref: pure-gsl gsl cdf weibull_Qinv80290
Ref: 18d80290
Ref: pure-gsl gsl cdf gumbel1_P80384
Ref: 18e80384
Ref: pure-gsl gsl cdf gumbel1_Q80472
Ref: 18f80472
Ref: pure-gsl gsl cdf gumbel1_Pinv80560
Ref: 19080560
Ref: pure-gsl gsl cdf gumbel1_Qinv80654
Ref: 19180654
Ref: pure-gsl gsl cdf gumbel2_P80748
Ref: 19280748
Ref: pure-gsl gsl cdf gumbel2_Q80836
Ref: 19380836
Ref: pure-gsl gsl cdf gumbel2_Pinv80924
Ref: 19480924
Ref: pure-gsl gsl cdf gumbel2_Qinv81018
Ref: 19581018
Ref: pure-gsl gsl cdf poisson_P81112
Ref: 19681112
Ref: pure-gsl gsl cdf poisson_Q81204
Ref: 19781204
Ref: pure-gsl gsl cdf binomial_P81296
Ref: 19881296
Ref: pure-gsl gsl cdf binomial_Q81396
Ref: 19981396
Ref: pure-gsl gsl cdf negative_binomial_P81496
Ref: 19a81496
Ref: pure-gsl gsl cdf negative_binomial_Q81609
Ref: 19b81609
Ref: pure-gsl gsl cdf pascal_P81722
Ref: 19c81722
Ref: pure-gsl gsl cdf pascal_Q81818
Ref: 19d81818
Ref: pure-gsl gsl cdf geometric_P81914
Ref: 19e81914
Ref: pure-gsl gsl cdf geometric_Q82009
Ref: 19f82009
Ref: pure-gsl gsl cdf hypergeometric_P82104
Ref: 1a082104
Ref: pure-gsl gsl cdf hypergeometric_Q82240
Ref: 1a182240
Node: Examples<13>82376
Ref: pure-gsl id1582474
Ref: 1a282474
Node: Sorting89588
Ref: pure-gsl sorting89694
Ref: 1a389694
Ref: pure-gsl module-gsl sort89694
Ref: 689694
Node: Routines<5>90004
Ref: pure-gsl id1690082
Ref: 1a490082
Ref: pure-gsl gsl sort_vector90109
Ref: 1a590109
Ref: pure-gsl gsl sort_vector_index90261
Ref: 1a690261
Node: Examples<14>90431
Ref: pure-gsl id1790509
Ref: 1a790509
Node: Module Index90763
Node: Index91009

End Tag Table


Local Variables:
coding: utf-8
End:

This is pure-gsl.info, produced by makeinfo version 4.13 from
pure-gsl.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-gsl: (pure-gsl.info). pure-gsl - GNU Scientific Library Interface for Pure
END-INFO-DIR-ENTRY

     Pure 0.58, September 15, 2013

     Albert Gr채f (Editor)

     Copyright (C) 2009-2013, Albert Gr채f et al


File: pure-gsl.info,  Node: Top,  Next: Polynomials,  Up: (dir)

pure-gsl
********

     Pure 0.58, September 15, 2013

     Albert Gr채f (Editor)

     Copyright (C) 2009-2013, Albert Gr채f et al

  Version 0.11, September 08, 2013

    Albert Graef <<aggraef@gmail.com>> 
    Eddie Rucker <<erucker@bmc.edu>> 

  License: GPL V3 or later, see the accompanying COPYING file

  Building on Pure's GSL-compatible matrix support, this module aims to
provide a complete wrapper for the GNU Scientific Library which
provides a wide range of mathematical routines useful for scientific
programming, number crunching and signal processing applications.

  This is still work in progress, only a small part of the interface is
finished right now. Here is a brief summary of the operations which are
implemented:

   - Matrix-scalar and matrix-matrix arithmetic. This is fairly complete
     and includes matrix multiplication, as well as element-wise
     exponentiation (^) and integer operations (div, mod, bit shifts and
     bitwise logical operations) which aren't actually in the GSL API.

   - SVD (singular value decomposition), as well as the corresponding
     solvers, pseudo inverses and left and right matrix division. This
     is only available for real matrices right now, as GSL doesn't
     implement complex SVD.

   - Random distributions (p.d.f. and c.d.f.) and statistic functions.

   - Polynomial evaluation and roots.

   - Linear least-squares fitting. Multi-fitting is not available yet.

  Installation instructions: Get the latest source from
<https://bitbucket.org/purelang/pure-lang/downloads/pure-gsl-0.11.tar.gz>.
Run `make' to compile the module and `make install' (as root) to
install it in the Pure library directory.  This requires GNU make, and
of course you need to have Pure and GSL installed.  The `make install'
step is only necessary for system-wide installation.

  `make' tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some
variables manually. In particular, `make install prefix=/usr' sets the
installation prefix, and `make PIC=-fPIC' or some similar flag might be
needed for compilation on 64 bit systems. Please see the Makefile for
details.

  The current release requires GSL 1.11 or later and Pure 0.45 or later.
Older GSL versions might still work, but then some operations may be
missing. The latest and greatest GSL version is always available from
<http://www.gnu.org/software/gsl>.

  After installation, you can import the entire GSL interface as
follows:

    using gsl;

For convenience, the different parts of the GSL interface are also
available as separate modules. E.g., if you only need the matrix
operations:

    using gsl::matrix;

In either case, the global `gsl_version' variable reports the installed
GSL version:

    > show gsl_version
    let gsl_version = "1.11";

(This variable used to be defined by the Pure runtime but has been moved
into pure-gsl as of Pure 0.37.)

  Most other operations are declared in separate namespaces which are
in 1-1 correspondence with the module names. Thus, e.g., the
`gsl_poly_eval' routine is named `gsl::poly::eval' in Pure and can be
found in the `gsl::poly' module and namespace. The `using namespace'
declaration can be used to facilitate access to the operations in a
given namespace, e.g.:

    > using gsl::poly;
    > using namespace gsl::poly;
    > eval {1,2,3} 2;
    17

See the `examples' folder in the sources for some examples.

  If you'd like to contribute, please mail the authors or contact us at
<http://groups.google.com/group/pure-lang>.

* Menu:

* Polynomials::
* Special Functions::
* Matrices::
* Least-Squares Fitting::
* Statistics::
* Random Number Distributions::
* Sorting::
* Module Index::
* Index::

 --- The Detailed Node Listing ---

Polynomials

* Routines::
* Examples::

Special Functions

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.

Matrices

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::

Least-Squares Fitting

* Routines: Routines<2>.
* Examples: Examples<11>.

Statistics

* Routines: Routines<3>.
* Examples: Examples<12>.

Random Number Distributions

* Routines: Routines<4>.
* Examples: Examples<13>.

Sorting

* Routines: Routines<5>.
* Examples: Examples<14>.


File: pure-gsl.info,  Node: Polynomials,  Next: Special Functions,  Prev: Top,  Up: Top

1 Polynomials
*************

This module provides Pure wrappers for the GSL polynomial routines. For
detail about the routines, see Chapter 6 of the GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Polynomials.html>.

  Polynomials are represented by vectors (one row matrices).

* Menu:

* Routines::
* Examples::


File: pure-gsl.info,  Node: Routines,  Next: Examples,  Up: Polynomials

1.1 Routines
============

 -- Pure Function: gsl::poly::eval c::matrix x
     implements `gsl_poly_eval', `gsl_poly_complex_eval', and
     `gsl_complex_poly_eval' without the `len' parameter.

     GSL does not supply an integer routine for evaluating polynomials
     with `int' or  `bigint' coefficients. Therefore, an integer
     routine has been provided in pure-gsl using the Chinese Remainder
     Theorem.

 -- Pure Function: gsl::poly::dd_init x::matrix y::matrix
     implements `gsl_poly_dd_init' without the `size' parameter.

 -- Pure Function: gsl::poly::dd_eval dd::matrix xa::matrix x::double
     implements `gsl_poly_dd_eval' without the `size' parameter.

 -- Pure Function: gsl::poly::dd_taylor xp::double dd::matrix xa::matrix
     implements `gsl_poly_dd_taylor' without the `size' and workspace
     `w' arguments.

 -- Pure Function: gsl::poly::solve_quadratic a b c
     implements `gsl_poly_solve_quadratic'.  This function returns a
     list of roots instead of passing them through the parameters `x0'
     and `x1'.

 -- Pure Function: gsl::poly::complex_solve_quadratic a b c
     implements `gsl_poly_complex_solve_quadratic'. This function
     returns a list of roots instead of passing trhough the parameters
     `z0' and `z1'.

 -- Pure Function: gsl::poly::solve_cubic a b c
     implements `gsl_poly_solve_cubic'. This function returns a list of
     roots instead of passing them through the parameters `x0', `x1',
     and `x2'.

 -- Pure Function: gsl::poly::complex_solve_cubic a b c
     implements `gsl_poly_complex_colve_cubic'. This function returns a
     list of roots instead of passing them through the parameters `z0',
     `z1', and `z2'.

 -- Pure Function: gsl::poly::complex_solve c::matrix
     implements `gsl_poly_complex_solve' omitting the parametrs `n' and
     `w'. The GSL routines for creating and freeing the workspace are
     handled automatically.


File: pure-gsl.info,  Node: Examples,  Prev: Routines,  Up: Polynomials

1.2 Examples
============

Usage of each library routine is illustrated below.

    > using gsl::poly;
    > using namespace gsl::poly;
    > eval {1,2,3} 2;
    17
    > eval {1.0,2.0,3.0} (-2.0);
    9.0
    > eval {1, 2, 2} (1+:1);
    3.0+:6.0
    > eval {1+:2, 2+:3, 2+:3} (1+:1);
    -6.0+:11.0
    > let dd = dd_init {1,2,3} {2,4,6};
    > dd;
    {2.0,2.0,0.0}
    > dd_eval dd {1,2,3} 2;
    4.0
    > dd_taylor 0.0 dd {1,2,3};
    {0.0,2.0,0.0}
    > solve_quadratic 2 4 1;
    [-1.70710678118655,-0.292893218813452]
    > solve_quadratic 1 4 4;
    [-2.0,-2.0]
    > solve_quadratic 0 2 1;
    [-0.5]
    > solve_quadratic 1 2 8;
    []
    > complex_solve_quadratic 0 2 1;
    [-0.5+:0.0]
    > complex_solve_quadratic 2 2 3;
    [-0.5+:-1.11803398874989,-0.5+:1.11803398874989]
    > solve_cubic 3 3 1;
    [-1.0,-1.0,-1.0]
    > solve_cubic 3 2 1;
    [-2.32471795724475]
    > complex_solve_cubic 2 2 1;
    [-1.0+:0.0,-0.5+:-0.866025403784439,-0.5+:0.866025403784439]
    > complex_solve {6,1,-7,-1,1};
    [1.0+:0.0,-1.0+:0.0,-2.0+:0.0,3.0+:0.0]



File: pure-gsl.info,  Node: Special Functions,  Next: Matrices,  Prev: Polynomials,  Up: Top

2 Special Functions
*******************

This module is loaded via the command `using gsl::sf' and provides Pure
wrappers for the GSL Special Functions. For details, see Chapter 7 of
the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Special-Functions.html>.

  To load the library, use the Pure command `using gsl::sf'.  Modes for
the functions must be one of:

    GSL_PREC_DOUBLE
    GSL_PREC_SINGLE
    GSL_PREC_APPROX

Results for some of the functions are returned as a Pure list instead of
the `gsl_sf_result' or  `gsl_sf_result_e10' structures in C. In these
cases, the resulting list is one of the following forms.

        - `[val, err]' for the `gsl_sf_result' struct and

        - `[val, err, e10]' for the `gsl_sf_result_e10' struct.

* Menu:

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.


File: pure-gsl.info,  Node: Airy Functions,  Next: Examples<2>,  Up: Special Functions

2.1 Airy Functions
==================

 -- Pure Function: gsl::sf::airy_Ai x
 -- Pure Function: gsl::sf::airy_Ai (x, mode::int)
     implements `gsl_sf_airy_Ai'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_e x
 -- Pure Function: gsl::sf::airy_Ai_e (x, mode::int)
     implements `gsl_sf_airy_Ai_e'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_scaled x
 -- Pure Function: gsl::sf::airy_Ai_scaled (x, mode::int)
     implements `gsl_sf_airy_Ai_scaled'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_scaled_e x
 -- Pure Function: gsl::sf::airy_Ai_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Ai_scaled_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi x
 -- Pure Function: gsl::sf::airy_Bi (x, mode::int)
     implements `gsl_sf_airy_Bi'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_e x
 -- Pure Function: gsl::sf::airy_Bi_e (x, mode::int)
     implements `gsl_sf_airy_Bi_e'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_scaled x
 -- Pure Function: gsl::sf::airy_Bi_scaled (x, mode::int)
     implements `gsl_sf_airy_Bi_scaled'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_scaled_e x
 -- Pure Function: gsl::sf::airy_Bi_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Bi_scaled_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_deriv x
 -- Pure Function: gsl::sf::airy_Ai_deriv (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_deriv_e x
 -- Pure Function: gsl::sf::airy_Ai_deriv_e (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled x
 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_scaled'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled_e x
 -- Pure Function: gsl::sf::airy_Ai_deriv_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_scaled_e'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_deriv x
 -- Pure Function: gsl::sf::airy_Bi_deriv (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_deriv_e x
 -- Pure Function: gsl::sf::airy_Bi_deriv_e (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled x
 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_scaled'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled_e x
 -- Pure Function: gsl::sf::airy_Bi_deriv_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_scaled_e'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Pure Function: gsl::sf::airy_zero_Ai s
     implements `gsl_sf_airy_zero_Ai'.

 -- Pure Function: gsl::sf::airy_zero_Ai_e s
     implements `gsl_sf_airy_zero_Ai_e'.

 -- Pure Function: gsl::sf::airy_zero_Bi s
     implements `gsl_sf_airy_zero_Bi'.

 -- Pure Function: gsl::sf::airy_zero_Bi_e s
     implements `gsl_sf_airy_zero_Bi_e'.

 -- Pure Function: gsl::sf::airy_zero_Ai_deriv s
     implements `gsl_sf_airy_zero_Ai_deriv'.

 -- Pure Function: gsl::sf::airy_zero_Ai_deriv_e s
     implements `gsl_sf_airy_zero_Ai_deriv_e'.

 -- Pure Function: gsl::sf::airy_zero_Bi_deriv s
     implements `gsl_sf_airy_zero_Bi_deriv'.

 -- Pure Function: gsl::sf::airy_zero_Bi_deriv_e s
     implements `gsl_sf_airy_zero_Bi_deriv_e'.


File: pure-gsl.info,  Node: Examples<2>,  Next: Bessel Functions,  Prev: Airy Functions,  Up: Special Functions

2.2 Examples
============

The following illustrate the Airy functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > airy_Ai (-1.2); // defaults to GSL_PREC_DOUBLE
    0.52619437480212
    > airy_Ai_scaled (-1.2);
    0.52619437480212
    > airy_Ai (-1.2,GSL_PREC_APPROX);
    0.526194374771687
    > airy_Ai_scaled (-1.2, GSL_PREC_SINGLE);
    0.526194374771687
    > airy_Ai_e (-1.2);
    [0.52619437480212,1.88330586480371e-15]
    > airy_Ai_e (-1.2,GSL_PREC_APPROX);
    [0.526194374771687,1.01942940819652e-08]
    > airy_Ai_scaled_e (-1.2);
    [0.52619437480212,1.88330586480371e-15]
    > airy_Ai_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.526194374771687,1.01942940819652e-08]
    > airy_Bi (-1.2);
    -0.015821370184632
    > airy_Bi_scaled (-1.2);
    -0.015821370184632
    > airy_Bi (-1.2,GSL_PREC_APPROX);
    -0.0158213701898015
    > airy_Bi_scaled (-1.2, GSL_PREC_SINGLE);
    -0.0158213701898015
    > airy_Bi_e (-1.2);
    [-0.015821370184632,1.31448899295896e-16]
    > airy_Bi_e (-1.2,GSL_PREC_APPROX);
    [-0.0158213701898015,4.10638404843775e-10]
    > airy_Bi_scaled_e (-1.2);
    [-0.015821370184632,1.31448899295896e-16]
    > airy_Bi_scaled_e (-1.2,GSL_PREC_APPROX);
    [-0.0158213701898015,4.10638404843775e-10]
    > airy_Ai_deriv (-1.2); // defaults to GSL_PREC_DOUBLE
    0.107031569272281
    > airy_Ai_deriv_scaled (-1.2);
    0.107031569272281
    > airy_Ai_deriv (-1.2,GSL_PREC_APPROX);
    0.107031569264504
    > airy_Ai_deriv_scaled (-1.2, GSL_PREC_SINGLE);
    0.107031569264504
    > airy_Ai_deriv_e (-1.2);
    [0.107031569272281,3.02919983680384e-16]
    > airy_Ai_deriv_e (-1.2,GSL_PREC_APPROX);
    [0.107031569264504,9.25921017197604e-11]
    > airy_Ai_deriv_scaled_e (-1.2);
    [0.107031569272281,3.02919983680384e-16]
    > airy_Ai_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.107031569264504,9.25921017197604e-11]
    > airy_Bi_deriv (-1.2);
    0.601710157437464
    > airy_Bi_deriv_scaled (-1.2);
    0.601710157437464
    > airy_Bi_deriv (-1.2,GSL_PREC_APPROX);
    0.601710157441937
    > airy_Bi_deriv_scaled (-1.2, GSL_PREC_SINGLE);
    0.601710157441937
    > airy_Bi_deriv_e (-1.2);
    [0.601710157437464,1.7029557943563e-15]
    > airy_Bi_deriv_e (-1.2,GSL_PREC_APPROX);
    [0.601710157441937,5.20534347823991e-10]
    > airy_Bi_deriv_scaled_e (-1.2);
    [0.601710157437464,1.7029557943563e-15]
    > airy_Bi_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.601710157441937,5.20534347823991e-10]
    > airy_zero_Ai 2;
    -4.08794944413097
    > airy_zero_Ai_e 3;
    [-5.52055982809555,1.22581052599448e-15]
    > airy_zero_Bi 2;
    -3.27109330283635
    > airy_zero_Bi_e 3;
    [-4.83073784166202,1.07263927554824e-15]
    > airy_zero_Ai_deriv 2;
    -3.24819758217984
    > airy_zero_Ai_deriv_e 3;
    [-4.82009921117874,1.07027702504564e-15]
    > airy_zero_Bi_deriv 2;
    -4.07315508907183
    > airy_zero_Bi_deriv_e 3;
    [-5.5123957296636,1.22399773198358e-15]



File: pure-gsl.info,  Node: Bessel Functions,  Next: Examples<3>,  Prev: Examples<2>,  Up: Special Functions

2.3 Bessel Functions
====================

 -- Pure Function: gsl::sf::bessel_J0 x
     implements `gsl_sf_bessel_J0'.

 -- Pure Function: gsl::sf::bessel_J0_e x
     implements `gsl_sf_besselJ0_e'.

 -- Pure Function: gsl::sf::bessel_J1 x
     implements `gsl_sf_bessel_J1'.

 -- Pure Function: gsl::sf::bessel_J1_e x
     implements `gsl_sf_bessel_J1_e'.

 -- Pure Function: gsl::sf::bessel_Jn n x
     implements `gsl_sf_bessel_Jn'.

 -- Pure Function: gsl::sf::bessel_Jn_e n x
     implements `gsl_sf_bessel_Jn_e'.

 -- Pure Function: gsl::sf::bessel_Jn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Jn_array'.

 -- Pure Function: gsl::sf::bessel_Y0 x
     implements `gsl_sf_bessel_Y0'.

 -- Pure Function: gsl::sf::bessel_Y0_e x
     implements `gsl_sf_bessel_Y0_e'.

 -- Pure Function: gsl::sf::bessel_Y1 x
     implements `gsl_sf_bessel_Y1'.

 -- Pure Function: gsl::sf::bessel_Y1_e x
     implements `gsl_sf_bessel_Y1_e'.

 -- Pure Function: gsl::sf::bessel_Yn x
     implements `gsl_sf_bessel_Yn'.

 -- Pure Function: gsl::sf::bessel_Yn_e x
     implements `gsl_sf_bessel_Yn_e'.

 -- Pure Function: gsl::sf::bessel_Yn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Yn_array'.

 -- Pure Function: gsl::sf::bessel_I0 x
     implements `gsl_sf_bessel_I0'.

 -- Pure Function: gsl::sf::bessel_I0_e x
     implements `gsl_sf_bessel_I0_e'.

 -- Pure Function: gsl::sf::bessel_I1 x
     implements `gsl_sf_bessel_I1'.

 -- Pure Function: gsl::sf::bessel_I1_e x
     implements `gsl_sf_bessel_I1_e'.

 -- Pure Function: gsl::sf::bessel_In n::int x
     implements `gsl_sf_bessel_In'.

 -- Pure Function: gsl::sf::bessel_In_e n::int x
     implements `gsl_sf_bessel_In_e'

 -- Pure Function: gsl::sf::bessel_In_array nmin::int nmax::int x
     implements `gsl_sf_bessel_In_array'.

 -- Pure Function: gsl::sf::bessel_I0_scaled x
     implements `gsl_sf_bessel_I0_scaled'.

 -- Pure Function: gsl::sf::bessel_I0_scaled_e x
     implements `gsl_sf_bessel_I0_scaled_e'.

 -- Pure Function: gsl::sf::bessel_I1_scaled x
     implements `gsl_sf_bessel_I1_scaled'.

 -- Pure Function: gsl::sf::bessel_I1_scaled_e x
     implements `gsl_sf_bessel_I1_scaled_e'.

 -- Pure Function: gsl::sf::bessel_In_scaled n::int x
     implements `gsl_sf_bessel_In_scaled'.

 -- Pure Function: gsl::sf::bessel_In_scaled_e n::int x
     implements `gsl_sf_bessel_In_scaled_e'.

 -- Pure Function: gsl::sf::bessel_In_scaled_array nmin::int nmax::int x
     implements `gsl_sf_bessel_In_array'.

 -- Pure Function: gsl::sf::bessel_K0 x
     implements `gsl_sf_bessel_K0'.

 -- Pure Function: gsl::sf::bessel_K0_e x
     implements `gsl_sf_bessel_K0_e'.

 -- Pure Function: gsl::sf::bessel_K1 x
     implements `gsl_sf_bessel_K1'.

 -- Pure Function: gsl::sf::bessel_K1_e x
     implements `gsl_sf_bessel_K1_e'.

 -- Pure Function: gsl::sf::bessel_Kn n::int x
     implements `gsl_sf_bessel_Kn'.

 -- Pure Function: gsl::sf::bessel_Kn_e n::int x
     implements `gsl_sf_bessel_Kn_e'

 -- Pure Function: gsl::sf::bessel_Kn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Kn_array'.

 -- Pure Function: gsl::sf::bessel_K0_scaled x
     implements `gsl_sf_bessel_K0_scaled'.

 -- Pure Function: gsl::sf::bessel_K0_scaled_e x
     implements `gsl_sf_bessel_K0_scaled_e'.

 -- Pure Function: gsl::sf::bessel_K1_scaled x
     implements `gsl_sf_bessel_K1_scaled'.

 -- Pure Function: gsl::sf::bessel_K1_scaled_e x
     implements `gsl_sf_bessel_K1_scaled_e'.

 -- Pure Function: gsl::sf::bessel_Kn_scaled n::int x
     implements `gsl_sf_bessel_Kn_scaled'.

 -- Pure Function: gsl::sf::bessel_Kn_scaled_e n::int x
     implements `gsl_sf_bessel_Kn_scaled_e'.

 -- Pure Function: gsl::sf::bessel_Kn_scaled_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Kn_array'.

 -- Pure Function: gsl::sf::bessel_j0 x
     implements `gsl_sf_bessel_j0'.

 -- Pure Function: gsl::sf::bessel_j0_e x
     implements `gsl_sf_bessel_j0_e'.

 -- Pure Function: gsl::sf::bessel_j1 x
     implements `gsl_sf_bessel_j1'.

 -- Pure Function: gsl::sf::bessel_j1_e x
     implements `gsl_sf_bessel_j1_e'.

 -- Pure Function: gsl::sf::bessel_j2 x
     implements `gsl_sf_bessel_j2'.

 -- Pure Function: gsl::sf::bessel_j2_e x
     implements `gsl_sf_bessel_j2_e'.

 -- Pure Function: gsl::sf::bessel_jl l::int x
     implements `gsl_sf_bessel_jl'.

 -- Pure Function: gsl::sf::bessel_jl_e l::int x
     implements `gsl_sf_bessel_jl_e'.

 -- Pure Function: gsl::sf::bessel_jl_array lmax::int x
     implements `gsl_sf_bessel_jl_array'.

 -- Pure Function: gsl::sf::bessel_jl_steed_array lmax::int x
     implements `gsl_sf_bessel_jl_steed_array'.

 -- Pure Function: gsl::sf::bessel_y0 x
     implements `gsl_sf_bessel_y0'.

 -- Pure Function: gsl::sf::bessel_y0_e x
     implements `gsl_sf_bessel_y0_e'.

 -- Pure Function: gsl::sf::bessel_y1 x
     implements `gsl_sf_bessel_y1'.

 -- Pure Function: gsl::sf::bessel_y1_e x
     implements `gsl_sf_bessel_y1_e'.

 -- Pure Function: gsl::sf::bessel_y2 x
     implements `gsl_sf_bessel_y2'.

 -- Pure Function: gsl::sf::bessel_y2_e x
     implements `gsl_sf_bessel_y2_e'.

 -- Pure Function: gsl::sf::bessel_yl l::int x
     implements `gsl_sf_bessel_yl'.

 -- Pure Function: gsl::sf::bessel_yl_e l::int x
     implements `gsl_sf_bessel_yl_e'.

 -- Pure Function: gsl::sf::bessel_yl_array lmax::int x
     implements `gsl_sf_bessel_yl_array'.

 -- Pure Function: gsl::sf::bessel_i0_scaled x
     implements `gsl_sf_bessel_i0_scaled'.

 -- Pure Function: gsl::sf::bessel_i0_scaled_e x
     implements `gsl_sf_bessel_i0_scaled_e'.

 -- Pure Function: gsl::sf::bessel_i1_scaled x
     implements `gsl_sf_bessel_i1_scaled'.

 -- Pure Function: gsl::sf::bessel_i1_scaled_e x
     implements `gsl_sf_bessel_i1_scaled_e'.

 -- Pure Function: gsl::sf::bessel_i2_scaled x
     implements `gsl_sf_bessel_i2_scaled'.

 -- Pure Function: gsl::sf::bessel_i2_scaled_e x
     implements `gsl_sf_bessel_i2_scaled_e'.

 -- Pure Function: gsl::sf::bessel_il_scaled l::int x
     implements `gsl_sf_bessel_il_scaled'.

 -- Pure Function: gsl::sf::bessel_il_scaled_e l::int x
     implements `gsl_sf_bessel_il_scaled_e'.

 -- Pure Function: gsl::sf::bessel_il_scaled_array lmax::int x
     implements `gsl_sf_bessel_il_scaled_array'.

 -- Pure Function: gsl::sf::bessel_k0_scaled x
     implements `gsl_sf_bessel_k0_scaled'.

 -- Pure Function: gsl::sf::bessel_k0_scaled_e x
     implements `gsl_sf_bessel_k0_scaled_e'.

 -- Pure Function: gsl::sf::bessel_k1_scaled x
     implements `gsl_sf_bessel_k1_scaled'.

 -- Pure Function: gsl::sf::bessel_k1_scaled_e x
     implements `gsl_sf_bessel_ik_scaled_e'.

 -- Pure Function: gsl::sf::bessel_k2_scaled x
     implements `gsl_sf_bessel_k2_scaled'.

 -- Pure Function: gsl::sf::bessel_k2_scaled_e x
     implements `gsl_sf_bessel_k2_scaled_e'.

 -- Pure Function: gsl::sf::bessel_kl_scaled l::int x
     implements `gsl_sf_bessel_kl_scaled'.

 -- Pure Function: gsl::sf::bessel_kl_scaled_e l::int x
     implements `gsl_sf_bessel_kl_scaled_e'.

 -- Pure Function: gsl::sf::bessel_kl_scaled_array lmax::int x
     implements `gsl_sf_bessel_il_scaled_array'.

 -- Pure Function: gsl::sf::bessel_Jnu nu x
     implements `gsl_sf_bessel_Jnu'.

 -- Pure Function: gsl::sf::bessel_Jnu_e nu x
     implements `gsl_sf_bessel_Jnu_e'.

 -- Pure Function: gsl::sf::bessel_sequence_Jnu_e nu v::matrix
     implements `gsl_sf_bessel_sequence_Jnu_e'.

 -- Pure Function: gsl::sf::bessel_Ynu nu x
     implements `gsl_sf_bessel_Ynu'.

 -- Pure Function: gsl::sf::bessel_Ynu_e nu x
     implements `gsl_sf_bessel_Ynu_e'.

 -- Pure Function: gsl::sf::bessel_Inu nu x
     implements `gsl_sf_bessel_Inu'.

 -- Pure Function: gsl::sf::bessel_Inu_e nu x
     implements `gsl_sf_bessel_Inu_e'.

 -- Pure Function: gsl::sf::bessel_Inu_scaled nu x
     implements `gsl_sf_bessel_Inu_scaled'.

 -- Pure Function: gsl::sf::bessel_Inu_scaled_e nu x
     implements `gsl_sf_bessel_Inu_scaled_e'.

 -- Pure Function: gsl::sf::bessel_Knu nu x
     implements `gsl_sf_bessel_Knu'.

 -- Pure Function: gsl::sf::bessel_Knu_e nu x
     implements `gsl_sf_bessel_Knu'.

 -- Pure Function: gsl::sf::bessel_lnKnu nu x
     implements `gsl_sf_bessel_lnKnu'.

 -- Pure Function: gsl::sf::bessel_lnKnu_e nu x
     implements `gsl_sf_bessel_lnKnu_e'.

 -- Pure Function: gsl::sf::bessel_Knu_scaled nu x
     implements `gsl_sf_bessel_Knu_scaled'.

 -- Pure Function: gsl::sf::bessel_Knu_scaled_e nu x
     implements `gsl_sf_bessel_Knu_scaled_e'.

 -- Pure Function: gsl::sf::bessel_zero_J0 s::int
     implements `gsl_sf_bessel_zero_J0'.

 -- Pure Function: gsl::sf::bessel_zero_J0_e s::int
     implements `gsl_sf_bessel_zero_J0_e'.

 -- Pure Function: gsl::sf::bessel_zero_J1 s::int
     implements `gsl_sf_bessel_zero_J1'.

 -- Pure Function: gsl::sf::bessel_zero_J1_e s::int
     implements `gsl_sf_bessel_zero_J1_e'.

 -- Pure Function: gsl::sf::bessel_zero_Jnu nu s::int
     implements `gsl_sf_bessel_zero_Jnu'.

 -- Pure Function: gsl::sf::bessel_zero_Jnu_e nu s::int
     implements `gsl_sf_bessel_zero_Jnu'.


File: pure-gsl.info,  Node: Examples<3>,  Next: Clausen Functions,  Prev: Bessel Functions,  Up: Special Functions

2.4 Examples
============

The following illustrate the Bessel functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > bessel_J0 (-1.2);
    0.671132744264363
    > bessel_J0_e 0.75;
    [0.864242275166649,7.07329111491049e-16]
    > bessel_J1 1.2;
    0.498289057567216
    > bessel_J1_e (-0.2);
    [-0.099500832639236,5.00768737808415e-17]
    > bessel_Jn 0 (-1.2);
    0.671132744264363
    > bessel_Jn_e 2 0.75;
    [0.0670739972996506,5.48959386474892e-17]
    > bessel_Jn_array 0 4 0.5;
    [0.938469807240813,0.242268457674874,0.0306040234586826,
     0.00256372999458724,0.000160736476364288]
    > bessel_Y0 0.25;
    -0.931573024930059
    > bessel_Y0_e 0.25;
    [-0.931573024930059,6.4279898430593e-16]
    > bessel_Y1 0.125;
    -5.19993611253477
    > bessel_Y1_e 4.325;
    [0.343041276811844,2.74577716760089e-16]
    > bessel_Yn 3 4.325;
    -0.0684784962694202
    > bessel_Yn_e 3 4.325;
    [-0.0684784962694202,3.37764590906247e-16]
    > bessel_Yn_array 2 4 1.35;
    [-1.07379345815726,-2.66813016175689,-10.7845628163178]
    > bessel_I0 1.35;
    1.51022709775726
    > bessel_I0_e 1.35;
    [1.51022709775726,2.37852166449918e-15]
    > bessel_I1 0.35;
    0.177693400031422
    > bessel_I1_e 0.35;
    [0.177693400031422,1.55520651386126e-16]
    > bessel_In 2 3.0;
    2.24521244092995
    > bessel_In_e 2 3.0;
    2.24521244092995,5.98244771302867e-15]
    > bessel_In_array 3 5 (-0.1);
    [-2.08463574223272e-05,2.60546902129966e-07,-2.6052519298937e-09]
    > bessel_I0_scaled 1.05;
    0.453242541279856
    > bessel_I0_scaled_e 1.05;
    [0.453242541279856,4.10118141697477e-16]
    > bessel_I1_scaled 1.05;
    0.210226017612868
    > bessel_I1_scaled_e 1.05;
    [0.210226017612868,2.12903131803686e-16]
    > bessel_In_scaled 3 1.05;
    0.00903732602788281
    > bessel_In_scaled_e 3 1.05;
    [0.00903732602788281,2.00668948743994e-17]
    > bessel_In_scaled_array 3 5 1.05;
    [0.00903732602788281,0.0011701685245855,0.000121756316755217]
    > bessel_K0 2.3;
    0.0791399330020936
    > bessel_K0_e 2.3;
    [0.0791399330020936,1.15144454318261e-16]
    > bessel_K1 2.3;
    0.0949824438453627
    > bessel_K1_e 2.3;
    [0.0949824438453627,9.85583638959967e-17]
    > bessel_Kn 2 3.4;
    0.0366633035851529
    > bessel_Kn_e 2 3.4;
    [0.0366633035851529,2.01761856558251e-16]
    > bessel_Kn_array 1 3 2.5;
    [0.0738908163477471,0.121460206278564,0.268227146393449]
    > bessel_K0_scaled 1.5;
    0.367433609054158
    > bessel_K0_scaled_e 1.5;
    [0.958210053294896,1.25816573186951e-14]
    > bessel_K1_scaled 1.5;
    1.24316587355255
    > bessel_K1_scaled_e 1.5;
    [1.24316587355255,2.32370553362606e-15]
    > bessel_Kn_scaled 4 1.5;
    35.4899165934682
    > bessel_Kn_scaled_e 4 1.5;
    [35.4899165934682,3.89252285021454e-14]
    > bessel_Kn_scaled_array 4 6 1.5;
    [35.4899165934682,197.498093175689,1352.14387109806]
    > bessel_j0 0.01;
    0.999983333416666
    > bessel_j0_e 0.01;
    [0.999983333416666,4.44081808400239e-16]
    > bessel_j1 0.2;
    0.0664003806703222
    > bessel_j1_e 0.2;
    [0.0664003806703222,2.94876925856268e-17]
    > bessel_j2 0.3;
    0.00596152486862022
    > bessel_j2_e 0.3;
    [0.00596152486862022,2.64744886840705e-18]
    > bessel_jl 4 0.3;
    8.53642426502516e-06
    > bessel_jl_e 4 0.3;
    [8.53642426502516e-06,1.02355215483598e-19]
    > bessel_jl_array 2 1.2;
    [0.776699238306022,0.34528456985779,0.0865121863384538]
    > bessel_jl_steed_array 2 1.2;
    [0.776699238306022,0.34528456985779,0.0865121863384538]
    > bessel_y0 1;
    -0.54030230586814
    > bessel_y0_e 3;
    [0.329997498866815,2.93096657048522e-16]
    > bessel_y1 3;
    0.062959163602316
    > bessel_y1_e 3.0;
    [0.062959163602316,1.04609100698801e-16]
    > bessel_yl 3 5;
    -0.0154429099129942
    > bessel_yl_e 3 5;
    [-0.0154429099129942,2.87258769784673e-17]
    > bessel_i0_scaled 3;
    0.166253541303889
    > bessel_i0_scaled_e 3;
    [0.166253541303889,7.38314037924188e-17]
    > bessel_i1_scaled 3;
    0.111661944928148
    > bessel_i1_scaled_e 3;
    [0.111661944928148,4.95878648934625e-17]
    > bessel_i2_scaled 3;
    0.0545915963757409
    > bessel_i2_scaled_e 3;
    [0.0545915963757409,2.42435388989563e-17]
    > bessel_il_scaled 3 1;
    0.0037027398773348
    > bessel_il_scaled_e 3 1;
    [0.0037027398773348,8.46838615599053e-17]
    > bessel_il_scaled_array 3 1;
    [0.432332358381693,0.135335283236613,0.0263265086718556,0.0037027398773348]
    > bessel_k0_scaled 3;
    0.523598775598299
    > bessel_k0_scaled_e 3;
    [0.523598775598299,2.32524566533909e-16]
    > bessel_k1_scaled 4;
    0.490873852123405
    > bessel_k1_scaled_e 4;
    [0.490873852123405,2.17991781125539e-16]
    > bessel_k2_scaled 4;
    0.760854470791278
    > bessel_k2_scaled_e 4;
    [0.760854470791278,3.37887260744586e-16]
    > bessel_kl_scaled 2 4;
    0.760854470791278
    > bessel_kl_scaled_e 2 4;
    [0.760854470791278,3.37887260744586e-16]
    > bessel_kl_scaled_array 2 4;
    [0.392699081698724,0.490873852123405,0.760854470791278]
    > bessel_Jnu 2 2.3;
    0.413914591732062
    > bessel_Jnu_e 2 2.3;
    [0.413914591732062,6.43352513956959e-16]
    > bessel_sequence_Jnu_e 2 {.1,.2,.3};
    [0.00124895865879992,0.00498335415278356,0.011165861949064]
    > bessel_Ynu 1 0.5;
    -1.47147239267024
    > bessel_Ynu_e 1 0.5;
    [-1.47147239267024,8.49504515830242e-15]
    > bessel_Inu 1.2 3.4;
    5.25626563437082
    > bessel_Inu_e 1.2 3.4;
    [5.25626563437082,1.00839636820646e-13]
    > bessel_Inu_scaled 1.2 3.4;
    0.175418771999042
    > bessel_Inu_scaled_e 1.2 3.4;
    [0.175418771999042,3.15501414592188e-15]
    > bessel_Knu 3 3;
    0.122170375757184
    > bessel_Knu_e 3 3;
    [0.122170375757184,4.34036365096743e-16]
    > bessel_lnKnu 3 3;
    -2.10233868587978
    > bessel_lnKnu_e 3 3;
    [-2.10233868587978,4.24157124665032e-15]
    > bessel_Knu_scaled 3 3;
    2.45385759319062
    > bessel_Knu_scaled_e 3 3;
    [2.45385759319062,7.6281217575122e-15]
    > bessel_zero_J0 3;
    8.65372791291102
    > bessel_zero_J0_e 3;
    [8.65372791291102,2.59611837387331e-14]
    > bessel_zero_J1 3;
    10.1734681350627
    > bessel_zero_J1_e 3;
    [10.1734681350627,2.03469362701254e-13]
    > bessel_zero_Jnu 1.2 3;
    10.46769
    > bessel_zero_Jnu_e 1.2 3;
    [10.4676986203553,2.09353972407105e-14]86203553



File: pure-gsl.info,  Node: Clausen Functions,  Next: Examples<4>,  Prev: Examples<3>,  Up: Special Functions

2.5 Clausen Functions
=====================

 -- Pure Function: gsl::sf::clausen x
     implements `gsl_sf_clausen'.

 -- Pure Function: gsl::sf::clausen_e x
     implements `gsl_sf_clausen_e'.


File: pure-gsl.info,  Node: Examples<4>,  Next: Colomb Functions,  Prev: Clausen Functions,  Up: Special Functions

2.6 Examples
============

The following illustrate the Clausen functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > clausen 4.5;
    -0.831839220823219
    > clausen_e 4.5;
    [-0.831839220823219,8.60688668835964e-16]



File: pure-gsl.info,  Node: Colomb Functions,  Next: Examples<5>,  Prev: Examples<4>,  Up: Special Functions

2.7 Colomb Functions
====================

The results of the Coulomb wave functions are returned as a list whose
elements are ordered corresponding to the argument order of the
corresponding C functions in GSL library.

 -- Pure Function: gsl::sf::hydrogenicR_1 Z r
     implements `gsl_sf_hydrogenicR_1'.

 -- Pure Function: gsl::sf::hydrogenicR_1_e Z r
     implements `gsl_sf_hydrogenicR_1_e'.

 -- Pure Function: gsl::sf::hydrogenicR n::int l::int Z r
     implements `gsl_sf_hydrogenicR_1'.

 -- Pure Function: gsl::sf::hydrogenicR_e n::int l::int Z r
     implements `gsl_sf_hydrogenicR_1_e'.

 -- Pure Function: gsl::sf::coulomb_wave_FG_e eta x L_F k::int
     implements `gsl_sf_coulomb_wave_FG_e'.

 -- Pure Function: gsl::sf::coulomb_wave_F_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_F_array'.

 -- Pure Function: gsl::sf::coulomb_wave_FG_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_FG_array'.

 -- Pure Function: gsl::sf::coulomb_wave_FGp_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_FGp_array'.

 -- Pure Function: gsl::sf::coulomb_wave_sphF_array L_min kmax::int eta
          x
     implements `gsl_sf_coulomb_wave_sphF_array'.

 -- Pure Function: gsl::sf::coulomb_CL_e L eta
     implements `gsl_sf_coulomb_wave_CL_e'.

 -- Pure Function: gsl::sf::coulomb_CL_array Lmin kmax eta
     implements `gsl_sf_coulomb_wave_CL_array'.


File: pure-gsl.info,  Node: Examples<5>,  Next: Coupling Coefficients,  Prev: Colomb Functions,  Up: Special Functions

2.8 Examples
============

The following illustrate the Coulomb functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > hydrogenicR_1 0.2 4;
    0.0803784086420537
    > hydrogenicR_1_e 0.2 4;
    [0.0803784086420537,2.85561471862841e-17]
    > hydrogenicR 3 1 0.25 3.2;
    0.00802954301593587
    > hydrogenicR_e 3 1 0.25 3.2;
    [0.00802954301593587,3.90138748076797e-17]
    > coulomb_wave_F_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},0.0]
    > coulomb_wave_FG_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
     {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
    > coulomb_wave_FGp_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
     {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
    > coulomb_wave_sphF_array 1 2 0.5 0.5;
    [{0.0775006613040376,0.0077225661067846,0.000549957809420504},0.0]
    > coulomb_CL_e (-0.5) 3;
    [0.000143036170217949,2.92195771135514e-18]
    > coulomb_CL_array (-0.5) 4 1.5;
    [0.0159218263353144,0.0251746178646226,0.00890057150292734,
     0.00172996014234001,0.000235267570111599]



File: pure-gsl.info,  Node: Coupling Coefficients,  Next: Examples<6>,  Prev: Examples<5>,  Up: Special Functions

2.9 Coupling Coefficients
=========================

 -- Pure Function: gsl::sf::coupling_3j m::matrix
     implements `gsl_sf_coupling_3j' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_3j_e m::matrix
     implements `gsl_sf_coupling_3j_e' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_6j m::matrix
     implements `gsl_sf_coupling_6j' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_6j_e m::matrix
     implements `gsl_sf_coupling_6j_e' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_9j m::matrix
     implements `gsl_sf_coupling_9j' except the input is a 3x3 integer
     matrix instead of six integer arguments.

 -- Pure Function: gsl::sf::coupling_9j_e m::matrix
     implements `gsl_sf_coupling_9j_e' except the input is a 3x3 integer
     matrix instead of six integer arguments.


File: pure-gsl.info,  Node: Examples<6>,  Next: Dawson Function,  Prev: Coupling Coefficients,  Up: Special Functions

2.10 Examples
=============

The following illustrate the coupling coefficient functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > coupling_3j {6,4,2;0,0,0};
    -0.29277002188456
    > coupling_3j_e {6,4,2;0,0,0};
    [-0.29277002188456,1.300160076865e-16]
    > coupling_6j {1,2,3;2,1,2};
    -0.166666666666667
    > coupling_6j_e {1,2,3;2,1,2};
    [-0.166666666666667,2.22044604925031e-16]
    > coupling_9j {1,2,3;2,1,2;1,1,1};
    -0.0962250448649376
    > coupling_9j_e {1,2,3;2,1,2;1,1,1};
    [-0.0962250448649376,4.84948508304183e-16]



File: pure-gsl.info,  Node: Dawson Function,  Next: Examples<7>,  Prev: Examples<6>,  Up: Special Functions

2.11 Dawson Function
====================

 -- Pure Function: gsl::sf::dawson x
     implements `gsl_sf_dawson'.

 -- Pure Function: gsl::sf::dawson_e x
     implements `gsl_sf_dawson_e'.


File: pure-gsl.info,  Node: Examples<7>,  Next: Debye Functions,  Prev: Dawson Function,  Up: Special Functions

2.12 Examples
=============

The following illustrate the dawson functions.

    > dawson 3;/**-
    0.178271030610558
    > dawson_e 3;
    [0.178271030610558,8.9920386788099e-16]



File: pure-gsl.info,  Node: Debye Functions,  Next: Examples<8>,  Prev: Examples<7>,  Up: Special Functions

2.13 Debye Functions
====================

 -- Pure Function: gsl::sf::debye_1 x
     implements `gsl_sf_debye_1'.

 -- Pure Function: gsl::sf::debye_1_e x
     implements `gsl_sf_debye_1_e'.

 -- Pure Function: gsl::sf::debye_2 x
     implements `gsl_sf_debye_2'.

 -- Pure Function: gsl::sf::debye_2_e x
     implements `gsl_sf_debye_2_e'.

 -- Pure Function: gsl::sf::debye_3 x
     implements `gsl_sf_debye_3'.

 -- Pure Function: gsl::sf::debye_3_e x
     implements `gsl_sf_debye_3_e'.

 -- Pure Function: gsl::sf::debye_4 x
     implements `gsl_sf_debye_4'.

 -- Pure Function: gsl::sf::debye_4_e x
     implements `gsl_sf_debye_4_e'.

 -- Pure Function: gsl::sf::debye_5 x
     implements `gsl_sf_debye_5'.

 -- Pure Function: gsl::sf::debye_5_e x
     implements `gsl_sf_debye_5_e'.

 -- Pure Function: gsl::sf::debye_6 x
     implements `gsl_sf_debye_6'.

 -- Pure Function: gsl::sf::debye_6_e x
     implements `gsl_sf_debye_6_e'.


File: pure-gsl.info,  Node: Examples<8>,  Next: Dilogarithm,  Prev: Debye Functions,  Up: Special Functions

2.14 Examples
=============

The following illustrate the debye functions.

    > debye_1 0.4;
    0.904437352623294
    > debye_1_e 0.4;
    [0.904437352623294,3.84040456356756e-16]
    > debye_2 1.4;
    0.613281386045505
    > debye_2_e 1.4;
    [0.613281386045505,5.15090106564116e-16]
    > debye_3 2.4;
    0.370136882985216
    > debye_3_e 2.4;
    [0.370136882985216,6.0792125556598e-16]
    > debye_4 3.4;
    0.205914922541978
    > debye_4_e 3.4;
    [0.205914922541978,7.42872979584512e-16]
    > debye_5 4.4;
    0.107477287722471
    > debye_5_e 4.4;
    [0.107477287722471,2.38647518907499e-17]
    > debye_6 5.4;
    0.0533132925698824
    > debye_6_e 5.4;
    [0.0533132925698824,1.18379289859322e-17]



File: pure-gsl.info,  Node: Dilogarithm,  Next: Examples<9>,  Prev: Examples<8>,  Up: Special Functions

2.15 Dilogarithm
================

 -- Pure Function: gsl::sf::dilog x
     implements `gsl_sf_dilog'.

 -- Pure Function: gsl::sf::dilog (r<:theta)
     implements `gsl_sf_complex_dilog_e' except that results are
     returned as the complex value `re+:im' and the error values are
     not returned.

 -- Pure Function: gsl::sf::dilog_e x
     implements `gsl_sf_dilog_e'.

 -- Pure Function: gsl::sf::dilog_e (r<:theta)
     implements `gsl_sf_complex_dilog_e' except the results are
     returned as the list `[re+:im, re_error, im_error]'.


File: pure-gsl.info,  Node: Examples<9>,  Next: Examples<10>,  Prev: Dilogarithm,  Up: Special Functions

2.16 Examples
=============

The following illustrate the dilog functions.

    > dilog 1.0;
    1.64493406684823
    > dilog (1<:2);
    -0.496658586741567+:0.727146050863279
    > dilog_e (1%3);
    [0.366213229977064,8.22687466397711e-15]
    > dilog_e (1<:3);
    [-0.817454913536463+:0.0980262093913011,3.8224192909699e-15,
     1.47247478976757e-15]


 -- Pure Function: gsl::sf::multiply_e x y
     implements `gsl_sf_multiply_e'.

 -- Pure Function: gsl::sf::multiply_err_e x dx y dy
     implements `gsl_sf_multiply_err_e'.


File: pure-gsl.info,  Node: Examples<10>,  Prev: Examples<9>,  Up: Special Functions

2.17 Examples
=============

The following illustrate the multiply functions.

    > multiply_e 10.0 11.0;
    [110.0,4.88498130835069e-14]
    > multiply_err_e 10.0 0.04 11.0 0.002;
    [110.0,0.460000000000049]



File: pure-gsl.info,  Node: Matrices,  Next: Least-Squares Fitting,  Prev: Special Functions,  Up: Top

3 Matrices
**********

This module is loaded via the command `using gsl::matrix' and provides
wrappers for many of the GSL matrix, BLAS, and linear algebra routines
found in Chapters 8, 12, and 13, respectively of the GSL Reference
Manual:

   * Vectors and Matrices(1)

   * BLAS Support(2)

   * Linear Algebra(3)

  It also contains some general utility functions for creating various
types of matrices.

* Menu:

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::

  ---------- Footnotes ----------

  (1)
http://www.gnu.org/software/gsl/manual/html_node/Vectors-and-Matrices.html

  (2) http://www.gnu.org/software/gsl/manual/html_node/BLAS-Support.html

  (3)
http://www.gnu.org/software/gsl/manual/html_node/Linear-Algebra.html


File: pure-gsl.info,  Node: Matrix Creation,  Next: Matrix Operators and Functions,  Up: Matrices

3.1 Matrix Creation
===================

The utility functions `zeros' and `ones' create matrices with all
elements zero or one, respectively, and `eye' creates identity
matrices. These functions can be invoked either with a pair *(n,m)*
denoting the desired number of rows or columns, or an integer *n* in
which case a square *n* x *n* matrix is created. The result is always a
double matrix. Analogous functions `izeros', `czeros', etc. are
provided to create integer and complex matrices, respectively.

 -- Pure Function: gsl::matrix::zeros (n :: int, m :: int)
     creates an *n* x *m* double matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::zeros n :: int
     creates an *n* x *n* double matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::izeros (n :: int, m :: int)
     creates an *n* x *m* integer matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::izeros n :: int
     creates an *n`x`n* integer matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::czeros (n :: int, m :: int)
     creates an *n* x *m* complex matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::czeros n :: int
     creates an *n* x *n* complex matrix with all of its entries being
     zero.

 -- Pure Function: gsl::matrix::ones (n :: int, m :: int)
     creates an *n* x *m* double matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::ones n :: int
     creates an *n* x *n* double matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::iones (n :: int, m :: int)
     creates an *n* x *m* integer matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::iones n :: int
     creates an *n* x *n* integer matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::cones (n :: int, m :: int)
     creates an *n* x *m* complex matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::cones n :: int
     creates an *n* x *n* complex matrix with all of its entries being
     one.

 -- Pure Function: gsl::matrix::eye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with double entries.

 -- Pure Function: gsl::matrix::eye n :: int
     creates an *n* x *n* identity matrix with double entries.

 -- Pure Function: gsl::matrix::ieye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with integer entries.

 -- Pure Function: gsl::matrix::ieye n :: int
     creates an *n* x *n* identity matrix with integer entries.

 -- Pure Function: gsl::matrix::ceye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with complex entries.

 -- Pure Function: gsl::matrix::ceye n :: int
     creates an *n* x *n* identity matrix with complex entries.


File: pure-gsl.info,  Node: Matrix Operators and Functions,  Next: Singular Value Decomposition,  Prev: Matrix Creation,  Up: Matrices

3.2 Matrix Operators and Functions
==================================

The following operations are defined for constant `a' and matrices `x'
and `y'. Some operators are not defined in the GSL library but are
provided here for convenience.

 -- Pure Function: a + x
 -- Pure Function: x + a
     returns a matrix with entries `a + x!(i,j)'.

 -- Pure Function: x + y
     adds matrix `x' to matrix `y'.

 -- Pure Function: - x
     returns a matrix with entries `- x!(i,j)'. Note that `neg x' is
     equivalent to `- x'.

 -- Pure Function: a - x
     returns a matrix with entries `a - x!(i,j)'.

 -- Pure Function: x - a
     returns a matrix with entries `x!(i,j) - a'.

 -- Pure Function: x - y
     subtracts matrix `y' from matrix `x'.

 -- Pure Function: a * x
 -- Pure Function: x * a
     returns a matrix with entries `a * x!(i,j)'.

 -- Pure Function: x .* y
     multiplies, element-wise, matrix `x' to matrix `y'.

 -- Pure Function: x * y
     multiplies matrix `x' to matrix `y'.

 -- Pure Function: a / x
     returns a matrix with entries `a / x!(i,j)'. Note that matrix `x'
     must not have any zero entries.

 -- Pure Function: x / a
     returns a matrix with entries `x!(i,j) / a'. Note that `a' must be
     nonzero.

 -- Pure Function: x ./ y
     divides, element-wise, matrix *x* by matrix *y*.

 -- Pure Function: x / y
     right divides matrix *x* by matrix *y*.

 -- Pure Function: x \ y
     left divides matrix *x* by matrix *y*.

 -- Pure Function: a div x
     returns an integer matrix with entries `a div x!(i,j)'. Note that
     *a* must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Pure Function: x div a
     returns an integer matrix with entries `x!(i,j) div a'. Note that
     `a' must be a nonzero integer and matrix `x' must have integer
     entries.

 -- Pure Function: x div y
     computes the quotient integer matrix `x' by integer matrix `y'.

 -- Pure Function: a mod x
     returns an integer matrix with entries `a mod x!(i,j)'. Note that
     `a' must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Pure Function: x mod a
     returns an integer matrix with entries `a mod x!(i,j)'. Note that
     `a' must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Pure Function: x mod y
     returns the remainder integer matrix `x' mod integer matrix `y'.

 -- Pure Function: not x
     returns a matrix with integer entries `not x!(i,j)'. Note that `x'
     must be a matrix with integer entries and `not' is the bitwise
     negation operation.

 -- Pure Function: a ^ x
     returns a matrix with entries `a ^ x!(i,j)'. Note that `0^0' is
     defined as 1.

 -- Pure Function: x ^ a
     returns a matrix with entries `x!(i,j) ^ a'. Note that `0^0' is
     defined as 1.

 -- Pure Function: x .^ y
     returns a matrix with entries `x!(i,j) ^ y!(i,j)'.

 -- Pure Function: x ^ y
     returns a matrix with entries `x!(i,j) ^ y!(i,j)'.

 -- Pure Function: x << a
     returns an integer matrix with entries `x!(i,j) << a'. Note that
     `a' must be an integer and matrix `x' must have integer entries.

 -- Pure Function: x << y
     returns an integer matrix with entries `x!(i,j) << y!(i,j)'. Note
     that `x' and `y' must have integer entries.

 -- Pure Function: x >> a
     returns an integer matrix with entries `x!(i,j) >> a'. Note that
     `a' must be an integer and matrix `x' must have integer entries.

 -- Pure Function: x >> y
     returns an integer matrix with entries `x!(i,j) >> y!(i,j)'. Note
     that `x' and `y' must have integer entries.

 -- Pure Function: x and a
 -- Pure Function: a and x
     returns an integer matrix with entries `a and x!(i,j)'. Note that
     `a' must be an integer, matrix `x' must have integer entries, and
     `and' is a bitwise operator.

 -- Pure Function: x and y
     returns an integer matrix with entries `x!(i,j) and y!(i,j)'. Note
     that `x' and `y' must be matrices with integer entries.

 -- Pure Function: x or a
 -- Pure Function: a or x
     returns an integer matrix with entries `a or x!(i,j)'. Note that
     `a' must be an integer, matrix `x' must have integer entries, and
     `or' is a bitwise operator.

 -- Pure Function: x or y
     returns an integer matrix with entries `x!(i,j) or y!(i,j)'. Note
     that `x' and `y' must be matrices with integer entries.

  The `pow' function computes powers of matrices by repeated matrix
multiplication.

 -- Pure Function: pow x :: matrix k :: int
 -- Pure Function: pow x :: matrix k :: bigint
     Raises matrix `x' to the `k' th power. Note `x' must be a square
     matrix and `k' a nonnegative integer.


File: pure-gsl.info,  Node: Singular Value Decomposition,  Prev: Matrix Operators and Functions,  Up: Matrices

3.3 Singular Value Decomposition
================================

For a given *n* x *m* matrix `x', these functions yield a
singular-value decomposition `u', `s', `v' of the matrix such that `x
== u*s*transpose v', where `u' and `v' are orthogonal matrices of
dimensions *n* x *m* and *n* x *n*, respectively, and *s* is a *n* x
*n* diagonal matrix which has the singular values in its diagonal, in
descending order. Note that GSL implements this only for double
matrices right now. Also, GSL only handles the case of square or
overdetermined systems, but we work around that in our wrapper functions
by just adding a suitable number of zero rows in the underdetermined
case.

 -- Pure Function: gsl::matrix::svd x
     singular-value decomposition of matrix `x'.

 -- Pure Function: gsl::matrix::svd_mod x
     This uses the modified Golub-Reinsch algorithm, which is faster if
     `n > m' but needs *O(m^2)* extra memory as internal workspace.

 -- Pure Function: gsl::matrix::svd_jacobi x
     This uses one-sided Jacobi orthogonalization which provides better
     relative accuracy but is slower.

 -- Pure Function: gsl::matrix::svd_solve (u, s, v) b
     Solve the system `Ax=b', using the SVD of `A'. `svd_solve' takes
     the result `(u,s,v)' of a `svd' call, and a column vector `b' of
     the appropriate dimension. The result is another column vector
     solving the system (possibly in the least-squares sense).

 -- Pure Function: gsl::matrix::pinv x
     Computes the pseudo inverse of a matrix from its singular value
     decomposition.


File: pure-gsl.info,  Node: Least-Squares Fitting,  Next: Statistics,  Prev: Matrices,  Up: Top

4 Least-Squares Fitting
***********************

This module is loaded via the command `using gsl::fit' and provides Pure
wrappers for the GSL least-squares fitting routines found in Chapter 36
of the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Least_002dSquares-Fitting.html>.

* Menu:

* Routines: Routines<2>.
* Examples: Examples<11>.


File: pure-gsl.info,  Node: Routines<2>,  Next: Examples<11>,  Up: Least-Squares Fitting

4.1 Routines
============

 -- Pure Function: gsl::fit::linear x::matrix y::matrix
     implements `gsl_fit_linear' without the `xstride', `ystride', and
     `n' parameters. Results are returned as a list `[c0, c1, cov00,
     cov01, cov11, sumsq]'.

 -- Pure Function: gsl::fit::wlinear x::matrix w::matrix y::matrix
     implements `gsl_fit_wlinear' without the `xstride', `wstride',
     `ystride', and `n' parameters. Results are given as a list `[c0,
     c1, cov00, cov01, cov11, chisq]'.

 -- Pure Function: gsl::fit::linear_est x c0::double c1::double
          cov00::double cov01::double cov11::double
     implements `gsl_fit_linear_est'. Results are returned as a list
     `[y, y_err]'.

 -- Pure Function: gsl::fit::mul x::matrix y::matrix
     implements `gsl_fit_mul' omitting the parameters `xstride',
     `ystride', and `n'. Results are returned as a list `[c1, cov11,
     sumsq]'.

 -- Pure Function: gsl::fit::wmul x::matrix w::matrix y::matrix
     implements `gsl_fit_wmul' omitting the parametrs `xstride',
     `ystride', and `n'. Results are returned as a list `[c1, cov11,
     sumsq]'.

 -- Pure Function: gsl::fit::mul_est x c1::double cov11::double
     implements `gsl_fit_mul_est'. Results are returned as a list `[y,
     y_err]'.


File: pure-gsl.info,  Node: Examples<11>,  Prev: Routines<2>,  Up: Least-Squares Fitting

4.2 Examples
============

Usage of each implemented library routine is illustrated below.

    > using gsl::fit;
    > using namespace gsl::fit;

The following code determines the equation for the least-squares line
through the points (1,0.01), (2,1.11), (3,1.9), (4,2.85), and (5,4.01).

    > Y x = '(a + b * x)
    > when
    >   a:b:_ = linear {1,2,3,4,5} {0.01,1.11,1.9,2.85,4.01}
    > end;
    > Y x;
    -0.946+0.974*x
    > eval $ Y 2;
    1.002

The following code illustrates estimating y-values without constructing
an equation for the least-squares line determined by the points
`{x1,x2,x3,...,xn}', `{y1,y2,y3,...,yn}'. Here we estimate the
*y*-value at *x* = 1, *x* = 2, and *x* = 3. Compare the output above at
*x* = 2 to the output at *x* = 2 below.

    > let c0:c1:cov00:cov01:cov11:_ = linear {1,2,3,4,5}
    >   {0.01,1.11,1.9,2.85,4.01};
    > linear_est 1 c0 c1 cov00 cov01 cov11;
    [0.028,0.0838570211729465]
    > linear_est 2 c0 c1 cov00 cov01 cov11;
    [1.002,0.0592958683214944]
    > linear_est 3 c0 c1 cov00 cov01 cov11;
    [1.976,0.0484148737476408]

Next, we determine a least-squares line through the points (1,0.01),
(2,1.11), (3,1.9), (4,2.85), and (5,4.01) using weights 0.1, 0.2, 0.3,
0.4, and 0.5.

    > W x = '(a + b * x)
    > when
    >   a:b:_ = wlinear (matrix (1..5))
    >           {0.1, 0.2, 0.3, 0.4, 0.5}
    >           {0.01, 1.11, 1.9, 2.85, 4.01};
    > end;
    > W u;
    -0.99+0.986*u
    > eval $ W 2;
    0.982

The least-squares slope for `Y = c1 * X' using the points (1,3), (2,5),
and (3,7) is calculated below. Also, the *y*-values and standard error
about *x* = 1, 2, and 3 are given.

    > let c1:cov11:sumsq:_ = mul {1,2,3} {3,5,7};
    > mul_est 1 c1 cov11;
    [2.42857142857143,0.123717914826348]
    > mul_est 2 c1 cov11;
    [4.85714285714286,0.247435829652697]
    > mul_est 3 c1 cov11;
    [7.28571428571428,0.371153744479045]

The least-squares slope for `Y = c1 * X' using the points (1,3), (2,5),
and (3,7), and weights 0.4, 0.9, and 0.4 is calculated below.  The
approximation of y-values and standard error about *x* = 1, 2, and 3
follows.

    > let c1:cov11:sumsq:_ = wmul {1,2,3} {0.4,0.9,0.4} {3,5,7};
    > mul_est 1 c1 cov11;
    [2.44736842105263,0.362738125055006]
    > mul_est 2 c1 cov11;
    [4.89473684210526,0.725476250110012]
    > mul_est 3 c1 cov11;
    [7.34210526315789,1.08821437516502]



File: pure-gsl.info,  Node: Statistics,  Next: Random Number Distributions,  Prev: Least-Squares Fitting,  Up: Top

5 Statistics
************

This module is loaded via the command `using gsl::stats' and provides
Pure wrappers for the GSL Statistics routines found in Chapter 20 of the
GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Statistics.html>.

* Menu:

* Routines: Routines<3>.
* Examples: Examples<12>.


File: pure-gsl.info,  Node: Routines<3>,  Next: Examples<12>,  Up: Statistics

5.1 Routines
============

 -- Pure Function: gsl::stats::mean data::matrix
     implements `gsl_stats_mean' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::variance data::matrix
     implements `gsl_stats_variance' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::variance data::matrix mean
     implements `gsl_stats_variance_m' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::sd data::matrix
     implements `gsl_stats_sd' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::sd_m data::matrix mean
     implements `gsl_stats_sd_m' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::tss data::matrix
     implements `gsl_stats_tss' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::tss_m data::matrix mean
     implements `gsl_stats_tss_m' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::variance_with_fixed_mean data::matrix
          mean
     implements `gsl_stats_variance_with_fixed_mean' without `stride'
     and `n' arguments.

 -- Pure Function: gsl::stats::sd_with_fixed_mean data::matrix mean
     implements `gsl_stats_sd_with_fixed_mean' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::absdev data::matrix
     implements `gsl_stats_absdev' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::absdev_m data::matrix mean
     implements `gsl_stats_absdev_m' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::skew data::matrix mean
     implements `gsl_stats_skew' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::skew_m_sd data::matrix mean sd
     implements `gsl_stats_skew_m_sd' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::kurtosis data::matrix
     implements `gsl_stats_kurtosis' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::kurtosis_m_sd data::matrix mean sd
     implements `gsl_stats_kurtosis_m_sd' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::lag1_autocorrelation data::matrix
     implements `gsl_stats_lag1_autocorrelation' without `stride' and
     `n' arguments.

 -- Pure Function: gsl::stats::lag1_autocorrelation_m data::matrix mean
     implements `gsl_stats_lag1_autocorrelation_m' without `stride' and
     `n' arguments.

 -- Pure Function: gsl::stats::covariance d1::matrix d2::matrix
     implements `gsl_stats_covariance' without `stride1', `stride2',
     and `n' arguments.

 -- Pure Function: gsl::stats::covariance_m d1::matrix d2::matrix mean1
          mean2
     implements `gsl_stats_covariance_m' without `stride1', `stride2',
     and `n' arguments.

 -- Pure Function: gsl::stats::correlation d1::matrix d2::matrix
     implements `gsl_stats_correlation' without `stride1', `stride2',
     and `n' arguments.

 -- Pure Function: gsl::stats::wmean weight::matrix data::matrix
     implements `gsl_stats_wmean' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wvariance weight::matrix data::matrix
     implements `gsl_stats_wvariance' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::wvariance_m weight::matrix data::matrix
          mean
     implements `gsl_stats_wvariance_m' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::wsd weight::matrix data::matrix
     implements `gsl_stats_wsd' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wsd_m weight::matrix data::matrix mean
     implements `gsl_stats_wsd_m' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wvariance_with_fixed_mean weight::matrix
          data::matrix mean
     implements `gsl_stats_wvariance_with_fixed_mean' without `stride'
     and `n' arguments.

 -- Pure Function: gsl::stats::wsd_with_fixed_mean weight::matrix
          data::matrix mean
     implements `gsl_stats_wsd_with_fixed_mean' without `stride' and
     `n' arguments.

 -- Pure Function: gsl::stats::wtss weight::matrix data::matrix
     implements `gsl_stats_wtss' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wtss_m weight::matrix data::matrix mean
     implements `gsl_stats_wtss_m' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wabsdev weight::matrix data::matrix
     implements `gsl_stats_wabsdev' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wabsdev_m weight::matrix data::matrix
          mean
     implements `gsl_stats_wabsdev_m' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::wskew weight::matrix data::matrix
     implements `gsl_stats_wskew' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::wskew_m_sd weight::matrix data::matrix
          mean sd
     implements `gsl_stats_wskew_m_sd' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::wkurtosis weight::matrix data::matrix
     implements `gsl_stats_wkurtosis' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::wkurtosis_m_sd weight::matrix
          data::matrix
     implements `gsl_stats_wkurtosis_m_sd' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::max data::matrix
     implements `gsl_stats_max' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::min data::matrix
     implements `gsl_stats_min' without `stride' and `n' arguments.

 -- Pure Function: gsl::stats::minmax data::matrix
     implements `gsl_stats_minmax' without `stride' and `n' arguments.
     Results are returned as a list `[min, max]'.

 -- Pure Function: gsl::stats::min_index data::matrix
     implements `gsl_stats_min_index' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::max_index data::matrix
     implements `gsl_stats_max_index' without `stride' and `n'
     arguments.

 -- Pure Function: gsl::stats::minmax_index data::matrix
     implements `gsl_stats_minmax_index' without `stride' and `n'
     arguments. Results are returned as a list `[min_index, max_index]'.

 -- Pure Function: gsl::stats::median_from_sorted_data data::matrix
     implements `gsl_stats_median_from_sorted_data' without `stride'
     and `n' arguments.

 -- Pure Function: gsl::stats::quantile_from_sorted_data data::matrix
          f::double
     implements `gsl_stats_quantile_from_sorted_data' without `stride'
     and `n' arguments.


File: pure-gsl.info,  Node: Examples<12>,  Prev: Routines<3>,  Up: Statistics

5.2 Examples
============

The following illustrates the use of each function in the `stats'
module.

    > using gsl::stats;
    > using namespace gsl::stats;
    > mean {1,2,3,4,5};
    3.0
    > variance {1,2,3,4,5};
    2.5
    > variance_m {1,2,3,4,5}  4;
    3.75
    > sd {1,2,3,4,5};
    1.58113883008419
    > sd_m {1,2,3,4,5} 4;
    1.93649167310371
    > tss {1,2,3,4,5};
    10.0
    > tss_m {1,2,3,4,5} 4;
    15.0
    > variance_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
    6.314
    > sd_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
    2.51276739870606
    > absdev {2,2,3,4,4};
    0.8
    > absdev_m {2,2,3,4,4} 4;
    1.0
    > skew {1,1,1,1,2,2,2,2,2,2,2,2,3,30};
    2.94796699504537
    > skew_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
    0.0
    > kurtosis  {1,2,2,3,3,3,3,3,3,3,4,4,5};
    -0.230769230769231
    > kurtosis_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
    -0.230769230769231
    > lag1_autocorrelation {1,2,3,4,5};
    0.4
    > lag1_autocorrelation_m {1,2,3,4,5} 2.5;
    0.444444444444444
    > covariance {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0};
    3.75
    > covariance_m {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0} 3 6;
    3.75
    > correlation {1,2,3,4} {2,3,4,5};
    1.0
    > wmean {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    3.93333333333333
    > wvariance {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    2.7752808988764
    > wvariance_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
    3.87640449438202
    > wsd {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    1.66591743459164
    > wsd_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
    1.96885867811329
    > wvariance_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
    1.25
    > wsd_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
    1.11803398874989
    > wtss {1,1,2,2} {2,3,4,5};
    6.83333333333333
    > wtss_m {1,1,2,2} {2,3,4,5} 3.1;
    10.06
    > wabsdev {1,1,2,2} {2,3,4,5};
    0.888888888888889
    > wabsdev_m {1,1,2,2} {2,3,4,5} 3.1;
    1.13333333333333
    > wskew {1,1,2,2} {2,3,4,5};
    -0.299254338484713
    > wskew_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
    1.33526234567901
    > wkurtosis {1,1,2,2} {2,3,4,5};
    -1.96206512878137
    > wkurtosis_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
    -0.681921939300412
    > min {9,4,2,1,9};
    1
    > max {9.1,4.2,2.6,1.1,9.2};
    9.2
    > minmax {9.0,4.0,2.0,1.0,9.0};
    [1.0,9.0]
    > min_index {9.1,4.2,2.6,1.1,9.2};
    3
    > max_index {9,4,2,1,9};
    0
    > minmax_index {9,4,2,1,0,9};
    [4,0]
    > median_from_sorted_data {1.0,2.0,3.0};
    2.0
    > quantile_from_sorted_data {1.0,2.0,3.0} 0.25;
    1.5



File: pure-gsl.info,  Node: Random Number Distributions,  Next: Sorting,  Prev: Statistics,  Up: Top

6 Random Number Distributions
*****************************

This module is loaded via the command `using gsl::randist' and provides
Pure wrappers for the GSL random distribution routines found in Chapter
19 of the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html>.

  There are two namespaces provided by randist.pure, `gsl::ran' for
probability densitity functions and `gsl::cdf' for cumulative
distribution functions. The two namespaces minimize typing of the
prefixes `gsl_ran_' and `gsl_cdf_' respectively.

* Menu:

* Routines: Routines<4>.
* Examples: Examples<13>.


File: pure-gsl.info,  Node: Routines<4>,  Next: Examples<13>,  Up: Random Number Distributions

6.1 Routines
============

 -- Pure Function: gsl::ran::ugaussian_pdf x
     implements `gsl_ran_ugaussian'.

 -- Pure Function: gsl::ran::gaussian_pdf x sigma
     implements `gsl_ran_gaussian_pdf'.

 -- Pure Function: gsl::ran::gaussian_tail_pdf x a sigma
     implements `gsl_ran_gaussian_tail_pdf'.

 -- Pure Function: gsl::ran::ugaussian_tail_pdf x a
     implements `gsl_ran_ugaussian_tail_pdf'.

 -- Pure Function: gsl::ran::bivariate_gaussian_pdf x a
     implements `gsl_ran_bivariate_gaussian_pdf'.

 -- Pure Function: gsl::ran::exponential_pdf x mu
     implements `gsl_ran_exponential_pdf'.

 -- Pure Function: gsl::ran::laplace_pdf x a
     implements `gsl_ran_laplace_pdf'.

 -- Pure Function: gsl::ran::exppow_pdf x a b
     implements `gsl_ran_exppow_pdf'.

 -- Pure Function: gsl::ran::cauchy_pdf x a
     implements `gsl_ran_cauchy_pdf'.

 -- Pure Function: gsl::ran::rayleigh_pdf x sigma
     implements `gsl_ran_rayleigh_pdf'.

 -- Pure Function: gsl::ran::rayleigh_tail_pdf x a sigma
     implements `gsl_ran_rayleigh_tail_pdf'.

 -- Pure Function: gsl::ran::landau_pdf x
     implements `gsl_ran_landau_pdf'.

 -- Pure Function: gsl::ran::gamma_pdf x a b
     implements `gsl_ran_gamma_pdf'.

 -- Pure Function: gsl::ran::flat_pdf x a b
     implements `gsl_ran_flat_pdf'.

 -- Pure Function: gsl::ran::lognormal_pdf x zeta sigma
     implements `gsl_ran_lognormal_pdf'.

 -- Pure Function: gsl::ran::chisq_pdf x nu
     implements `gsl_ran_chisq_pdf'.

 -- Pure Function: gsl::ran::fdist_pdf x nu1 nu2
     implements `gsl_ran_fdist_pdf'.

 -- Pure Function: gsl::ran::tdist_pdf x nu
     implements `gsl_ran_tdist_pdf'.

 -- Pure Function: gsl::ran::beta_pdf x a b
     implements `gsl_ran_beta_pdf'.

 -- Pure Function: gsl::ran::logistic_pdf x a
     implements `gsl_ran_logistic_pdf'.

 -- Pure Function: gsl::ran::pareto_pdf x a b
     implements `gsl_ran_pareto_pdf'.

 -- Pure Function: gsl::ran::weibull_pdf x a b
     implements `gsl_ran_weibull_pdf'.

 -- Pure Function: gsl::ran::gumbel1_pdf x a b
     implements `gsl_ran_gumbel1_pdf'.

 -- Pure Function: gsl::ran::gumbel2_pdf x a b
     implements `gsl_ran_gumbel2_pdf'.

 -- Pure Function: gsl::ran::dirichlet_pdf alpha::matrix theta::matrix
     implements `gsl_ran_dirichlet_pdf'.

 -- Pure Function: gsl::ran::dirichlet_lnpdf alpha::matrix theta::matrix
     implements `gsl_ran_dirichlet_lnpdf'.

 -- Pure Function: gsl::ran::discrete_preproc p::matrix
     implements `gsl_ran_discrete_preproc' without the `K' parameter.

 -- Pure Function: gsl::ran::discrete_pdf k::int p::pointer
     implements `gsl_ran_discrete_pdf' without the `K' parameter.

 -- Pure Function: gsl::ran::discrete_free p::pointer
     implements `gsl_ran_discrete_free'

 -- Pure Function: gsl::ran::poisson_pdf k::int mu
     implements `gsl_ran_poisson_pdf'.

 -- Pure Function: gsl::ran::bernoulli_pdf k::int p
     implements `gsl_ran_bernoulli_pdf'.

 -- Pure Function: gsl::ran::binomial_pdf k::int p n::int
     implements `gsl_ran_binomial_pdf'.

 -- Pure Function: gsl::ran::multinomial_pdf p::matrix n::matrix
     implements `gsl_ran_multinomial_pdf'.

 -- Pure Function: gsl::ran::multinomial_lnpdf p::matrix n::matrix
     implements `gsl_ran_multinomial_lnpdf'.

 -- Pure Function: gsl::ran::negative_binomial_pdf k::int p n
     implements `gsl_ran_negative_binomial_pdf'.

 -- Pure Function: gsl::ran::pascal_pdf k::int p n::int
     implements `gsl_ran_pascal_pdf'.

 -- Pure Function: gsl::ran::geometric_pdf k::int p
     implements `gsl_ran_geometric_pdf'.

 -- Pure Function: gsl::ran::hypergeometric_pdf k::int n1::int n2::int
          t::int
     implements `gsl_ran_hypergeometric_pdf'.

 -- Pure Function: gsl::ran::logarithmic_pdf k::int p
     implements `gsl_ran_logarithmic_pdf'.

 -- Pure Function: gsl::cdf::ugaussian_P x
     implements `gsl_cdf_ugaussian_P'.

 -- Pure Function: gsl::cdf::ugaussian_Q x
     implements `gsl_cdf_ugaussian_Q'.

 -- Pure Function: gsl::cdf::ugaussian_Pinv p
     implements `gsl_cdf_ugaussian_Pinv'.

 -- Pure Function: gsl::cdf::ugaussian_Qinv q
     implements `gsl_cdf_ugaussian_Qinv'.

 -- Pure Function: gsl::cdf::gaussian_P x sigma
     implements `gsl_cdf_gaussian_P'.

 -- Pure Function: gsl::cdf::gaussian_Q x sigma
     implements `gsl_cdf_gaussian_Q'.

 -- Pure Function: gsl::cdf::gaussian_Pinv p sigma
     implements `gsl_cdf_gaussian_Pinv'.

 -- Pure Function: gsl::cdf::guassian_Qinv q sigma
     implements `gsl_cdf_gaussian_Qinv'.

 -- Pure Function: gsl::cdf::exponential_P x mu
     implements `gsl_cdf_exponential_P'.

 -- Pure Function: gsl::cdf::exponential_Q x mu
     implements `gsl_cdf_exponential_Q'.

 -- Pure Function: gsl::cdf::exponential_Pinv p mu
     implements `gsl_cdf_exponential_Pinv'.

 -- Pure Function: gsl::cdf::exponential_Qinv q mu
     implements `gsl_cdf_exponential_Qinv'.

 -- Pure Function: gsl::cdf::laplace_P x a
     implements `gsl_cdf_laplace_P'.

 -- Pure Function: gsl::cdf::laplace_Q x a
     implements `gsl_cdf_laplace_Q'.

 -- Pure Function: gsl::cdf::laplace_Pinv p a
     implements `gsl_cdf_laplace_Pinv'.

 -- Pure Function: gsl::cdf::laplace_Qinv q a
     implements `gsl_cdf_laplace_Qinv'.

 -- Pure Function: gsl::cdf::exppow_P x a b
     implements `gsl_cdf_exppow_P'.

 -- Pure Function: gsl::cdf::exppow_Q x a b
     implements `gsl_cdf_exppow_Q'.

 -- Pure Function: gsl::cdf::cauchy_P x a
     implements `gsl_cdf_cauchy_P'.

 -- Pure Function: gsl::cdf::cauchy_Q x a
     implements `gsl_cdf_cauchy_Q'.

 -- Pure Function: gsl::cdf::cauchy_Pinv p a
     implements `gsl_cdf_cauchy_Pinv'.

 -- Pure Function: gsl::cdf::cauchy_Qinv q a
     implements `gsl_cdf_cauchy_Qinv'.

 -- Pure Function: gsl::cdf::rayleigh_P x sigma
     implements `gsl_cdf_rayleigh_P'.

 -- Pure Function: gsl::cdf::rayleigh_Q x sigma
     implements `gsl_cdf_rayleigh_Q'.

 -- Pure Function: gsl::cdf::rayleigh_Pinv p sigma
     implements `gsl_cdf_rayleigh_Pinv'.

 -- Pure Function: gsl::cdf::rayleigh_Qinv q sigma
     implements `gsl_cdf_rayleigh_Qinv'.

 -- Pure Function: gsl::cdf::gamma_P x a b
     implements `gsl_cdf_gamma_P'.

 -- Pure Function: gsl::cdf::gamma_Q x a b
     implements `gsl_cdf_gamMa_Q'.

 -- Pure Function: gsl::cdf::gamma_Pinv p a b
     implements `gsl_cdf_gamma_Pinv'.

 -- Pure Function: gsl::cdf::gamma_Qinv q a b
     implements `gsl_cdf_gamma_Qinv'.

 -- Pure Function: gsl::cdf::flat_P x a b
     implements `gsl_cdf_flat_P'.

 -- Pure Function: gsl::cdf::flat_Q x a b
     implements `gsl_cdf_flat_Q'.

 -- Pure Function: gsl::cdf::flat_Pinv p a b
     implements `gsl_cdf_flat_Pinv'.

 -- Pure Function: gsl::cdf::flat_Qinv q a b
     implements `gsl_cdf_flat_Qinv'.

 -- Pure Function: gsl::cdf::lognormal_P x zeta sigma
     implements `gsl_cdf_lognormal_P'.

 -- Pure Function: gsl::cdf::lognormal_Q x zeta sigma
     implements `gsl_cdf_lognormal_Q'.

 -- Pure Function: gsl::cdf::lognormal_Pinv p zeta sigma
     implements `gsl_cdf_lognormal_Pinv'.

 -- Pure Function: gsl::cdf::lognormal_Qinv q zeta sigma
     implements `gsl_cdf_lognormal_Qinv'.

 -- Pure Function: gsl::cdf::chisq_P x nu
     implements `gsl_cdf_chisq_P'.

 -- Pure Function: gsl::cdf::chisq_Q x nu
     implements `gsl_cdf_chisq_Q'.

 -- Pure Function: gsl::cdf::chisq_Pinv p nu
     implements `gsl_cdf_chisq_Pinv'.

 -- Pure Function: gsl::cdf::chisq_Qinv q nu
     implements `gsl_cdf_chisq_Qinv'.

 -- Pure Function: gsl::cdf::fdist_P x nu1 nu2
     implements `gsl_cdf_fdist_P'.

 -- Pure Function: gsl::cdf::fdist_Q x nu1 nu2
     implements `gsl_cdf_fdist_Q'.

 -- Pure Function: gsl::cdf::fdist_Pinv p nu1 nu2
     implements `gsl_cdf_fdist_Pinv'.

 -- Pure Function: gsl::cdf::fdist_Qinv q nu1 nu2
     implements `gsl_cdf_fdist_Qinv'.

 -- Pure Function: gsl::cdf::tdist_P x nu
     implements `gsl_cdf_tdist_P'.

 -- Pure Function: gsl::cdf::tdist_Q x nu
     implements `gsl_cdf_tdist_Q'.

 -- Pure Function: gsl::cdf::tdist_Pinv p nu
     implements `gsl_cdf_tdist_Pinv'.

 -- Pure Function: gsl::cdf::tdist_Qinv q nu
     implements `gsl_cdf_tdist_Qinv'.

 -- Pure Function: gsl::cdf::beta_P x a b
     implements `gsl_cdf_beta_P'.

 -- Pure Function: gsl::cdf::beta_Q x a b
     implements `gsl_cdf_beta_Q'.

 -- Pure Function: gsl::cdf::beta_Pinv p a b
     implements `gsl_cdf_beta_Pinv'.

 -- Pure Function: gsl::cdf::beta_Qinv q a b
     implements `gsl_cdf_beta_Qinv'.

 -- Pure Function: gsl::cdf::logistic_P x a
     implements `gsl_cdf_logistic_P'.

 -- Pure Function: gsl::cdf::logistic_Q x a
     implements `gsl_cdf_logistic_Q'.

 -- Pure Function: gsl::cdf::logistic_Pinv p a
     implements `gsl_cdf_logistic_Pinv'.

 -- Pure Function: gsl::cdf::logistic_Qinv q a
     implements `gsl_cdf_logistic_Qinv'.

 -- Pure Function: gsl::cdf::pareto_P x a b
     implements `gsl_cdf_pareto_P'.

 -- Pure Function: gsl::cdf::pareto_Q x a b
     implements `gsl_cdf_pareto_Q'.

 -- Pure Function: gsl::cdf::pareto_Pinv p a b
     implements `gsl_cdf_pareto_Pinv'.

 -- Pure Function: gsl::cdf::pareto_Qinv q a b
     implements `gsl_cdf_pareto_Qinv'.

 -- Pure Function: gsl::cdf::weibull_P x a b
     implements `gsl_cdf_weibull_P'.

 -- Pure Function: gsl::cdf::weibull_Q x a b
     implements `gsl_cdf_weibull_Q'.

 -- Pure Function: gsl::cdf::weibull_Pinv p a b
     implements `gsl_cdf_weibull_Pinv'.

 -- Pure Function: gsl::cdf::weibull_Qinv q a b
     implements `gsl_cdf_weibull_Qinv'.

 -- Pure Function: gsl::cdf::gumbel1_P x a b
     implements `gsl_cdf_gumbel1_P'.

 -- Pure Function: gsl::cdf::gumbel1_Q x a b
     implements `gsl_cdf_gumbel1_Q'.

 -- Pure Function: gsl::cdf::gumbel1_Pinv p a b
     implements `gsl_cdf_gumbel1_Pinv'.

 -- Pure Function: gsl::cdf::gumbel1_Qinv q a b
     implements `gsl_cdf_gumbel1_Qinv'.

 -- Pure Function: gsl::cdf::gumbel2_P x a b
     implements `gsl_cdf_gumbel2_P'.

 -- Pure Function: gsl::cdf::gumbel2_Q x a b
     implements `gsl_cdf_gumbel2_Q'.

 -- Pure Function: gsl::cdf::gumbel2_Pinv p a b
     implements `gsl_cdf_gumbel2_Pinv'.

 -- Pure Function: gsl::cdf::gumbel2_Qinv q a b
     implements `gsl_cdf_gumbel2_Qinv'.

 -- Pure Function: gsl::cdf::poisson_P k::int mu
     implements `gsl_cdf_poisson_P'.

 -- Pure Function: gsl::cdf::poisson_Q k::int mu
     implements `gsl_cdf_poisson_Q'.

 -- Pure Function: gsl::cdf::binomial_P k::int p n::int
     implements `gsl_cdf_binomial_P'.

 -- Pure Function: gsl::cdf::binomial_Q k::int q n::int
     implements `gsl_cdf_binomial_Q'.

 -- Pure Function: gsl::cdf::negative_binomial_P k::int p n
     implements `gsl_cdf_negative_binomial_P'.

 -- Pure Function: gsl::cdf::negative_binomial_Q k::int p n
     implements `gsl_cdf_negative_binomial_Q'.

 -- Pure Function: gsl::cdf::pascal_P k::int p n::int
     implements `gsl_cdf_pascal_P'.

 -- Pure Function: gsl::cdf::pascal_Q k::int p n::int
     implements `gsl_cdf_pascal_Q'.

 -- Pure Function: gsl::cdf::geometric_P k::int p
     implements `gsl_cdf_geometric_P'.

 -- Pure Function: gsl::cdf::geometric_Q k::int p
     implements `gsl_cdf_geometric_Q'.

 -- Pure Function: gsl::cdf::hypergeometric_P k::int n1::int n2::int
          t::int
     implements `gsl_cdf_hypergeometric_P'.

 -- Pure Function: gsl::cdf::hypergeometric_Q k::int n1::int n2::int
          t::int
     implements `gsl_cdf_hypergeometric_Q'.


File: pure-gsl.info,  Node: Examples<13>,  Prev: Routines<4>,  Up: Random Number Distributions

6.2 Examples
============

The following illustrates the use of each function in the `randist'
module.  The pdf functions are illustrated first.

    > using gsl::stats;
    > using namespace gsl::ran;
    > ugaussian_pdf 1.2;
    0.194186054983213
    > gaussian_pdf (-1.3) 1.5;
    0.182690978264686
    > gaussian_tail_pdf 2.0 1.0 1.5;
    0.433042698395299
    > ugaussian_tail_pdf 2.0 1.0;
    0.34030367841782
    > bivariate_gaussian_pdf 1.2 0.9 1.0 1.0 0.95;
    0.184646843689817
    > exponential_pdf 1.0 0.5;
    0.270670566473225
    > laplace_pdf 1.5 2.0;
    0.118091638185254
    > exppow_pdf 0.0 1.0 1.5;
    0.553866083716236
    > cauchy_pdf (-1.0) 1.0;
    0.159154943091895
    > rayleigh_pdf 2.5 1.0;
    0.109842334058519
    > rayleigh_tail_pdf 1.5 1.0 1.0;
    0.802892142778485
    > landau_pdf 1.1;
    0.140968737919623
    > gamma_pdf 1.0 1.0 1.5;
    0.342278079355061
    > flat_pdf 1.0 0.5 2.5;
    0.5
    > lognormal_pdf 0.01 0.0 1.0;
    0.000990238664959182
    > chisq_pdf 1.0 2.0;
    0.303265329856317
    > fdist_pdf 0.5 3.0 2.0;
    0.480970043785452
    > tdist_pdf 0.1 10.0;
    0.386975225815181
    > beta_pdf 0.5 4.0 1.0;
    0.499999999999999
    > logistic_pdf (-1.0) 2.0;
    0.117501856100797
    > pareto_pdf 0.01 3.0 2.0;
    0.0
    > weibull_pdf  0.01 1.0 1.0;
    0.990049833749168
    > gumbel1_pdf 0.01 1.0 1.0;
    0.367861108816436
    > gumbel2_pdf 0.01 1.0 1.0;
    3.72007597602084e-40
    > dirichlet_pdf {0.1,0.2,0.8} {2.0,2.0,2.0};
    0.00501316294425874
    > dirichlet_lnpdf {0.1,0.2,0.8} {2.0,2.0,2.0};
    -5.29568823688856
    > poisson_pdf 4 0.4;
    0.000715008049104682
    > bernoulli_pdf 1 0.7;
    0.7
    > binomial_pdf 3 0.5 9;
    0.1640625
    > multinomial_pdf {0.1,0.2,0.7} {2,2,2};
    0.0
    > multinomial_lnpdf {0.1,0.2,0.7} {2,2,2};
    -1728120799.71174
    > negative_binomial_pdf 10 0.5 3.5;
    0.0122430486923836
    > pascal_pdf 10 0.5 3;
    0.00805664062499999
    > geometric_pdf 5 0.4;
    0.05184
    > hypergeometric_pdf 1 5 20 3;
    0.413043478260872
    > logarithmic_pdf 10 0.7;
    0.00234619293712492
    > test_discrete
    >   = v
    >     when
    >       px = discrete_preproc {0.1,0.3,0.4};
    >       v = discrete_pdf 0 px +
    >           discrete_pdf 1 px +
    >           discrete_pdf 2 px;
    >       _ = discrete_free px
    >     end;
    > test_discrete;
    1.0

The cumulative distribution functions are shown.

    > using namespace gsl::cdf;
    > ugaussian_P  (-1.3);
    0.0968004845856103
    > ugaussian_Q  (-1.3);
    0.90319951541439
    > ugaussian_Pinv  0.84;
    0.994457883209753
    > ugaussian_Qinv  0.84;
    -0.994457883209753
    > gaussian_P  (1.3)  1.5;
    0.806937662858093
    > gaussian_Q  (1.3)  1.5;
    0.193062337141907
    > gaussian_Pinv  0.4  5.0;
    -1.266735515679
    > gaussian_Qinv  0.4 5.0;
    1.266735515679
    > exponential_P  1.0  0.5;
    0.864664716763387
    > exponential_Q  1.0  0.5;
    0.135335283236613
    > exponential_Pinv  0.6  0.5;
    0.458145365937077
    > exponential_Qinv  0.6  0.5;
    0.255412811882995
    > laplace_P  1.5  2.0;
    0.763816723629493
    > laplace_Q  1.5  2.0;
    0.236183276370507
    > laplace_Pinv  0.6  2.0;
    0.446287102628419
    > laplace_Qinv  0.4  2.0;
    0.446287102628419
    > exppow_P  0.0  1.0  2.5;
    0.5
    > exppow_Q  0.0  1.0  0.5;
    0.5
    > cauchy_P  (-1.0)  1.0;
    0.25
    > cauchy_Q  (-1.0)  1.0;
    0.75
    > cauchy_Pinv  0.75  1.0;
    1.0
    > cauchy_Qinv  0.25  1.0;
    1.0
    > rayleigh_P  1.5  2.0;
    0.245160398010993
    > rayleigh_Q  0.5  1.0;
    0.882496902584595
    > rayleigh_Pinv  0.5  1.0;
    1.17741002251547
    > rayleigh_Qinv  0.5  1.0;
    1.17741002251547
    > gamma_P  1.0  1.0  3.0;
    0.283468689426211
    > gamma_Q  1.0  1.0  3.0;
    0.716531310573789
    > gamma_Pinv  0.5  1.0  1.0;
    0.693147180559945
    > gamma_Qinv  0.5  1.0  1.0;
    0.693147180559945
    > flat_P  2.0  1.2  4.8;
    0.222222222222222
    > flat_Q  2.0  1.2  4.8;
    0.777777777777778
    > flat_Pinv  0.2  0.5  2.5;
    0.9
    > flat_Qinv  0.2  0.5  2.5;
    2.1
    > lognormal_P  0.01  0.0  1.0;
    2.06064339597172e-06
    > lognormal_Q  0.01  0.0  1.0;
    0.999997939356604
    > lognormal_Pinv  0.1  0.0  1.0;
    0.27760624185201
    > lognormal_Qinv  0.1  0.0  1.0;
    3.60222447927916
    > chisq_P  1.0  2.0;
    0.393469340287367
    > chisq_Q  1.0  2.0;
    0.606530659712633
    > chisq_Pinv  0.5  2.0;
    0.221199216928595
    > chisq_Qinv  0.5  2.0;
    1.38629436111989
    > fdist_P  1.0  3.0  2.0;
    0.46475800154489
    > fdist_Q  1.0  3.0  2.0;
    0.53524199845511
    > fdist_Pinv  0.5  3.0  2.0;
    1.13494292261288
    > fdist_Qinv  0.5  3.0  2.0;
    1.13494292261288
    > tdist_P  2.1  10.0;
    0.968961377898891
    > tdist_Q  (-2.1)  10.0;
    0.968961377898891
    > tdist_Pinv  0.68  10.0;
    0.482264205919689
    > tdist_Qinv  0.68  10.0;
    -0.482264205919689
    > beta_P  0.75  2.0  2.0;
    0.84375
    > beta_Q  0.75  2.0  2.0;
    0.15625
    > beta_Pinv  0.75  2.0  2.0;
    0.673648177666931
    > beta_Qinv  0.25  2.0  2.0;
    0.673648177666931
    > logistic_P  (-1.0)  2.0;
    1
    > logistic_Q  (-1.0)  2.0;
    0.622459331201855
    > logistic_Pinv  0.75  1.0;
    1.09861228866811
    > logistic_Qinv  0.25  1.0;
    1.09861228866811
    > pareto_P  2.01  3.0  2.0;
    0.0148512406901899
    > pareto_Q  2.01  3.0  2.0;
    0.98514875930981
    > pareto_Pinv  0.1  3.0  2.0;
    2.07148833730257
    > pareto_Qinv  0.1  3.0  2.0;
    4.30886938006377
    > weibull_P  1.01  1.0  2.0;
    0.639441117518024
    > weibull_Q  1.01  2.0  3.0;
    0.879160657465162
    > weibull_Pinv  0.1  1.0  2.0;
    0.324592845974501
    > weibull_Qinv  0.1  1.0  2.0;
    1.51742712938515
    > gumbel1_P  1.01  1.0  1.0;
    0.694739044426344
    > gumbel1_Q  1.01  1.0  1.0;
    0.305260955573656
    > gumbel1_Pinv  0.1  1.0  1.0;
    -0.834032445247956
    > gumbel1_Qinv  0.1  1.0  1.0;
    2.25036732731245
    > gumbel2_P  1.01  1.0  1.0;
    0.371539903071873
    > gumbel2_Q  1.01  1.0  1.0;
    0.628460096928127
    > gumbel2_Pinv  0.1  1.0  1.0;
    0.434294481903252
    > gumbel2_Qinv  0.1  1.0  1.0;
    9.4912215810299
    > poisson_P  4  0.4;
    0.999938756672898
    > poisson_Q  4  0.6;
    0.000394486018340255
    > binomial_P  3  0.5  10;
    0.171874999999999
    > binomial_Q  3  0.5  10;
    0.828125000000001
    > negative_binomial_P  10  0.5  3.0;
    0.98876953125
    > negative_binomial_Q  10  0.5  3.0;
    0.01123046875
    > pascal_P  10  0.5  3;
    0.98876953125
    > pascal_Q  10  0.5  3;
    0.01123046875
    > geometric_P  5  0.4;
    0.92224
    > geometric_Q  5  0.6;
    0.01024
    > hypergeometric_P  1  5  20  3;
    0.908695652173913
    > hypergeometric_Q  1  5  20  3;
    0.0913043478260873



File: pure-gsl.info,  Node: Sorting,  Next: Module Index,  Prev: Random Number Distributions,  Up: Top

7 Sorting
*********

This module is loaded via the command `using gsl::sort' and provides
Pure wrappers for the GSL sorting routines found in Chapter 11 of the
GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Sorting.html>.

* Menu:

* Routines: Routines<5>.
* Examples: Examples<14>.


File: pure-gsl.info,  Node: Routines<5>,  Next: Examples<14>,  Up: Sorting

7.1 Routines
============

 -- Pure Function: gsl::sort_vector m::matrix
     implements `gsl_sort' and `gsl_sort_int' without `stride' and `n'
     parameters.

 -- Pure Function: gsl::sort_vector_index m::matrix
     implements `gsl_sort_index' and `gsl_sort_int_index' without
     `stride' and `n' parameters.


File: pure-gsl.info,  Node: Examples<14>,  Prev: Routines<5>,  Up: Sorting

7.2 Examples
============

Usage of each library routine is illustrated below.

    > using gsl::sort;
    > using namespace gsl;
    > sort_vector {0,3,2,4,5};
    {0,2,3,4,5}
    > sort_vector_index {0.0,1.0,5.0,2.0,8.0,0.0};
    {5,0,1,3,2,4}



File: pure-gsl.info,  Node: Module Index,  Next: Index,  Prev: Sorting,  Up: Top

Module Index
************

* Menu:

* gsl: 0.
* gsl;;fit: 1.
* gsl;;matrix: 2.
* gsl;;poly: 3.
* gsl;;randist: 4.
* gsl;;sf: 5.
* gsl;;sort: 6.
* gsl;;stats: 7.


File: pure-gsl.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* * (infix function):                    Matrix Operators and Functions.
                                                              (line  30)
* + (infix function):                    Matrix Operators and Functions.
                                                              (line  10)
* - (infix function):                    Matrix Operators and Functions.
                                                              (line  21)
* - (prefix function):                   Matrix Operators and Functions.
                                                              (line  17)
* .* (infix function):                   Matrix Operators and Functions.
                                                              (line  34)
* ./ (infix function):                   Matrix Operators and Functions.
                                                              (line  48)
* .^ (infix function):                   Matrix Operators and Functions.
                                                              (line  96)
* / (infix function):                    Matrix Operators and Functions.
                                                              (line  40)
* << (infix function):                   Matrix Operators and Functions.
                                                              (line 102)
* >> (infix function):                   Matrix Operators and Functions.
                                                              (line 110)
* \ (infix function):                    Matrix Operators and Functions.
                                                              (line  54)
* ^ (infix function):                    Matrix Operators and Functions.
                                                              (line  88)
* and (infix function):                  Matrix Operators and Functions.
                                                              (line 118)
* div (infix function):                  Matrix Operators and Functions.
                                                              (line  57)
* gsl (module):                          Top.                 (line  12)
* gsl;;cdf;;beta_P (function):           Routines<4>.         (line 274)
* gsl;;cdf;;beta_Pinv (function):        Routines<4>.         (line 280)
* gsl;;cdf;;beta_Q (function):           Routines<4>.         (line 277)
* gsl;;cdf;;beta_Qinv (function):        Routines<4>.         (line 283)
* gsl;;cdf;;binomial_P (function):       Routines<4>.         (line 352)
* gsl;;cdf;;binomial_Q (function):       Routines<4>.         (line 355)
* gsl;;cdf;;cauchy_P (function):         Routines<4>.         (line 178)
* gsl;;cdf;;cauchy_Pinv (function):      Routines<4>.         (line 184)
* gsl;;cdf;;cauchy_Q (function):         Routines<4>.         (line 181)
* gsl;;cdf;;cauchy_Qinv (function):      Routines<4>.         (line 187)
* gsl;;cdf;;chisq_P (function):          Routines<4>.         (line 238)
* gsl;;cdf;;chisq_Pinv (function):       Routines<4>.         (line 244)
* gsl;;cdf;;chisq_Q (function):          Routines<4>.         (line 241)
* gsl;;cdf;;chisq_Qinv (function):       Routines<4>.         (line 247)
* gsl;;cdf;;exponential_P (function):    Routines<4>.         (line 148)
* gsl;;cdf;;exponential_Pinv (function): Routines<4>.         (line 154)
* gsl;;cdf;;exponential_Q (function):    Routines<4>.         (line 151)
* gsl;;cdf;;exponential_Qinv (function): Routines<4>.         (line 157)
* gsl;;cdf;;exppow_P (function):         Routines<4>.         (line 172)
* gsl;;cdf;;exppow_Q (function):         Routines<4>.         (line 175)
* gsl;;cdf;;fdist_P (function):          Routines<4>.         (line 250)
* gsl;;cdf;;fdist_Pinv (function):       Routines<4>.         (line 256)
* gsl;;cdf;;fdist_Q (function):          Routines<4>.         (line 253)
* gsl;;cdf;;fdist_Qinv (function):       Routines<4>.         (line 259)
* gsl;;cdf;;flat_P (function):           Routines<4>.         (line 214)
* gsl;;cdf;;flat_Pinv (function):        Routines<4>.         (line 220)
* gsl;;cdf;;flat_Q (function):           Routines<4>.         (line 217)
* gsl;;cdf;;flat_Qinv (function):        Routines<4>.         (line 223)
* gsl;;cdf;;gamma_P (function):          Routines<4>.         (line 202)
* gsl;;cdf;;gamma_Pinv (function):       Routines<4>.         (line 208)
* gsl;;cdf;;gamma_Q (function):          Routines<4>.         (line 205)
* gsl;;cdf;;gamma_Qinv (function):       Routines<4>.         (line 211)
* gsl;;cdf;;gaussian_P (function):       Routines<4>.         (line 136)
* gsl;;cdf;;gaussian_Pinv (function):    Routines<4>.         (line 142)
* gsl;;cdf;;gaussian_Q (function):       Routines<4>.         (line 139)
* gsl;;cdf;;geometric_P (function):      Routines<4>.         (line 370)
* gsl;;cdf;;geometric_Q (function):      Routines<4>.         (line 373)
* gsl;;cdf;;guassian_Qinv (function):    Routines<4>.         (line 145)
* gsl;;cdf;;gumbel1_P (function):        Routines<4>.         (line 322)
* gsl;;cdf;;gumbel1_Pinv (function):     Routines<4>.         (line 328)
* gsl;;cdf;;gumbel1_Q (function):        Routines<4>.         (line 325)
* gsl;;cdf;;gumbel1_Qinv (function):     Routines<4>.         (line 331)
* gsl;;cdf;;gumbel2_P (function):        Routines<4>.         (line 334)
* gsl;;cdf;;gumbel2_Pinv (function):     Routines<4>.         (line 340)
* gsl;;cdf;;gumbel2_Q (function):        Routines<4>.         (line 337)
* gsl;;cdf;;gumbel2_Qinv (function):     Routines<4>.         (line 343)
* gsl;;cdf;;hypergeometric_P (function): Routines<4>.         (line 376)
* gsl;;cdf;;hypergeometric_Q (function): Routines<4>.         (line 380)
* gsl;;cdf;;laplace_P (function):        Routines<4>.         (line 160)
* gsl;;cdf;;laplace_Pinv (function):     Routines<4>.         (line 166)
* gsl;;cdf;;laplace_Q (function):        Routines<4>.         (line 163)
* gsl;;cdf;;laplace_Qinv (function):     Routines<4>.         (line 169)
* gsl;;cdf;;logistic_P (function):       Routines<4>.         (line 286)
* gsl;;cdf;;logistic_Pinv (function):    Routines<4>.         (line 292)
* gsl;;cdf;;logistic_Q (function):       Routines<4>.         (line 289)
* gsl;;cdf;;logistic_Qinv (function):    Routines<4>.         (line 295)
* gsl;;cdf;;lognormal_P (function):      Routines<4>.         (line 226)
* gsl;;cdf;;lognormal_Pinv (function):   Routines<4>.         (line 232)
* gsl;;cdf;;lognormal_Q (function):      Routines<4>.         (line 229)
* gsl;;cdf;;lognormal_Qinv (function):   Routines<4>.         (line 235)
* gsl;;cdf;;negative_binomial_P (function): Routines<4>.      (line 358)
* gsl;;cdf;;negative_binomial_Q (function): Routines<4>.      (line 361)
* gsl;;cdf;;pareto_P (function):         Routines<4>.         (line 298)
* gsl;;cdf;;pareto_Pinv (function):      Routines<4>.         (line 304)
* gsl;;cdf;;pareto_Q (function):         Routines<4>.         (line 301)
* gsl;;cdf;;pareto_Qinv (function):      Routines<4>.         (line 307)
* gsl;;cdf;;pascal_P (function):         Routines<4>.         (line 364)
* gsl;;cdf;;pascal_Q (function):         Routines<4>.         (line 367)
* gsl;;cdf;;poisson_P (function):        Routines<4>.         (line 346)
* gsl;;cdf;;poisson_Q (function):        Routines<4>.         (line 349)
* gsl;;cdf;;rayleigh_P (function):       Routines<4>.         (line 190)
* gsl;;cdf;;rayleigh_Pinv (function):    Routines<4>.         (line 196)
* gsl;;cdf;;rayleigh_Q (function):       Routines<4>.         (line 193)
* gsl;;cdf;;rayleigh_Qinv (function):    Routines<4>.         (line 199)
* gsl;;cdf;;tdist_P (function):          Routines<4>.         (line 262)
* gsl;;cdf;;tdist_Pinv (function):       Routines<4>.         (line 268)
* gsl;;cdf;;tdist_Q (function):          Routines<4>.         (line 265)
* gsl;;cdf;;tdist_Qinv (function):       Routines<4>.         (line 271)
* gsl;;cdf;;ugaussian_P (function):      Routines<4>.         (line 124)
* gsl;;cdf;;ugaussian_Pinv (function):   Routines<4>.         (line 130)
* gsl;;cdf;;ugaussian_Q (function):      Routines<4>.         (line 127)
* gsl;;cdf;;ugaussian_Qinv (function):   Routines<4>.         (line 133)
* gsl;;cdf;;weibull_P (function):        Routines<4>.         (line 310)
* gsl;;cdf;;weibull_Pinv (function):     Routines<4>.         (line 316)
* gsl;;cdf;;weibull_Q (function):        Routines<4>.         (line 313)
* gsl;;cdf;;weibull_Qinv (function):     Routines<4>.         (line 319)
* gsl;;fit (module):                     Least-Squares Fitting.
                                                              (line   6)
* gsl;;fit;;linear (function):           Routines<2>.         (line   6)
* gsl;;fit;;linear_est (function):       Routines<2>.         (line  16)
* gsl;;fit;;mul (function):              Routines<2>.         (line  21)
* gsl;;fit;;mul_est (function):          Routines<2>.         (line  31)
* gsl;;fit;;wlinear (function):          Routines<2>.         (line  11)
* gsl;;fit;;wmul (function):             Routines<2>.         (line  26)
* gsl;;matrix (module):                  Matrices.            (line   6)
* gsl;;matrix;;ceye (function):          Matrix Creation.     (line  74)
* gsl;;matrix;;cones (function):         Matrix Creation.     (line  54)
* gsl;;matrix;;czeros (function):        Matrix Creation.     (line  30)
* gsl;;matrix;;eye (function):           Matrix Creation.     (line  62)
* gsl;;matrix;;ieye (function):          Matrix Creation.     (line  68)
* gsl;;matrix;;iones (function):         Matrix Creation.     (line  46)
* gsl;;matrix;;izeros (function):        Matrix Creation.     (line  22)
* gsl;;matrix;;ones (function):          Matrix Creation.     (line  38)
* gsl;;matrix;;pinv (function):          Singular Value Decomposition.
                                                              (line  34)
* gsl;;matrix;;svd (function):           Singular Value Decomposition.
                                                              (line  17)
* gsl;;matrix;;svd_jacobi (function):    Singular Value Decomposition.
                                                              (line  24)
* gsl;;matrix;;svd_mod (function):       Singular Value Decomposition.
                                                              (line  20)
* gsl;;matrix;;svd_solve (function):     Singular Value Decomposition.
                                                              (line  28)
* gsl;;matrix;;zeros (function):         Matrix Creation.     (line  14)
* gsl;;poly (module):                    Polynomials.         (line   6)
* gsl;;poly;;complex_solve (function):   Routines.            (line  45)
* gsl;;poly;;complex_solve_cubic (function): Routines.        (line  40)
* gsl;;poly;;complex_solve_quadratic (function): Routines.    (line  30)
* gsl;;poly;;dd_eval (function):         Routines.            (line  18)
* gsl;;poly;;dd_init (function):         Routines.            (line  15)
* gsl;;poly;;dd_taylor (function):       Routines.            (line  21)
* gsl;;poly;;eval (function):            Routines.            (line   6)
* gsl;;poly;;solve_cubic (function):     Routines.            (line  35)
* gsl;;poly;;solve_quadratic (function): Routines.            (line  25)
* gsl;;ran;;bernoulli_pdf (function):    Routines<4>.         (line  96)
* gsl;;ran;;beta_pdf (function):         Routines<4>.         (line  60)
* gsl;;ran;;binomial_pdf (function):     Routines<4>.         (line  99)
* gsl;;ran;;bivariate_gaussian_pdf (function): Routines<4>.   (line  18)
* gsl;;ran;;cauchy_pdf (function):       Routines<4>.         (line  30)
* gsl;;ran;;chisq_pdf (function):        Routines<4>.         (line  51)
* gsl;;ran;;dirichlet_lnpdf (function):  Routines<4>.         (line  81)
* gsl;;ran;;dirichlet_pdf (function):    Routines<4>.         (line  78)
* gsl;;ran;;discrete_free (function):    Routines<4>.         (line  90)
* gsl;;ran;;discrete_pdf (function):     Routines<4>.         (line  87)
* gsl;;ran;;discrete_preproc (function): Routines<4>.         (line  84)
* gsl;;ran;;exponential_pdf (function):  Routines<4>.         (line  21)
* gsl;;ran;;exppow_pdf (function):       Routines<4>.         (line  27)
* gsl;;ran;;fdist_pdf (function):        Routines<4>.         (line  54)
* gsl;;ran;;flat_pdf (function):         Routines<4>.         (line  45)
* gsl;;ran;;gamma_pdf (function):        Routines<4>.         (line  42)
* gsl;;ran;;gaussian_pdf (function):     Routines<4>.         (line   9)
* gsl;;ran;;gaussian_tail_pdf (function): Routines<4>.        (line  12)
* gsl;;ran;;geometric_pdf (function):    Routines<4>.         (line 114)
* gsl;;ran;;gumbel1_pdf (function):      Routines<4>.         (line  72)
* gsl;;ran;;gumbel2_pdf (function):      Routines<4>.         (line  75)
* gsl;;ran;;hypergeometric_pdf (function): Routines<4>.       (line 117)
* gsl;;ran;;landau_pdf (function):       Routines<4>.         (line  39)
* gsl;;ran;;laplace_pdf (function):      Routines<4>.         (line  24)
* gsl;;ran;;logarithmic_pdf (function):  Routines<4>.         (line 121)
* gsl;;ran;;logistic_pdf (function):     Routines<4>.         (line  63)
* gsl;;ran;;lognormal_pdf (function):    Routines<4>.         (line  48)
* gsl;;ran;;multinomial_lnpdf (function): Routines<4>.        (line 105)
* gsl;;ran;;multinomial_pdf (function):  Routines<4>.         (line 102)
* gsl;;ran;;negative_binomial_pdf (function): Routines<4>.    (line 108)
* gsl;;ran;;pareto_pdf (function):       Routines<4>.         (line  66)
* gsl;;ran;;pascal_pdf (function):       Routines<4>.         (line 111)
* gsl;;ran;;poisson_pdf (function):      Routines<4>.         (line  93)
* gsl;;ran;;rayleigh_pdf (function):     Routines<4>.         (line  33)
* gsl;;ran;;rayleigh_tail_pdf (function): Routines<4>.        (line  36)
* gsl;;ran;;tdist_pdf (function):        Routines<4>.         (line  57)
* gsl;;ran;;ugaussian_pdf (function):    Routines<4>.         (line   6)
* gsl;;ran;;ugaussian_tail_pdf (function): Routines<4>.       (line  15)
* gsl;;ran;;weibull_pdf (function):      Routines<4>.         (line  69)
* gsl;;randist (module):                 Random Number Distributions.
                                                              (line   6)
* gsl;;sf (module):                      Special Functions.   (line   6)
* gsl;;sf;;airy_Ai (function):           Airy Functions.      (line   6)
* gsl;;sf;;airy_Ai_deriv (function):     Airy Functions.      (line  46)
* gsl;;sf;;airy_Ai_deriv_e (function):   Airy Functions.      (line  51)
* gsl;;sf;;airy_Ai_deriv_scaled (function): Airy Functions.   (line  56)
* gsl;;sf;;airy_Ai_deriv_scaled_e (function): Airy Functions. (line  61)
* gsl;;sf;;airy_Ai_e (function):         Airy Functions.      (line  11)
* gsl;;sf;;airy_Ai_scaled (function):    Airy Functions.      (line  16)
* gsl;;sf;;airy_Ai_scaled_e (function):  Airy Functions.      (line  21)
* gsl;;sf;;airy_Bi (function):           Airy Functions.      (line  26)
* gsl;;sf;;airy_Bi_deriv (function):     Airy Functions.      (line  66)
* gsl;;sf;;airy_Bi_deriv_e (function):   Airy Functions.      (line  71)
* gsl;;sf;;airy_Bi_deriv_scaled (function): Airy Functions.   (line  76)
* gsl;;sf;;airy_Bi_deriv_scaled_e (function): Airy Functions. (line  81)
* gsl;;sf;;airy_Bi_e (function):         Airy Functions.      (line  31)
* gsl;;sf;;airy_Bi_scaled (function):    Airy Functions.      (line  36)
* gsl;;sf;;airy_Bi_scaled_e (function):  Airy Functions.      (line  41)
* gsl;;sf;;airy_zero_Ai (function):      Airy Functions.      (line  86)
* gsl;;sf;;airy_zero_Ai_deriv (function): Airy Functions.     (line  98)
* gsl;;sf;;airy_zero_Ai_deriv_e (function): Airy Functions.   (line 101)
* gsl;;sf;;airy_zero_Ai_e (function):    Airy Functions.      (line  89)
* gsl;;sf;;airy_zero_Bi (function):      Airy Functions.      (line  92)
* gsl;;sf;;airy_zero_Bi_deriv (function): Airy Functions.     (line 104)
* gsl;;sf;;airy_zero_Bi_deriv_e (function): Airy Functions.   (line 107)
* gsl;;sf;;airy_zero_Bi_e (function):    Airy Functions.      (line  95)
* gsl;;sf;;bessel_I0 (function):         Bessel Functions.    (line  48)
* gsl;;sf;;bessel_I0_e (function):       Bessel Functions.    (line  51)
* gsl;;sf;;bessel_i0_scaled (function):  Bessel Functions.    (line 189)
* gsl;;sf;;bessel_I0_scaled (function):  Bessel Functions.    (line  69)
* gsl;;sf;;bessel_i0_scaled_e (function): Bessel Functions.   (line 192)
* gsl;;sf;;bessel_I0_scaled_e (function): Bessel Functions.   (line  72)
* gsl;;sf;;bessel_I1 (function):         Bessel Functions.    (line  54)
* gsl;;sf;;bessel_I1_e (function):       Bessel Functions.    (line  57)
* gsl;;sf;;bessel_i1_scaled (function):  Bessel Functions.    (line 195)
* gsl;;sf;;bessel_I1_scaled (function):  Bessel Functions.    (line  75)
* gsl;;sf;;bessel_i1_scaled_e (function): Bessel Functions.   (line 198)
* gsl;;sf;;bessel_I1_scaled_e (function): Bessel Functions.   (line  78)
* gsl;;sf;;bessel_i2_scaled (function):  Bessel Functions.    (line 201)
* gsl;;sf;;bessel_i2_scaled_e (function): Bessel Functions.   (line 204)
* gsl;;sf;;bessel_il_scaled (function):  Bessel Functions.    (line 207)
* gsl;;sf;;bessel_il_scaled_array (function): Bessel Functions.
                                                              (line 213)
* gsl;;sf;;bessel_il_scaled_e (function): Bessel Functions.   (line 210)
* gsl;;sf;;bessel_In (function):         Bessel Functions.    (line  60)
* gsl;;sf;;bessel_In_array (function):   Bessel Functions.    (line  66)
* gsl;;sf;;bessel_In_e (function):       Bessel Functions.    (line  63)
* gsl;;sf;;bessel_In_scaled (function):  Bessel Functions.    (line  81)
* gsl;;sf;;bessel_In_scaled_array (function): Bessel Functions.
                                                              (line  87)
* gsl;;sf;;bessel_In_scaled_e (function): Bessel Functions.   (line  84)
* gsl;;sf;;bessel_Inu (function):        Bessel Functions.    (line 258)
* gsl;;sf;;bessel_Inu_e (function):      Bessel Functions.    (line 261)
* gsl;;sf;;bessel_Inu_scaled (function): Bessel Functions.    (line 264)
* gsl;;sf;;bessel_Inu_scaled_e (function): Bessel Functions.  (line 267)
* gsl;;sf;;bessel_j0 (function):         Bessel Functions.    (line 132)
* gsl;;sf;;bessel_J0 (function):         Bessel Functions.    (line   6)
* gsl;;sf;;bessel_j0_e (function):       Bessel Functions.    (line 135)
* gsl;;sf;;bessel_J0_e (function):       Bessel Functions.    (line   9)
* gsl;;sf;;bessel_j1 (function):         Bessel Functions.    (line 138)
* gsl;;sf;;bessel_J1 (function):         Bessel Functions.    (line  12)
* gsl;;sf;;bessel_j1_e (function):       Bessel Functions.    (line 141)
* gsl;;sf;;bessel_J1_e (function):       Bessel Functions.    (line  15)
* gsl;;sf;;bessel_j2 (function):         Bessel Functions.    (line 144)
* gsl;;sf;;bessel_j2_e (function):       Bessel Functions.    (line 147)
* gsl;;sf;;bessel_jl (function):         Bessel Functions.    (line 150)
* gsl;;sf;;bessel_jl_array (function):   Bessel Functions.    (line 156)
* gsl;;sf;;bessel_jl_e (function):       Bessel Functions.    (line 153)
* gsl;;sf;;bessel_jl_steed_array (function): Bessel Functions.
                                                              (line 159)
* gsl;;sf;;bessel_Jn (function):         Bessel Functions.    (line  18)
* gsl;;sf;;bessel_Jn_array (function):   Bessel Functions.    (line  24)
* gsl;;sf;;bessel_Jn_e (function):       Bessel Functions.    (line  21)
* gsl;;sf;;bessel_Jnu (function):        Bessel Functions.    (line 243)
* gsl;;sf;;bessel_Jnu_e (function):      Bessel Functions.    (line 246)
* gsl;;sf;;bessel_K0 (function):         Bessel Functions.    (line  90)
* gsl;;sf;;bessel_K0_e (function):       Bessel Functions.    (line  93)
* gsl;;sf;;bessel_k0_scaled (function):  Bessel Functions.    (line 216)
* gsl;;sf;;bessel_K0_scaled (function):  Bessel Functions.    (line 111)
* gsl;;sf;;bessel_k0_scaled_e (function): Bessel Functions.   (line 219)
* gsl;;sf;;bessel_K0_scaled_e (function): Bessel Functions.   (line 114)
* gsl;;sf;;bessel_K1 (function):         Bessel Functions.    (line  96)
* gsl;;sf;;bessel_K1_e (function):       Bessel Functions.    (line  99)
* gsl;;sf;;bessel_k1_scaled (function):  Bessel Functions.    (line 222)
* gsl;;sf;;bessel_K1_scaled (function):  Bessel Functions.    (line 117)
* gsl;;sf;;bessel_k1_scaled_e (function): Bessel Functions.   (line 225)
* gsl;;sf;;bessel_K1_scaled_e (function): Bessel Functions.   (line 120)
* gsl;;sf;;bessel_k2_scaled (function):  Bessel Functions.    (line 228)
* gsl;;sf;;bessel_k2_scaled_e (function): Bessel Functions.   (line 231)
* gsl;;sf;;bessel_kl_scaled (function):  Bessel Functions.    (line 234)
* gsl;;sf;;bessel_kl_scaled_array (function): Bessel Functions.
                                                              (line 240)
* gsl;;sf;;bessel_kl_scaled_e (function): Bessel Functions.   (line 237)
* gsl;;sf;;bessel_Kn (function):         Bessel Functions.    (line 102)
* gsl;;sf;;bessel_Kn_array (function):   Bessel Functions.    (line 108)
* gsl;;sf;;bessel_Kn_e (function):       Bessel Functions.    (line 105)
* gsl;;sf;;bessel_Kn_scaled (function):  Bessel Functions.    (line 123)
* gsl;;sf;;bessel_Kn_scaled_array (function): Bessel Functions.
                                                              (line 129)
* gsl;;sf;;bessel_Kn_scaled_e (function): Bessel Functions.   (line 126)
* gsl;;sf;;bessel_Knu (function):        Bessel Functions.    (line 270)
* gsl;;sf;;bessel_Knu_e (function):      Bessel Functions.    (line 273)
* gsl;;sf;;bessel_Knu_scaled (function): Bessel Functions.    (line 282)
* gsl;;sf;;bessel_Knu_scaled_e (function): Bessel Functions.  (line 285)
* gsl;;sf;;bessel_lnKnu (function):      Bessel Functions.    (line 276)
* gsl;;sf;;bessel_lnKnu_e (function):    Bessel Functions.    (line 279)
* gsl;;sf;;bessel_sequence_Jnu_e (function): Bessel Functions.
                                                              (line 249)
* gsl;;sf;;bessel_y0 (function):         Bessel Functions.    (line 162)
* gsl;;sf;;bessel_Y0 (function):         Bessel Functions.    (line  27)
* gsl;;sf;;bessel_y0_e (function):       Bessel Functions.    (line 165)
* gsl;;sf;;bessel_Y0_e (function):       Bessel Functions.    (line  30)
* gsl;;sf;;bessel_y1 (function):         Bessel Functions.    (line 168)
* gsl;;sf;;bessel_Y1 (function):         Bessel Functions.    (line  33)
* gsl;;sf;;bessel_y1_e (function):       Bessel Functions.    (line 171)
* gsl;;sf;;bessel_Y1_e (function):       Bessel Functions.    (line  36)
* gsl;;sf;;bessel_y2 (function):         Bessel Functions.    (line 174)
* gsl;;sf;;bessel_y2_e (function):       Bessel Functions.    (line 177)
* gsl;;sf;;bessel_yl (function):         Bessel Functions.    (line 180)
* gsl;;sf;;bessel_yl_array (function):   Bessel Functions.    (line 186)
* gsl;;sf;;bessel_yl_e (function):       Bessel Functions.    (line 183)
* gsl;;sf;;bessel_Yn (function):         Bessel Functions.    (line  39)
* gsl;;sf;;bessel_Yn_array (function):   Bessel Functions.    (line  45)
* gsl;;sf;;bessel_Yn_e (function):       Bessel Functions.    (line  42)
* gsl;;sf;;bessel_Ynu (function):        Bessel Functions.    (line 252)
* gsl;;sf;;bessel_Ynu_e (function):      Bessel Functions.    (line 255)
* gsl;;sf;;bessel_zero_J0 (function):    Bessel Functions.    (line 288)
* gsl;;sf;;bessel_zero_J0_e (function):  Bessel Functions.    (line 291)
* gsl;;sf;;bessel_zero_J1 (function):    Bessel Functions.    (line 294)
* gsl;;sf;;bessel_zero_J1_e (function):  Bessel Functions.    (line 297)
* gsl;;sf;;bessel_zero_Jnu (function):   Bessel Functions.    (line 300)
* gsl;;sf;;bessel_zero_Jnu_e (function): Bessel Functions.    (line 303)
* gsl;;sf;;clausen (function):           Clausen Functions.   (line   6)
* gsl;;sf;;clausen_e (function):         Clausen Functions.   (line   9)
* gsl;;sf;;coulomb_CL_array (function):  Colomb Functions.    (line  41)
* gsl;;sf;;coulomb_CL_e (function):      Colomb Functions.    (line  38)
* gsl;;sf;;coulomb_wave_F_array (function): Colomb Functions. (line  25)
* gsl;;sf;;coulomb_wave_FG_array (function): Colomb Functions.
                                                              (line  28)
* gsl;;sf;;coulomb_wave_FG_e (function): Colomb Functions.    (line  22)
* gsl;;sf;;coulomb_wave_FGp_array (function): Colomb Functions.
                                                              (line  31)
* gsl;;sf;;coulomb_wave_sphF_array (function): Colomb Functions.
                                                              (line  34)
* gsl;;sf;;coupling_3j (function):       Coupling Coefficients.
                                                              (line   6)
* gsl;;sf;;coupling_3j_e (function):     Coupling Coefficients.
                                                              (line  10)
* gsl;;sf;;coupling_6j (function):       Coupling Coefficients.
                                                              (line  14)
* gsl;;sf;;coupling_6j_e (function):     Coupling Coefficients.
                                                              (line  18)
* gsl;;sf;;coupling_9j (function):       Coupling Coefficients.
                                                              (line  22)
* gsl;;sf;;coupling_9j_e (function):     Coupling Coefficients.
                                                              (line  26)
* gsl;;sf;;dawson (function):            Dawson Function.     (line   6)
* gsl;;sf;;dawson_e (function):          Dawson Function.     (line   9)
* gsl;;sf;;debye_1 (function):           Debye Functions.     (line   6)
* gsl;;sf;;debye_1_e (function):         Debye Functions.     (line   9)
* gsl;;sf;;debye_2 (function):           Debye Functions.     (line  12)
* gsl;;sf;;debye_2_e (function):         Debye Functions.     (line  15)
* gsl;;sf;;debye_3 (function):           Debye Functions.     (line  18)
* gsl;;sf;;debye_3_e (function):         Debye Functions.     (line  21)
* gsl;;sf;;debye_4 (function):           Debye Functions.     (line  24)
* gsl;;sf;;debye_4_e (function):         Debye Functions.     (line  27)
* gsl;;sf;;debye_5 (function):           Debye Functions.     (line  30)
* gsl;;sf;;debye_5_e (function):         Debye Functions.     (line  33)
* gsl;;sf;;debye_6 (function):           Debye Functions.     (line  36)
* gsl;;sf;;debye_6_e (function):         Debye Functions.     (line  39)
* gsl;;sf;;dilog (function):             Dilogarithm.         (line   6)
* gsl;;sf;;dilog_e (function):           Dilogarithm.         (line  14)
* gsl;;sf;;hydrogenicR (function):       Colomb Functions.    (line  16)
* gsl;;sf;;hydrogenicR_1 (function):     Colomb Functions.    (line  10)
* gsl;;sf;;hydrogenicR_1_e (function):   Colomb Functions.    (line  13)
* gsl;;sf;;hydrogenicR_e (function):     Colomb Functions.    (line  19)
* gsl;;sf;;multiply_e (function):        Examples<9>.         (line  18)
* gsl;;sf;;multiply_err_e (function):    Examples<9>.         (line  22)
* gsl;;sort (module):                    Sorting.             (line   6)
* gsl;;sort_vector (function):           Routines<5>.         (line   6)
* gsl;;sort_vector_index (function):     Routines<5>.         (line  10)
* gsl;;stats (module):                   Statistics.          (line   6)
* gsl;;stats;;absdev (function):         Routines<3>.         (line  37)
* gsl;;stats;;absdev_m (function):       Routines<3>.         (line  40)
* gsl;;stats;;correlation (function):    Routines<3>.         (line  74)
* gsl;;stats;;covariance (function):     Routines<3>.         (line  65)
* gsl;;stats;;covariance_m (function):   Routines<3>.         (line  69)
* gsl;;stats;;kurtosis (function):       Routines<3>.         (line  50)
* gsl;;stats;;kurtosis_m_sd (function):  Routines<3>.         (line  53)
* gsl;;stats;;lag1_autocorrelation (function): Routines<3>.   (line  57)
* gsl;;stats;;lag1_autocorrelation_m (function): Routines<3>. (line  61)
* gsl;;stats;;max (function):            Routines<3>.         (line 137)
* gsl;;stats;;max_index (function):      Routines<3>.         (line 151)
* gsl;;stats;;mean (function):           Routines<3>.         (line   6)
* gsl;;stats;;median_from_sorted_data (function): Routines<3>.
                                                              (line 159)
* gsl;;stats;;min (function):            Routines<3>.         (line 140)
* gsl;;stats;;min_index (function):      Routines<3>.         (line 147)
* gsl;;stats;;minmax (function):         Routines<3>.         (line 143)
* gsl;;stats;;minmax_index (function):   Routines<3>.         (line 155)
* gsl;;stats;;quantile_from_sorted_data (function): Routines<3>.
                                                              (line 163)
* gsl;;stats;;sd (function):             Routines<3>.         (line  16)
* gsl;;stats;;sd_m (function):           Routines<3>.         (line  19)
* gsl;;stats;;sd_with_fixed_mean (function): Routines<3>.     (line  33)
* gsl;;stats;;skew (function):           Routines<3>.         (line  43)
* gsl;;stats;;skew_m_sd (function):      Routines<3>.         (line  46)
* gsl;;stats;;tss (function):            Routines<3>.         (line  22)
* gsl;;stats;;tss_m (function):          Routines<3>.         (line  25)
* gsl;;stats;;variance (function):       Routines<3>.         (line   9)
* gsl;;stats;;variance_with_fixed_mean (function): Routines<3>.
                                                              (line  28)
* gsl;;stats;;wabsdev (function):        Routines<3>.         (line 112)
* gsl;;stats;;wabsdev_m (function):      Routines<3>.         (line 115)
* gsl;;stats;;wkurtosis (function):      Routines<3>.         (line 128)
* gsl;;stats;;wkurtosis_m_sd (function): Routines<3>.         (line 132)
* gsl;;stats;;wmean (function):          Routines<3>.         (line  78)
* gsl;;stats;;wsd (function):            Routines<3>.         (line  90)
* gsl;;stats;;wsd_m (function):          Routines<3>.         (line  93)
* gsl;;stats;;wsd_with_fixed_mean (function): Routines<3>.    (line 101)
* gsl;;stats;;wskew (function):          Routines<3>.         (line 120)
* gsl;;stats;;wskew_m_sd (function):     Routines<3>.         (line 123)
* gsl;;stats;;wtss (function):           Routines<3>.         (line 106)
* gsl;;stats;;wtss_m (function):         Routines<3>.         (line 109)
* gsl;;stats;;wvariance (function):      Routines<3>.         (line  81)
* gsl;;stats;;wvariance_m (function):    Routines<3>.         (line  85)
* gsl;;stats;;wvariance_with_fixed_mean (function): Routines<3>.
                                                              (line  96)
* mod (infix function):                  Matrix Operators and Functions.
                                                              (line  70)
* not (prefix function):                 Matrix Operators and Functions.
                                                              (line  83)
* or (infix function):                   Matrix Operators and Functions.
                                                              (line 128)
* pow (function):                        Matrix Operators and Functions.
                                                              (line 141)



Tag Table:
Node: Top399
Ref: pure-gsl doc599
Ref: 8599
Node: Polynomials5071
Ref: pure-gsl module-gsl poly5162
Ref: 35162
Ref: pure-gsl pure-gsl-gnu-scientific-library-interface-for-pure5162
Ref: 95162
Ref: pure-gsl polynomials5162
Ref: a5162
Ref: pure-gsl module-gsl5162
Ref: 05162
Node: Routines5494
Ref: pure-gsl routines5569
Ref: b5569
Ref: pure-gsl gsl poly eval5596
Ref: c5596
Ref: pure-gsl gsl poly dd_init5986
Ref: d5986
Ref: pure-gsl gsl poly dd_eval6110
Ref: e6110
Ref: pure-gsl gsl poly dd_taylor6246
Ref: f6246
Ref: pure-gsl gsl poly solve_quadratic6410
Ref: 106410
Ref: pure-gsl gsl poly complex_solve_quadratic6618
Ref: 116618
Ref: pure-gsl gsl poly solve_cubic6836
Ref: 126836
Ref: pure-gsl gsl poly complex_solve_cubic7042
Ref: 137042
Ref: pure-gsl gsl poly complex_solve7264
Ref: 147264
Node: Examples7489
Ref: pure-gsl examples7564
Ref: 157564
Node: Special Functions8629
Ref: pure-gsl special-functions8725
Ref: 168725
Ref: pure-gsl module-gsl sf8725
Ref: 58725
Node: Airy Functions9891
Ref: pure-gsl airy-functions9981
Ref: 179981
Ref: pure-gsl gsl sf airy_Ai10020
Ref: 1810020
Ref: pure-gsl gsl sf airy_Ai_e10217
Ref: 1910217
Ref: pure-gsl gsl sf airy_Ai_scaled10420
Ref: 1a10420
Ref: pure-gsl gsl sf airy_Ai_scaled_e10638
Ref: 1b10638
Ref: pure-gsl gsl sf airy_Bi10862
Ref: 1c10862
Ref: pure-gsl gsl sf airy_Bi_e11059
Ref: 1d11059
Ref: pure-gsl gsl sf airy_Bi_scaled11262
Ref: 1e11262
Ref: pure-gsl gsl sf airy_Bi_scaled_e11480
Ref: 1f11480
Ref: pure-gsl gsl sf airy_Ai_deriv11704
Ref: 2011704
Ref: pure-gsl gsl sf airy_Ai_deriv_e11919
Ref: 2111919
Ref: pure-gsl gsl sf airy_Ai_deriv_scaled12140
Ref: 2212140
Ref: pure-gsl gsl sf airy_Ai_deriv_scaled_e12376
Ref: 2312376
Ref: pure-gsl gsl sf airy_Bi_deriv12618
Ref: 2412618
Ref: pure-gsl gsl sf airy_Bi_deriv_e12833
Ref: 2512833
Ref: pure-gsl gsl sf airy_Bi_deriv_scaled13054
Ref: 2613054
Ref: pure-gsl gsl sf airy_Bi_deriv_scaled_e13290
Ref: 2713290
Ref: pure-gsl gsl sf airy_zero_Ai13532
Ref: 2813532
Ref: pure-gsl gsl sf airy_zero_Ai_e13615
Ref: 2913615
Ref: pure-gsl gsl sf airy_zero_Bi13702
Ref: 2a13702
Ref: pure-gsl gsl sf airy_zero_Bi_e13785
Ref: 2b13785
Ref: pure-gsl gsl sf airy_zero_Ai_deriv13872
Ref: 2c13872
Ref: pure-gsl gsl sf airy_zero_Ai_deriv_e13967
Ref: 2d13967
Ref: pure-gsl gsl sf airy_zero_Bi_deriv14066
Ref: 2e14066
Ref: pure-gsl gsl sf airy_zero_Bi_deriv_e14161
Ref: 2f14161
Node: Examples<2>14260
Ref: pure-gsl id114375
Ref: 3014375
Node: Bessel Functions17321
Ref: pure-gsl bessel-functions17433
Ref: 3117433
Ref: pure-gsl gsl sf bessel_J017476
Ref: 3217476
Ref: pure-gsl gsl sf bessel_J0_e17553
Ref: 3317553
Ref: pure-gsl gsl sf bessel_J117633
Ref: 3417633
Ref: pure-gsl gsl sf bessel_J1_e17710
Ref: 3517710
Ref: pure-gsl gsl sf bessel_Jn17791
Ref: 3617791
Ref: pure-gsl gsl sf bessel_Jn_e17870
Ref: 3717870
Ref: pure-gsl gsl sf bessel_Jn_array17953
Ref: 3817953
Ref: pure-gsl gsl sf bessel_Y018062
Ref: 3918062
Ref: pure-gsl gsl sf bessel_Y0_e18139
Ref: 3a18139
Ref: pure-gsl gsl sf bessel_Y118220
Ref: 3b18220
Ref: pure-gsl gsl sf bessel_Y1_e18297
Ref: 3c18297
Ref: pure-gsl gsl sf bessel_Yn18378
Ref: 3d18378
Ref: pure-gsl gsl sf bessel_Yn_e18455
Ref: 3e18455
Ref: pure-gsl gsl sf bessel_Yn_array18536
Ref: 3f18536
Ref: pure-gsl gsl sf bessel_I018645
Ref: 4018645
Ref: pure-gsl gsl sf bessel_I0_e18722
Ref: 4118722
Ref: pure-gsl gsl sf bessel_I118803
Ref: 4218803
Ref: pure-gsl gsl sf bessel_I1_e18880
Ref: 4318880
Ref: pure-gsl gsl sf bessel_In18961
Ref: 4418961
Ref: pure-gsl gsl sf bessel_In_e19045
Ref: 4519045
Ref: pure-gsl gsl sf bessel_In_array19132
Ref: 4619132
Ref: pure-gsl gsl sf bessel_I0_scaled19241
Ref: 4719241
Ref: pure-gsl gsl sf bessel_I0_scaled_e19332
Ref: 4819332
Ref: pure-gsl gsl sf bessel_I1_scaled19427
Ref: 4919427
Ref: pure-gsl gsl sf bessel_I1_scaled_e19518
Ref: 4a19518
Ref: pure-gsl gsl sf bessel_In_scaled19613
Ref: 4b19613
Ref: pure-gsl gsl sf bessel_In_scaled_e19711
Ref: 4c19711
Ref: pure-gsl gsl sf bessel_In_scaled_array19813
Ref: 4d19813
Ref: pure-gsl gsl sf bessel_K019929
Ref: 4e19929
Ref: pure-gsl gsl sf bessel_K0_e20006
Ref: 4f20006
Ref: pure-gsl gsl sf bessel_K120087
Ref: 5020087
Ref: pure-gsl gsl sf bessel_K1_e20164
Ref: 5120164
Ref: pure-gsl gsl sf bessel_Kn20245
Ref: 5220245
Ref: pure-gsl gsl sf bessel_Kn_e20329
Ref: 5320329
Ref: pure-gsl gsl sf bessel_Kn_array20416
Ref: 5420416
Ref: pure-gsl gsl sf bessel_K0_scaled20525
Ref: 5520525
Ref: pure-gsl gsl sf bessel_K0_scaled_e20616
Ref: 5620616
Ref: pure-gsl gsl sf bessel_K1_scaled20711
Ref: 5720711
Ref: pure-gsl gsl sf bessel_K1_scaled_e20802
Ref: 5820802
Ref: pure-gsl gsl sf bessel_Kn_scaled20897
Ref: 5920897
Ref: pure-gsl gsl sf bessel_Kn_scaled_e20995
Ref: 5a20995
Ref: pure-gsl gsl sf bessel_Kn_scaled_array21097
Ref: 5b21097
Ref: pure-gsl gsl sf bessel_j021213
Ref: 5c21213
Ref: pure-gsl gsl sf bessel_j0_e21290
Ref: 5d21290
Ref: pure-gsl gsl sf bessel_j121371
Ref: 5e21371
Ref: pure-gsl gsl sf bessel_j1_e21448
Ref: 5f21448
Ref: pure-gsl gsl sf bessel_j221529
Ref: 6021529
Ref: pure-gsl gsl sf bessel_j2_e21606
Ref: 6121606
Ref: pure-gsl gsl sf bessel_jl21687
Ref: 6221687
Ref: pure-gsl gsl sf bessel_jl_e21771
Ref: 6321771
Ref: pure-gsl gsl sf bessel_jl_array21859
Ref: 6421859
Ref: pure-gsl gsl sf bessel_jl_steed_array21958
Ref: 6521958
Ref: pure-gsl gsl sf bessel_y022069
Ref: 6622069
Ref: pure-gsl gsl sf bessel_y0_e22146
Ref: 6722146
Ref: pure-gsl gsl sf bessel_y122227
Ref: 6822227
Ref: pure-gsl gsl sf bessel_y1_e22304
Ref: 6922304
Ref: pure-gsl gsl sf bessel_y222385
Ref: 6a22385
Ref: pure-gsl gsl sf bessel_y2_e22462
Ref: 6b22462
Ref: pure-gsl gsl sf bessel_yl22543
Ref: 6c22543
Ref: pure-gsl gsl sf bessel_yl_e22627
Ref: 6d22627
Ref: pure-gsl gsl sf bessel_yl_array22715
Ref: 6e22715
Ref: pure-gsl gsl sf bessel_i0_scaled22814
Ref: 6f22814
Ref: pure-gsl gsl sf bessel_i0_scaled_e22905
Ref: 7022905
Ref: pure-gsl gsl sf bessel_i1_scaled23000
Ref: 7123000
Ref: pure-gsl gsl sf bessel_i1_scaled_e23091
Ref: 7223091
Ref: pure-gsl gsl sf bessel_i2_scaled23186
Ref: 7323186
Ref: pure-gsl gsl sf bessel_i2_scaled_e23277
Ref: 7423277
Ref: pure-gsl gsl sf bessel_il_scaled23372
Ref: 7523372
Ref: pure-gsl gsl sf bessel_il_scaled_e23470
Ref: 7623470
Ref: pure-gsl gsl sf bessel_il_scaled_array23572
Ref: 7723572
Ref: pure-gsl gsl sf bessel_k0_scaled23685
Ref: 7823685
Ref: pure-gsl gsl sf bessel_k0_scaled_e23776
Ref: 7923776
Ref: pure-gsl gsl sf bessel_k1_scaled23871
Ref: 7a23871
Ref: pure-gsl gsl sf bessel_k1_scaled_e23962
Ref: 7b23962
Ref: pure-gsl gsl sf bessel_k2_scaled24057
Ref: 7c24057
Ref: pure-gsl gsl sf bessel_k2_scaled_e24148
Ref: 7d24148
Ref: pure-gsl gsl sf bessel_kl_scaled24243
Ref: 7e24243
Ref: pure-gsl gsl sf bessel_kl_scaled_e24341
Ref: 7f24341
Ref: pure-gsl gsl sf bessel_kl_scaled_array24443
Ref: 8024443
Ref: pure-gsl gsl sf bessel_Jnu24556
Ref: 8124556
Ref: pure-gsl gsl sf bessel_Jnu_e24638
Ref: 8224638
Ref: pure-gsl gsl sf bessel_sequence_Jnu_e24724
Ref: 8324724
Ref: pure-gsl gsl sf bessel_Ynu24836
Ref: 8424836
Ref: pure-gsl gsl sf bessel_Ynu_e24918
Ref: 8524918
Ref: pure-gsl gsl sf bessel_Inu25004
Ref: 8625004
Ref: pure-gsl gsl sf bessel_Inu_e25086
Ref: 8725086
Ref: pure-gsl gsl sf bessel_Inu_scaled25172
Ref: 8825172
Ref: pure-gsl gsl sf bessel_Inu_scaled_e25268
Ref: 8925268
Ref: pure-gsl gsl sf bessel_Knu25368
Ref: 8a25368
Ref: pure-gsl gsl sf bessel_Knu_e25450
Ref: 8b25450
Ref: pure-gsl gsl sf bessel_lnKnu25534
Ref: 8c25534
Ref: pure-gsl gsl sf bessel_lnKnu_e25620
Ref: 8d25620
Ref: pure-gsl gsl sf bessel_Knu_scaled25710
Ref: 8e25710
Ref: pure-gsl gsl sf bessel_Knu_scaled_e25806
Ref: 8f25806
Ref: pure-gsl gsl sf bessel_zero_J025906
Ref: 9025906
Ref: pure-gsl gsl sf bessel_zero_J0_e25998
Ref: 9125998
Ref: pure-gsl gsl sf bessel_zero_J126094
Ref: 9226094
Ref: pure-gsl gsl sf bessel_zero_J1_e26186
Ref: 9326186
Ref: pure-gsl gsl sf bessel_zero_Jnu26282
Ref: 9426282
Ref: pure-gsl gsl sf bessel_zero_Jnu_e26379
Ref: 9526379
Node: Examples<3>26478
Ref: pure-gsl id226596
Ref: 9626596
Node: Clausen Functions32965
Ref: pure-gsl clausen-functions33078
Ref: 9733078
Ref: pure-gsl gsl sf clausen33123
Ref: 9833123
Ref: pure-gsl gsl sf clausen_e33196
Ref: 9933196
Node: Examples<4>33273
Ref: pure-gsl id333391
Ref: 9a33391
Node: Colomb Functions33630
Ref: pure-gsl colomb-functions33742
Ref: 9b33742
Ref: pure-gsl gsl sf hydrogenicR_133963
Ref: 9c33963
Ref: pure-gsl gsl sf hydrogenicR_1_e34050
Ref: 9d34050
Ref: pure-gsl gsl sf hydrogenicR34141
Ref: 9e34141
Ref: pure-gsl gsl sf hydrogenicR_e34240
Ref: 9f34240
Ref: pure-gsl gsl sf coulomb_wave_FG_e34343
Ref: a034343
Ref: pure-gsl gsl sf coulomb_wave_F_array34451
Ref: a134451
Ref: pure-gsl gsl sf coulomb_wave_FG_array34570
Ref: a234570
Ref: pure-gsl gsl sf coulomb_wave_FGp_array34691
Ref: a334691
Ref: pure-gsl gsl sf coulomb_wave_sphF_array34814
Ref: a434814
Ref: pure-gsl gsl sf coulomb_CL_e34949
Ref: a534949
Ref: pure-gsl gsl sf coulomb_CL_array35041
Ref: a635041
Node: Examples<5>35149
Ref: pure-gsl id435271
Ref: a735271
Node: Coupling Coefficients36464
Ref: pure-gsl coupling-coefficients36581
Ref: a836581
Ref: pure-gsl gsl sf coupling_3j36634
Ref: a936634
Ref: pure-gsl gsl sf coupling_3j_e36818
Ref: aa36818
Ref: pure-gsl gsl sf coupling_6j37006
Ref: ab37006
Ref: pure-gsl gsl sf coupling_6j_e37190
Ref: ac37190
Ref: pure-gsl gsl sf coupling_9j37378
Ref: ad37378
Ref: pure-gsl gsl sf coupling_9j_e37546
Ref: ae37546
Node: Examples<6>37718
Ref: pure-gsl id537839
Ref: af37839
Node: Dawson Function38405
Ref: pure-gsl dawson-function38516
Ref: b038516
Ref: pure-gsl gsl sf dawson38559
Ref: b138559
Ref: pure-gsl gsl sf dawson_e38630
Ref: b238630
Node: Examples<7>38705
Ref: pure-gsl id638820
Ref: b338820
Node: Debye Functions39003
Ref: pure-gsl debye-functions39114
Ref: b439114
Ref: pure-gsl gsl sf debye_139157
Ref: b539157
Ref: pure-gsl gsl sf debye_1_e39230
Ref: b639230
Ref: pure-gsl gsl sf debye_239307
Ref: b739307
Ref: pure-gsl gsl sf debye_2_e39380
Ref: b839380
Ref: pure-gsl gsl sf debye_339457
Ref: b939457
Ref: pure-gsl gsl sf debye_3_e39530
Ref: ba39530
Ref: pure-gsl gsl sf debye_439607
Ref: bb39607
Ref: pure-gsl gsl sf debye_4_e39680
Ref: bc39680
Ref: pure-gsl gsl sf debye_539757
Ref: bd39757
Ref: pure-gsl gsl sf debye_5_e39830
Ref: be39830
Ref: pure-gsl gsl sf debye_639907
Ref: bf39907
Ref: pure-gsl gsl sf debye_6_e39980
Ref: c039980
Node: Examples<8>40057
Ref: pure-gsl id740168
Ref: c140168
Node: Dilogarithm40889
Ref: pure-gsl dilogarithm40996
Ref: c240996
Ref: pure-gsl gsl sf dilog41031
Ref: c341031
Ref: pure-gsl gsl sf dilog_e41299
Ref: c441299
Node: Examples<9>41542
Ref: pure-gsl id841650
Ref: c541650
Ref: pure-gsl gsl sf multiply_e42007
Ref: c642007
Ref: pure-gsl gsl sf multiply_err_e42089
Ref: c742089
Node: Examples<10>42184
Ref: pure-gsl id942272
Ref: c842272
Node: Matrices42487
Ref: pure-gsl matrices42593
Ref: c942593
Ref: pure-gsl module-gsl matrix42593
Ref: 242593
Ref: Matrices-Footnote-143134
Ref: Matrices-Footnote-243216
Ref: Matrices-Footnote-343290
Node: Matrix Creation43366
Ref: pure-gsl matrix-creation43467
Ref: ca43467
Ref: pure-gsl linear-algebra43467
Ref: cb43467
Ref: pure-gsl gsl matrix zeros43974
Ref: cc43974
Ref: pure-gsl gsl matrix izeros44244
Ref: cd44244
Ref: pure-gsl gsl matrix czeros44516
Ref: ce44516
Ref: pure-gsl gsl matrix ones44790
Ref: cf44790
Ref: pure-gsl gsl matrix iones45056
Ref: d045056
Ref: pure-gsl gsl matrix cones45326
Ref: d145326
Ref: pure-gsl gsl matrix eye45596
Ref: d245596
Ref: pure-gsl gsl matrix ieye45826
Ref: d345826
Ref: pure-gsl gsl matrix ceye46060
Ref: d446060
Node: Matrix Operators and Functions46294
Ref: pure-gsl matrix-operators-and-functions46432
Ref: d546432
Ref: pure-gsl +/gsl_matrix46673
Ref: d646673
Ref: pure-gsl -/gsl_matrix46836
Ref: d746836
Ref: pure-gsl */gsl_matrix47176
Ref: d847176
Ref: d947277
Ref: pure-gsl //gsl_matrix47429
Ref: da47429
Ref: db47675
Ref: pure-gsl \/gsl_matrix47827
Ref: dc47827
Ref: pure-gsl div/gsl_matrix47897
Ref: dd47897
Ref: pure-gsl mod/gsl_matrix48370
Ref: de48370
Ref: pure-gsl not/gsl_matrix48858
Ref: df48858
Ref: pure-gsl ^/gsl_matrix49049
Ref: e049049
Ref: e149277
Ref: pure-gsl <</gsl_matrix49442
Ref: e249442
Ref: pure-gsl >>/gsl_matrix49756
Ref: e349756
Ref: pure-gsl and/gsl_matrix50070
Ref: e450070
Ref: pure-gsl or/gsl_matrix50462
Ref: e550462
Ref: pure-gsl pow/gsl_matrix50933
Ref: e650933
Node: Singular Value Decomposition51138
Ref: pure-gsl singular-value-decomposition51252
Ref: e751252
Ref: pure-gsl gsl matrix svd51930
Ref: e851930
Ref: pure-gsl gsl matrix svd_mod52018
Ref: e952018
Ref: pure-gsl gsl matrix svd_jacobi52201
Ref: ea52201
Ref: pure-gsl gsl matrix svd_solve52357
Ref: eb52357
Ref: pure-gsl gsl matrix pinv52683
Ref: ec52683
Node: Least-Squares Fitting52812
Ref: pure-gsl least-squares-fitting52911
Ref: ed52911
Ref: pure-gsl module-gsl fit52911
Ref: 152911
Node: Routines<2>53270
Ref: pure-gsl id1053362
Ref: ee53362
Ref: pure-gsl gsl fit linear53389
Ref: ef53389
Ref: pure-gsl gsl fit wlinear53614
Ref: f053614
Ref: pure-gsl gsl fit linear_est53859
Ref: f153859
Ref: pure-gsl gsl fit mul54064
Ref: f254064
Ref: pure-gsl gsl fit wmul54266
Ref: f354266
Ref: pure-gsl gsl fit mul_est54479
Ref: f454479
Node: Examples<11>54629
Ref: pure-gsl id1154721
Ref: f554721
Node: Statistics57113
Ref: pure-gsl statistics57231
Ref: f657231
Ref: pure-gsl module-gsl stats57231
Ref: 757231
Node: Routines<3>57546
Ref: pure-gsl id1257627
Ref: f757627
Ref: pure-gsl gsl stats mean57654
Ref: f857654
Ref: pure-gsl gsl stats variance57773
Ref: f957773
Ref: pure-gsl gsl stats sd58039
Ref: fa58039
Ref: pure-gsl gsl stats sd_m58154
Ref: fb58154
Ref: pure-gsl gsl stats tss58278
Ref: fc58278
Ref: pure-gsl gsl stats tss_m58395
Ref: fd58395
Ref: pure-gsl gsl stats variance_with_fixed_mean58521
Ref: fe58521
Ref: pure-gsl gsl stats sd_with_fixed_mean58700
Ref: ff58700
Ref: pure-gsl gsl stats absdev58857
Ref: 10058857
Ref: pure-gsl gsl stats absdev_m58980
Ref: 10158980
Ref: pure-gsl gsl stats skew59112
Ref: 10259112
Ref: pure-gsl gsl stats skew_m_sd59236
Ref: 10359236
Ref: pure-gsl gsl stats kurtosis59378
Ref: 10459378
Ref: pure-gsl gsl stats kurtosis_m_sd59505
Ref: 10559505
Ref: pure-gsl gsl stats lag1_autocorrelation59655
Ref: 10659655
Ref: pure-gsl gsl stats lag1_autocorrelation_m59811
Ref: 10759811
Ref: pure-gsl gsl stats covariance59976
Ref: 10859976
Ref: pure-gsl gsl stats covariance_m60134
Ref: 10960134
Ref: pure-gsl gsl stats correlation60318
Ref: 10a60318
Ref: pure-gsl gsl stats wmean60478
Ref: 10b60478
Ref: pure-gsl gsl stats wvariance60614
Ref: 10c60614
Ref: pure-gsl gsl stats wvariance_m60763
Ref: 10d60763
Ref: pure-gsl gsl stats wsd60931
Ref: 10e60931
Ref: pure-gsl gsl stats wsd_m61063
Ref: 10f61063
Ref: pure-gsl gsl stats wvariance_with_fixed_mean61204
Ref: 11061204
Ref: pure-gsl gsl stats wsd_with_fixed_mean61400
Ref: 11161400
Ref: pure-gsl gsl stats wtss61584
Ref: 11261584
Ref: pure-gsl gsl stats wtss_m61718
Ref: 11361718
Ref: pure-gsl gsl stats wabsdev61861
Ref: 11461861
Ref: pure-gsl gsl stats wabsdev_m62001
Ref: 11562001
Ref: pure-gsl gsl stats wskew62165
Ref: 11662165
Ref: pure-gsl gsl stats wskew_m_sd62301
Ref: 11762301
Ref: pure-gsl gsl stats wkurtosis62470
Ref: 11862470
Ref: pure-gsl gsl stats wkurtosis_m_sd62619
Ref: 11962619
Ref: pure-gsl gsl stats max62788
Ref: 11a62788
Ref: pure-gsl gsl stats min62905
Ref: 11b62905
Ref: pure-gsl gsl stats minmax63022
Ref: 11c63022
Ref: pure-gsl gsl stats min_index63195
Ref: 11d63195
Ref: pure-gsl gsl stats max_index63329
Ref: 11e63329
Ref: pure-gsl gsl stats minmax_index63463
Ref: 11f63463
Ref: pure-gsl gsl stats median_from_sorted_data63660
Ref: 12063660
Ref: pure-gsl gsl stats quantile_from_sorted_data63822
Ref: 12163822
Node: Examples<12>64008
Ref: pure-gsl id1364089
Ref: 12264089
Node: Random Number Distributions66613
Ref: pure-gsl random-number-distributions66717
Ref: 12366717
Ref: pure-gsl module-gsl randist66717
Ref: 466717
Node: Routines<4>67338
Ref: pure-gsl id1467436
Ref: 12467436
Ref: pure-gsl gsl ran ugaussian_pdf67463
Ref: 12567463
Ref: pure-gsl gsl ran gaussian_pdf67546
Ref: 12667546
Ref: pure-gsl gsl ran gaussian_tail_pdf67637
Ref: 12767637
Ref: pure-gsl gsl ran ugaussian_tail_pdf67740
Ref: 12867740
Ref: pure-gsl gsl ran bivariate_gaussian_pdf67839
Ref: 12967839
Ref: pure-gsl gsl ran exponential_pdf67946
Ref: 12a67946
Ref: pure-gsl gsl ran laplace_pdf68040
Ref: 12b68040
Ref: pure-gsl gsl ran exppow_pdf68125
Ref: 12c68125
Ref: pure-gsl gsl ran cauchy_pdf68210
Ref: 12d68210
Ref: pure-gsl gsl ran rayleigh_pdf68293
Ref: 12e68293
Ref: pure-gsl gsl ran rayleigh_tail_pdf68384
Ref: 12f68384
Ref: pure-gsl gsl ran landau_pdf68487
Ref: 13068487
Ref: pure-gsl gsl ran gamma_pdf68568
Ref: 13168568
Ref: pure-gsl gsl ran flat_pdf68651
Ref: 13268651
Ref: pure-gsl gsl ran lognormal_pdf68732
Ref: 13368732
Ref: pure-gsl gsl ran chisq_pdf68830
Ref: 13468830
Ref: pure-gsl gsl ran fdist_pdf68912
Ref: 13568912
Ref: pure-gsl gsl ran tdist_pdf68999
Ref: 13668999
Ref: pure-gsl gsl ran beta_pdf69081
Ref: 13769081
Ref: pure-gsl gsl ran logistic_pdf69162
Ref: 13869162
Ref: pure-gsl gsl ran pareto_pdf69249
Ref: 13969249
Ref: pure-gsl gsl ran weibull_pdf69334
Ref: 13a69334
Ref: pure-gsl gsl ran gumbel1_pdf69421
Ref: 13b69421
Ref: pure-gsl gsl ran gumbel2_pdf69508
Ref: 13c69508
Ref: pure-gsl gsl ran dirichlet_pdf69595
Ref: 13d69595
Ref: pure-gsl gsl ran dirichlet_lnpdf69708
Ref: 13e69708
Ref: pure-gsl gsl ran discrete_preproc69825
Ref: 13f69825
Ref: pure-gsl gsl ran discrete_pdf69952
Ref: 14069952
Ref: pure-gsl gsl ran discrete_free70079
Ref: 14170079
Ref: pure-gsl gsl ran poisson_pdf70174
Ref: 14270174
Ref: pure-gsl gsl ran bernoulli_pdf70265
Ref: 14370265
Ref: pure-gsl gsl ran binomial_pdf70359
Ref: 14470359
Ref: pure-gsl gsl ran multinomial_pdf70458
Ref: 14570458
Ref: pure-gsl gsl ran multinomial_lnpdf70567
Ref: 14670567
Ref: pure-gsl gsl ran negative_binomial_pdf70680
Ref: 14770680
Ref: pure-gsl gsl ran pascal_pdf70792
Ref: 14870792
Ref: pure-gsl gsl ran geometric_pdf70887
Ref: 14970887
Ref: pure-gsl gsl ran hypergeometric_pdf70981
Ref: 14a70981
Ref: pure-gsl gsl ran logarithmic_pdf71116
Ref: 14b71116
Ref: pure-gsl gsl cdf ugaussian_P71214
Ref: 14c71214
Ref: pure-gsl gsl cdf ugaussian_Q71297
Ref: 14d71297
Ref: pure-gsl gsl cdf ugaussian_Pinv71380
Ref: 14e71380
Ref: pure-gsl gsl cdf ugaussian_Qinv71469
Ref: 14f71469
Ref: pure-gsl gsl cdf gaussian_P71558
Ref: 15071558
Ref: pure-gsl gsl cdf gaussian_Q71645
Ref: 15171645
Ref: pure-gsl gsl cdf gaussian_Pinv71732
Ref: 15271732
Ref: pure-gsl gsl cdf guassian_Qinv71825
Ref: 15371825
Ref: pure-gsl gsl cdf exponential_P71918
Ref: 15471918
Ref: pure-gsl gsl cdf exponential_Q72008
Ref: 15572008
Ref: pure-gsl gsl cdf exponential_Pinv72098
Ref: 15672098
Ref: pure-gsl gsl cdf exponential_Qinv72194
Ref: 15772194
Ref: pure-gsl gsl cdf laplace_P72290
Ref: 15872290
Ref: pure-gsl gsl cdf laplace_Q72371
Ref: 15972371
Ref: pure-gsl gsl cdf laplace_Pinv72452
Ref: 15a72452
Ref: pure-gsl gsl cdf laplace_Qinv72539
Ref: 15b72539
Ref: pure-gsl gsl cdf exppow_P72626
Ref: 15c72626
Ref: pure-gsl gsl cdf exppow_Q72707
Ref: 15d72707
Ref: pure-gsl gsl cdf cauchy_P72788
Ref: 15e72788
Ref: pure-gsl gsl cdf cauchy_Q72867
Ref: 15f72867
Ref: pure-gsl gsl cdf cauchy_Pinv72946
Ref: 16072946
Ref: pure-gsl gsl cdf cauchy_Qinv73031
Ref: 16173031
Ref: pure-gsl gsl cdf rayleigh_P73116
Ref: 16273116
Ref: pure-gsl gsl cdf rayleigh_Q73203
Ref: 16373203
Ref: pure-gsl gsl cdf rayleigh_Pinv73290
Ref: 16473290
Ref: pure-gsl gsl cdf rayleigh_Qinv73383
Ref: 16573383
Ref: pure-gsl gsl cdf gamma_P73476
Ref: 16673476
Ref: pure-gsl gsl cdf gamma_Q73555
Ref: 16773555
Ref: pure-gsl gsl cdf gamma_Pinv73634
Ref: 16873634
Ref: pure-gsl gsl cdf gamma_Qinv73719
Ref: 16973719
Ref: pure-gsl gsl cdf flat_P73804
Ref: 16a73804
Ref: pure-gsl gsl cdf flat_Q73881
Ref: 16b73881
Ref: pure-gsl gsl cdf flat_Pinv73958
Ref: 16c73958
Ref: pure-gsl gsl cdf flat_Qinv74041
Ref: 16d74041
Ref: pure-gsl gsl cdf lognormal_P74124
Ref: 16e74124
Ref: pure-gsl gsl cdf lognormal_Q74218
Ref: 16f74218
Ref: pure-gsl gsl cdf lognormal_Pinv74312
Ref: 17074312
Ref: pure-gsl gsl cdf lognormal_Qinv74412
Ref: 17174412
Ref: pure-gsl gsl cdf chisq_P74512
Ref: 17274512
Ref: pure-gsl gsl cdf chisq_Q74590
Ref: 17374590
Ref: pure-gsl gsl cdf chisq_Pinv74668
Ref: 17474668
Ref: pure-gsl gsl cdf chisq_Qinv74752
Ref: 17574752
Ref: pure-gsl gsl cdf fdist_P74836
Ref: 17674836
Ref: pure-gsl gsl cdf fdist_Q74919
Ref: 17774919
Ref: pure-gsl gsl cdf fdist_Pinv75002
Ref: 17875002
Ref: pure-gsl gsl cdf fdist_Qinv75091
Ref: 17975091
Ref: pure-gsl gsl cdf tdist_P75180
Ref: 17a75180
Ref: pure-gsl gsl cdf tdist_Q75258
Ref: 17b75258
Ref: pure-gsl gsl cdf tdist_Pinv75336
Ref: 17c75336
Ref: pure-gsl gsl cdf tdist_Qinv75420
Ref: 17d75420
Ref: pure-gsl gsl cdf beta_P75504
Ref: 17e75504
Ref: pure-gsl gsl cdf beta_Q75581
Ref: 17f75581
Ref: pure-gsl gsl cdf beta_Pinv75658
Ref: 18075658
Ref: pure-gsl gsl cdf beta_Qinv75741
Ref: 18175741
Ref: pure-gsl gsl cdf logistic_P75824
Ref: 18275824
Ref: pure-gsl gsl cdf logistic_Q75907
Ref: 18375907
Ref: pure-gsl gsl cdf logistic_Pinv75990
Ref: 18475990
Ref: pure-gsl gsl cdf logistic_Qinv76079
Ref: 18576079
Ref: pure-gsl gsl cdf pareto_P76168
Ref: 18676168
Ref: pure-gsl gsl cdf pareto_Q76249
Ref: 18776249
Ref: pure-gsl gsl cdf pareto_Pinv76330
Ref: 18876330
Ref: pure-gsl gsl cdf pareto_Qinv76417
Ref: 18976417
Ref: pure-gsl gsl cdf weibull_P76504
Ref: 18a76504
Ref: pure-gsl gsl cdf weibull_Q76587
Ref: 18b76587
Ref: pure-gsl gsl cdf weibull_Pinv76670
Ref: 18c76670
Ref: pure-gsl gsl cdf weibull_Qinv76759
Ref: 18d76759
Ref: pure-gsl gsl cdf gumbel1_P76848
Ref: 18e76848
Ref: pure-gsl gsl cdf gumbel1_Q76931
Ref: 18f76931
Ref: pure-gsl gsl cdf gumbel1_Pinv77014
Ref: 19077014
Ref: pure-gsl gsl cdf gumbel1_Qinv77103
Ref: 19177103
Ref: pure-gsl gsl cdf gumbel2_P77192
Ref: 19277192
Ref: pure-gsl gsl cdf gumbel2_Q77275
Ref: 19377275
Ref: pure-gsl gsl cdf gumbel2_Pinv77358
Ref: 19477358
Ref: pure-gsl gsl cdf gumbel2_Qinv77447
Ref: 19577447
Ref: pure-gsl gsl cdf poisson_P77536
Ref: 19677536
Ref: pure-gsl gsl cdf poisson_Q77623
Ref: 19777623
Ref: pure-gsl gsl cdf binomial_P77710
Ref: 19877710
Ref: pure-gsl gsl cdf binomial_Q77805
Ref: 19977805
Ref: pure-gsl gsl cdf negative_binomial_P77900
Ref: 19a77900
Ref: pure-gsl gsl cdf negative_binomial_Q78008
Ref: 19b78008
Ref: pure-gsl gsl cdf pascal_P78116
Ref: 19c78116
Ref: pure-gsl gsl cdf pascal_Q78207
Ref: 19d78207
Ref: pure-gsl gsl cdf geometric_P78298
Ref: 19e78298
Ref: pure-gsl gsl cdf geometric_Q78388
Ref: 19f78388
Ref: pure-gsl gsl cdf hypergeometric_P78478
Ref: 1a078478
Ref: pure-gsl gsl cdf hypergeometric_Q78609
Ref: 1a178609
Node: Examples<13>78740
Ref: pure-gsl id1578838
Ref: 1a278838
Node: Sorting85687
Ref: pure-gsl sorting85793
Ref: 1a385793
Ref: pure-gsl module-gsl sort85793
Ref: 685793
Node: Routines<5>86095
Ref: pure-gsl id1686173
Ref: 1a486173
Ref: pure-gsl gsl sort_vector86200
Ref: 1a586200
Ref: pure-gsl gsl sort_vector_index86335
Ref: 1a686335
Node: Examples<14>86488
Ref: pure-gsl id1786566
Ref: 1a786566
Node: Module Index86814
Node: Index87060

End Tag Table


Local Variables:
coding: utf-8
End:

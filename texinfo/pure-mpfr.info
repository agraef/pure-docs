This is pure-mpfr.info, produced by makeinfo version 5.2 from
pure-mpfr.texi.

     Pure 0.59, March 11, 2014

     Albert Gräf (Editor)

     Copyright © 2009-2014, Albert Gräf et al

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-mpfr: (pure-mpfr.info). pure-mpfr
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: pure-mpfr.info,  Node: Top,  Next: Copying,  Up: (dir)

pure-mpfr
*********

     Pure 0.59, March 11, 2014

     Albert Gräf (Editor)

     Copyright © 2009-2014, Albert Gräf et al

  Version 0.4, January 28, 2014

  Albert Graef <<aggraef@gmail.com>>

  The GNU MPFR(1) library is a C library for multiple-precision
floating-point computations with correct rounding.  It is based on
GMP(2) which Pure also uses for its bigint support.

  This module makes the MPFR multiprecision floats (henceforth referred
to as ‘mpfr’ numbers or values) available in Pure, so that they work
with the other types of Pure numbers in an almost seamless fashion.
Pure ‘mpfr’ values are represented as pointers which can readily be
passed as arguments to the MPFR functions, so the representation only
involves minimal overhead on the Pure side.

  The module defines the type of ‘mpfr’ values as an instance of Pure’s
‘real’ type, so that it becomes a well-behaved citizen of Pure’s numeric
tower.  Memory management of these values is automatic.  You can create
an ‘mpfr’ value from any other kind of Pure real value (‘int’, ‘bigint’
or ‘double’), or from a string in decimal notation, using the ‘mpfr’
function.  Back conversions are provided from ‘mpfr’ to ‘int’, ‘bigint’,
‘double’ and ‘string’ (the latter by means of a custom pretty-printer
installed by this module, so that mpfr values are printed in a format
similar to the ‘printf %g’ format).  Integration with Pure’s ‘complex’
type is provided as well.

  Please note that this module needs more testing and the API hasn’t
been finalized yet, but it should be perfectly usable already.  As
usual, please report any bugs on the Pure issue tracker, on the Pure
mailing list, or directly to the author, see
‘http://purelang.bitbucket.org/’.

* Menu:

* Copying:: 
* Installation:: 
* Usage:: 
* Examples:: 
* Module Index:: 
* Index:: 

   ---------- Footnotes ----------

   (1) http://www.mpfr.org/

   (2) http://gmplib.org


File: pure-mpfr.info,  Node: Copying,  Next: Installation,  Prev: Top,  Up: Top

1 Copying
*********

Copyright (c) 2011 by Albert Graef.

  pure-mpfr is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

  pure-mpfr is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
License along with this program.  If not, see
<‘http://www.gnu.org/licenses/’>.


File: pure-mpfr.info,  Node: Installation,  Next: Usage,  Prev: Copying,  Up: Top

2 Installation
**************

Get the latest source from
‘https://bitbucket.org/purelang/pure-lang/downloads/pure-mpfr-0.4.tar.gz’.

  Run ‘make’ to compile the module and ‘make install’ (as root) to
install it in the Pure library directory.  This requires GNU make, and
of course you need to have Pure and libmpfr installed.

  ‘make’ tries to guess your Pure installation directory and
platform-specific setup.  If it gets this wrong, you can set some
variables manually, please check the Makefile for details.

     Note: This module requires Pure 0.50 or later and libmpfr 3.x
     (3.0.0 has been tested).  Older libmpfr versions (2.x) probably
     require some work.


File: pure-mpfr.info,  Node: Usage,  Next: Examples,  Prev: Installation,  Up: Top

3 Usage
*******

After installation, you can use the operations of this module by placing
the following import declaration in your Pure programs:

     using mpfr;

     Note: This also pulls in the ‘math’ standard library module, whose
     operations are overloaded by the ‘mpfr’ module in order to provide
     support for ‘mpfr’ values.  Thus you don’t need to explicitly
     import the ‘math’ module when using the ‘mpfr’ module.

     If you use both the *note mpfr: 0. module and the ‘pointers’
     standard library module in your script, make sure that you import
     the ‘pointers’ module _after_ ‘mpfr’, so that the definitions of
     pointer arithmetic in the ‘pointers’ module do not interfere with
     the overloading of arithmetic operations in the ‘mpfr’ module.

* Menu:

* Precision and Rounding:: 
* MPFR Numbers:: 
* Conversions:: 
* Arithmetic:: 
* Math Functions:: 
* Complex Number Support:: 


File: pure-mpfr.info,  Node: Precision and Rounding,  Next: MPFR Numbers,  Up: Usage

3.1 Precision and Rounding
==========================

The following operations of the MPFR library are provided to inspect and
change the default precision and rounding modes used by MPFR.

 -- Pure Function: mpfr_get_default_prec
 -- Pure Function: mpfr_set_default_prec prec

     Get and set the default precision in terms of number of bits in the
     mantissa, including the sign.  MPFR initially sets this to 53
     (matching the mantissa size of ‘double’ values).  It can be changed
     to any desired value not less than 2.

 -- Pure Function: mpfr_get_prec x

     Get the precision of an ‘mpfr’ number ‘x’.  Note that ‘mpfr’
     numbers always keep the precision they were created with, but it is
     possible to create a new ‘mpfr’ number with any given precision
     from an existing ‘mpfr’ number using the *note mpfr: a. function,
     see below.

 -- Pure Function: mpfr_get_default_rounding_mode
 -- Pure Function: mpfr_set_default_rounding_mode rnd

     Get and set the default rounding mode, which is used for all
     arithmetic operations and mathematical functions provided by this
     module.  The given rounding mode ‘rnd’ must be one of the supported
     rounding modes listed below.

 -- Constant: MPFR_RNDN // round to nearest, with ties to even
 -- Constant: MPFR_RNDZ // round toward zero
 -- Constant: MPFR_RNDU // round toward +Inf
 -- Constant: MPFR_RNDD // round toward -Inf
 -- Constant: MPFR_RNDA // round away from zero

     Supported rounding modes.  Please check the MPFR documentation for
     details.

  In addition, the following operations enable you to control the
precision in textual representations of ‘mpfr’ values.  This information
is used by the custom pretty-printer for ‘mpfr’ values installed by the
module.

 -- Pure Function: mpfr_get_print_prec
 -- Pure Function: mpfr_set_print_prec prec

     Get and set the precision (number of decimal digits in the
     mantissa) used by the pretty-printer.


File: pure-mpfr.info,  Node: MPFR Numbers,  Next: Conversions,  Prev: Precision and Rounding,  Up: Usage

3.2 MPFR Numbers
================

The module defines the following data type for representing ‘mpfr’
values, which is a subtype of the Pure ‘real’ type:

 -- Pure Type: mpfr

     This is a tagged pointer type (denoted ‘mpfr*’ in Pure extern
     declarations) which is compatible with the ‘mpfr_t’ and ‘mpfr_ptr’
     data types of the MPFR C library.  Members of this type are
     "cooked" pointers, which are allocated dynamically and freed
     automatically when they are garbage-collected (by means of a
     corresponding Pure sentry).

 -- Pure Function: mpfrp x

     Type predicate checking for ‘mpfr’ values.


File: pure-mpfr.info,  Node: Conversions,  Next: Arithmetic,  Prev: MPFR Numbers,  Up: Usage

3.3 Conversions
===============

The following operations are provided to convert between ‘mpfr’ numbers
and other kinds of Pure ‘real’ values.

 -- Pure Function: mpfr x
 -- Pure Function: mpfr (x,prec)
 -- Pure Function: mpfr (x,prec,rnd)

     This function converts any real number (‘int’, ‘bigint’, ‘double’,
     ‘rational’, *note mpfr: 15.) to an ‘mpfr’ value.

     Optionally, it is possible to specify a precision (number of bits
     in the mantissa) ‘prec’ and a rounding mode ‘rnd’ (one of the
     ‘MPFR_RND’ constants), otherwise MPFR’s default precision and
     rounding mode are used (see *note Precision and Rounding: 6.
     above).  Note that this function may also be used to convert an
     ‘mpfr’ to a new ‘mpfr’ number, possibly with a different precision
     and rounding.

     The argument ‘x’ can also be a string denoting a floating point
     number in decimal notation with optional sign, decimal point and/or
     scaling factor, which is parsed and converted to an ‘mpfr’ number
     using the corresponding MPFR function.

 -- Pure Function: int x
 -- Pure Function: bigint x
 -- Pure Function: double x

     Convert an ‘mpfr’ number x to the corresponding type of real
     number.  Please note that there is no ‘rational’ conversion, as
     MPFR does not provide such an operation, but if you need this then
     you can first convert ‘x’ to a ‘double’ and then apply the standard
     library ‘rational’ function to it (this may loose precision, of
     course).

 -- Pure Function: str x

     By virtue of the custom pretty-printer provided by this module, the
     standard library ‘str’ function can be used to obtain a printable
     representation of an ‘mpfr’ number ‘x’ in decimal notation.  The
     result is a string.

 -- Pure Function: floor x
 -- Pure Function: ceil x
 -- Pure Function: round x
 -- Pure Function: trunc x
 -- Pure Function: frac x

     Rounding and truncation functions.  These all take and yield ‘mpfr’
     numbers.  *note frac: 22. returns the fractional part of an ‘mpfr’
     number, i.e., ‘x-trunc x’.


File: pure-mpfr.info,  Node: Arithmetic,  Next: Math Functions,  Prev: Conversions,  Up: Usage

3.4 Arithmetic
==============

The following standard operators (see the ‘purelib’) are overloaded to
provide ‘mpfr’ arithmetic and comparisons.  These all handle mixed
‘mpfr’/‘real’ operands.

 -- Pure Function: - x
 -- Pure Function: x + y

 -- Pure Function: x - y
 -- Pure Function: x * y
 -- Pure Function: x / y
 -- Pure Function: x ^ y

     Arithmetic operations.

 -- Pure Function: x == y
 -- Pure Function: x ~= y
 -- Pure Function: x <= y
 -- Pure Function: x >= y
 -- Pure Function: x < y
 -- Pure Function: x > y

     Comparisons.


File: pure-mpfr.info,  Node: Math Functions,  Next: Complex Number Support,  Prev: Arithmetic,  Up: Usage

3.5 Math Functions
==================

The following functions from the ‘math’ module are overloaded to provide
support for ‘mpfr’ values.  Note that it is also possible to invoke the
corresponding functions from the MPFR library in a direct fashion, using
the same function names with an additional ‘_mpfr’ suffix.  These
functions also accept other kinds of ‘real’ arguments which are
converted to ‘mpfr’ before applying the MPFR function.

 -- Pure Function: abs x

     Absolute value (this is implemented directly, so there’s no
     corresponding ‘_mpfr’ function for this).

 -- Pure Function: sqrt x
 -- Pure Function: exp x
 -- Pure Function: ln x
 -- Pure Function: log x

     Square root, exponential and logarithms.

 -- Pure Function: sin x
 -- Pure Function: cos x
 -- Pure Function: tan x
 -- Pure Function: asin x
 -- Pure Function: acos x
 -- Pure Function: atan x
 -- Pure Function: atan2 y x

     Trigonometric functions.

 -- Pure Function: sinh x
 -- Pure Function: cosh x
 -- Pure Function: tanh x
 -- Pure Function: asinh x
 -- Pure Function: acosh x
 -- Pure Function: atanh x

     Hyperbolic trigonometric functions.


File: pure-mpfr.info,  Node: Complex Number Support,  Prev: Math Functions,  Up: Usage

3.6 Complex Number Support
==========================

The following functions from the ‘math’ module are overloaded to provide
support for complex values involving ‘mpfr’ numbers:

 -- Pure Function: complex x
 -- Pure Function: polar x
 -- Pure Function: rect x
 -- Pure Function: cis x
 -- Pure Function: arg x
 -- Pure Function: re x
 -- Pure Function: im x
 -- Pure Function: conj x


File: pure-mpfr.info,  Node: Examples,  Next: Module Index,  Prev: Usage,  Up: Top

4 Examples
**********

Import the module and set the default precision:

     > using mpfr;
     > mpfr_set_default_prec 64; // extended precision (long double on x86)
     ()

  Calculate pi with the current precision.  Note that mixed arithmetic
works with any combination of real and mpfr numbers.

     > let Pi = 4*atan (mpfr 1);
     > pi; Pi; abs (Pi-pi);
     3.14159265358979
     3.14159265358979323851
     1.22514845490862001043e-16

     > let Pi2 = Pi^2;
     > Pi2; sqrt Pi2; sqrt Pi2 == Pi;
     9.86960440108935861941
     3.14159265358979323851
     1

  You can also query the precision of a number and change it on the fly:

     > Pi; mpfr_get_prec Pi;
     3.14159265358979323851
     64
     > let Pi1 = mpfr (Pi,53); Pi1; mpfr_get_prec Pi1;
     3.1415926535897931
     53

  Complex ‘mpfr’ numbers work, too:

     > let z = mpfr 2^(1/i); z;
     0.769238901363972126565+:-0.638961276313634801184
     > let z = ln z/ln (mpfr 2); z;
     0.0+:-1.0
     > abs z, arg z;
     1.0,-1.57079632679489661926
     > polar z;
     1.0<:-1.57079632679489661926


File: pure-mpfr.info,  Node: Module Index,  Next: Index,  Prev: Examples,  Up: Top

Module Index
************

* Menu:

* mpfr: 0. 


File: pure-mpfr.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* * (infix function):                    Arithmetic.           (line 10)
* + (infix function):                    Arithmetic.           (line 10)
* - (prefix function):                   Arithmetic.           (line 10)
* / (infix function):                    Arithmetic.           (line 10)
* < (infix function):                    Arithmetic.           (line 20)
* <= (infix function):                   Arithmetic.           (line 20)
* == (infix function):                   Arithmetic.           (line 20)
* > (infix function):                    Arithmetic.           (line 20)
* >= (infix function):                   Arithmetic.           (line 20)
* ^ (infix function):                    Arithmetic.           (line 10)
* ~= (infix function):                   Arithmetic.           (line 20)
* abs (function):                        Math Functions.       (line 13)
* acos (function):                       Math Functions.       (line 25)
* acosh (function):                      Math Functions.       (line 35)
* arg (function):                        Complex Number Support.
                                                               (line  9)
* asin (function):                       Math Functions.       (line 25)
* asinh (function):                      Math Functions.       (line 35)
* atan (function):                       Math Functions.       (line 25)
* atan2 (function):                      Math Functions.       (line 25)
* atanh (function):                      Math Functions.       (line 35)
* bigint (function):                     Conversions.          (line 29)
* ceil (function):                       Conversions.          (line 47)
* cis (function):                        Complex Number Support.
                                                               (line  9)
* complex (function):                    Complex Number Support.
                                                               (line  9)
* conj (function):                       Complex Number Support.
                                                               (line  9)
* cos (function):                        Math Functions.       (line 25)
* cosh (function):                       Math Functions.       (line 35)
* double (function):                     Conversions.          (line 29)
* exp (function):                        Math Functions.       (line 18)
* floor (function):                      Conversions.          (line 47)
* frac (function):                       Conversions.          (line 47)
* im (function):                         Complex Number Support.
                                                               (line  9)
* int (function):                        Conversions.          (line 29)
* ln (function):                         Math Functions.       (line 18)
* log (function):                        Math Functions.       (line 18)
* mpfr (function):                       Conversions.          (line  9)
* mpfr (function) <1>:                   Conversions.          (line  9)
* mpfr (function) <2>:                   Conversions.          (line  9)
* mpfr (module):                         Top.                  (line 12)
* mpfr (type):                           MPFR Numbers.         (line  9)
* mpfrp (function):                      MPFR Numbers.         (line 18)
* mpfr_get_default_prec (function):      Precision and Rounding.
                                                               (line  9)
* mpfr_get_default_rounding_mode (function): Precision and Rounding.
                                                               (line 25)
* mpfr_get_prec (function):              Precision and Rounding.
                                                               (line 17)
* mpfr_get_print_prec (function):        Precision and Rounding.
                                                               (line 47)
* MPFR_RNDA (constant):                  Precision and Rounding.
                                                               (line 33)
* MPFR_RNDD (constant):                  Precision and Rounding.
                                                               (line 33)
* MPFR_RNDN (constant):                  Precision and Rounding.
                                                               (line 33)
* MPFR_RNDU (constant):                  Precision and Rounding.
                                                               (line 33)
* MPFR_RNDZ (constant):                  Precision and Rounding.
                                                               (line 33)
* mpfr_set_default_prec (function):      Precision and Rounding.
                                                               (line  9)
* mpfr_set_default_rounding_mode (function): Precision and Rounding.
                                                               (line 25)
* mpfr_set_print_prec (function):        Precision and Rounding.
                                                               (line 47)
* polar (function):                      Complex Number Support.
                                                               (line  9)
* re (function):                         Complex Number Support.
                                                               (line  9)
* rect (function):                       Complex Number Support.
                                                               (line  9)
* round (function):                      Conversions.          (line 47)
* sin (function):                        Math Functions.       (line 25)
* sinh (function):                       Math Functions.       (line 35)
* sqrt (function):                       Math Functions.       (line 18)
* str (function):                        Conversions.          (line 40)
* tan (function):                        Math Functions.       (line 25)
* tanh (function):                       Math Functions.       (line 35)
* trunc (function):                      Conversions.          (line 47)



Tag Table:
Node: Top359
Ref: pure-mpfr doc553
Ref: 1553
Ref: Top-Footnote-12361
Ref: Top-Footnote-22390
Node: Copying2416
Ref: pure-mpfr module-mpfr2499
Ref: 02499
Ref: pure-mpfr copying2499
Ref: 22499
Ref: pure-mpfr pure-mpfr2499
Ref: 32499
Node: Installation3196
Ref: pure-mpfr installation3281
Ref: 43281
Node: Usage3973
Ref: pure-mpfr usage4059
Ref: 54059
Node: Precision and Rounding5022
Ref: pure-mpfr precision-and-rounding5110
Ref: 65110
Ref: pure-mpfr mpfr_get_default_prec5301
Ref: 75301
Ref: pure-mpfr mpfr_set_default_prec5342
Ref: 85342
Ref: pure-mpfr mpfr_get_prec5650
Ref: 95650
Ref: pure-mpfr mpfr_get_default_rounding_mode6002
Ref: b6002
Ref: pure-mpfr mpfr_set_default_rounding_mode6052
Ref: c6052
Ref: pure-mpfr MPFR_RNDN6356
Ref: d6356
Ref: pure-mpfr MPFR_RNDZ6419
Ref: e6419
Ref: pure-mpfr MPFR_RNDU6464
Ref: f6464
Ref: pure-mpfr MPFR_RNDD6509
Ref: 106509
Ref: pure-mpfr MPFR_RNDA6554
Ref: 116554
Ref: pure-mpfr mpfr_get_print_prec6918
Ref: 126918
Ref: pure-mpfr mpfr_set_print_prec6957
Ref: 136957
Node: MPFR Numbers7110
Ref: pure-mpfr mpfr-numbers7218
Ref: 147218
Ref: pure-mpfr mpfr/type7381
Ref: 157381
Ref: pure-mpfr mpfrp7784
Ref: 167784
Node: Conversions7865
Ref: pure-mpfr conversions7961
Ref: 177961
Ref: pure-mpfr mpfr8114
Ref: a8114
Ref: pure-mpfr mpfr/28140
Ref: 188140
Ref: pure-mpfr mpfr/38173
Ref: 198173
Ref: pure-mpfr int/mpfr9078
Ref: 1a9078
Ref: pure-mpfr bigint/mpfr9103
Ref: 1b9103
Ref: pure-mpfr double/mpfr9131
Ref: 1c9131
Ref: pure-mpfr str/mpfr9544
Ref: 1d9544
Ref: pure-mpfr floor/mpfr9822
Ref: 1e9822
Ref: pure-mpfr ceil/mpfr9849
Ref: 1f9849
Ref: pure-mpfr round/mpfr9875
Ref: 209875
Ref: pure-mpfr trunc/mpfr9902
Ref: 219902
Ref: pure-mpfr frac/mpfr9929
Ref: 229929
Node: Arithmetic10146
Ref: pure-mpfr arithmetic10244
Ref: 2310244
Ref: pure-mpfr -/mpfr10454
Ref: 2410454
Ref: pure-mpfr +/mpfr10477
Ref: 2510477
Ref: pure-mpfr */mpfr10528
Ref: 2610528
Ref: pure-mpfr //mpfr10553
Ref: 2710553
Ref: pure-mpfr ^/mpfr10578
Ref: 2810578
Ref: pure-mpfr ==/mpfr10633
Ref: 2910633
Ref: pure-mpfr ~=/mpfr10659
Ref: 2a10659
Ref: pure-mpfr <=/mpfr10685
Ref: 2b10685
Ref: pure-mpfr >=/mpfr10711
Ref: 2c10711
Ref: pure-mpfr </mpfr10737
Ref: 2d10737
Ref: pure-mpfr >/mpfr10762
Ref: 2e10762
Node: Math Functions10807
Ref: pure-mpfr math-functions10916
Ref: 2f10916
Ref: pure-mpfr abs/mpfr11379
Ref: 3011379
Ref: pure-mpfr sqrt/mpfr11524
Ref: 3111524
Ref: pure-mpfr exp/mpfr11550
Ref: 3211550
Ref: pure-mpfr ln/mpfr11575
Ref: 3311575
Ref: pure-mpfr log/mpfr11599
Ref: 3411599
Ref: pure-mpfr sin/mpfr11672
Ref: 3511672
Ref: pure-mpfr cos/mpfr11697
Ref: 3611697
Ref: pure-mpfr tan/mpfr11722
Ref: 3711722
Ref: pure-mpfr asin/mpfr11747
Ref: 3811747
Ref: pure-mpfr acos/mpfr11773
Ref: 3911773
Ref: pure-mpfr atan/mpfr11799
Ref: 3a11799
Ref: pure-mpfr atan2/mpfr11825
Ref: 3b11825
Ref: pure-mpfr sinh/mpfr11886
Ref: 3c11886
Ref: pure-mpfr cosh/mpfr11912
Ref: 3d11912
Ref: pure-mpfr tanh/mpfr11938
Ref: 3e11938
Ref: pure-mpfr asinh/mpfr11964
Ref: 3f11964
Ref: pure-mpfr acosh/mpfr11991
Ref: 4011991
Ref: pure-mpfr atanh/mpfr12018
Ref: 4112018
Node: Complex Number Support12088
Ref: pure-mpfr complex-number-support12178
Ref: 4212178
Ref: pure-mpfr complex/mpfr12368
Ref: 4312368
Ref: pure-mpfr polar/mpfr12397
Ref: 4412397
Ref: pure-mpfr rect/mpfr12424
Ref: 4512424
Ref: pure-mpfr cis/mpfr12450
Ref: 4612450
Ref: pure-mpfr arg/mpfr12475
Ref: 4712475
Ref: pure-mpfr re/mpfr12500
Ref: 4812500
Ref: pure-mpfr im/mpfr12524
Ref: 4912524
Ref: pure-mpfr conj/mpfr12548
Ref: 4a12548
Node: Examples12575
Ref: pure-mpfr examples12661
Ref: 4b12661
Node: Module Index13743
Node: Index13878

End Tag Table


Local Variables:
coding: utf-8
End:

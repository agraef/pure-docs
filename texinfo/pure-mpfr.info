This is pure-mpfr.info, produced by makeinfo version 4.13 from
pure-mpfr.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-mpfr: (pure-mpfr.info). pure-mpfr
END-INFO-DIR-ENTRY

     Pure 0.58, September 15, 2013

     Albert Gr채f (Editor)

     Copyright (C) 2009-2013, Albert Gr채f et al


File: pure-mpfr.info,  Node: Top,  Next: Copying,  Up: (dir)

pure-mpfr
*********

     Pure 0.58, September 15, 2013

     Albert Gr채f (Editor)

     Copyright (C) 2009-2013, Albert Gr채f et al

  Version 0.4, September 08, 2013

  Albert Graef <<aggraef@gmail.com>>

  The GNU MPFR(1) library is a C library for multiple-precision
floating-point computations with correct rounding. It is based on
GMP(2) which Pure also uses for its bigint support.

  This module makes the MPFR multiprecision floats (henceforth referred
to as `mpfr' numbers or values) available in Pure, so that they work
with the other types of Pure numbers in an almost seamless fashion.
Pure `mpfr' values are represented as pointers which can readily be
passed as arguments to the MPFR functions, so the representation only
involves minimal overhead on the Pure side.

  The module defines the type of `mpfr' values as an instance of Pure's
`real' type, so that it becomes a well-behaved citizen of Pure's numeric
tower. Memory management of these values is automatic. You can create an
`mpfr' value from any other kind of Pure real value (`int', `bigint' or
`double'), or from a string in decimal notation, using the `mpfr'
function. Back conversions are provided from `mpfr' to `int', `bigint',
`double' and `string' (the latter by means of a custom pretty-printer
installed by this module, so that mpfr values are printed in a format
similar to the `printf %g' format). Integration with Pure's `complex'
type is provided as well.

  Please note that this module needs more testing and the API hasn't
been finalized yet, but it should be perfectly usable already. As
usual, please report any bugs on the Pure issue tracker, on the Pure
mailing list, or directly to the author, see
<http://purelang.bitbucket.org/>.

* Menu:

* Copying::
* Installation::
* Usage::
* Examples::
* Module Index::
* Index::

  ---------- Footnotes ----------

  (1) http://www.mpfr.org/

  (2) http://gmplib.org


File: pure-mpfr.info,  Node: Copying,  Next: Installation,  Prev: Top,  Up: Top

1 Copying
*********

Copyright (c) 2011 by Albert Graef.

  pure-mpfr is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

  pure-mpfr is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
License along with this program.  If not, see
<<http://www.gnu.org/licenses/>>.


File: pure-mpfr.info,  Node: Installation,  Next: Usage,  Prev: Copying,  Up: Top

2 Installation
**************

Get the latest source from
<https://bitbucket.org/purelang/pure-lang/downloads/pure-mpfr-0.4.tar.gz>.

  Run `make' to compile the module and `make install' (as root) to
install it in the Pure library directory. This requires GNU make, and
of course you need to have Pure and libmpfr installed.

  `make' tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some
variables manually, please check the Makefile for details.

     Note: This module requires Pure 0.50 or later and libmpfr 3.x
     (3.0.0 has been tested). Older libmpfr versions (2.x) probably
     require some work.


File: pure-mpfr.info,  Node: Usage,  Next: Examples,  Prev: Installation,  Up: Top

3 Usage
*******

After installation, you can use the operations of this module by
placing the following import declaration in your Pure programs:

    using mpfr;


     Note: This also pulls in the `math' standard library module, whose
     operations are overloaded by the `mpfr' module in order to provide
     support for `mpfr' values. Thus you don't need to explicitly
     import the `math' module when using the `mpfr' module.

     If you use both the *note mpfr: 0. module and the `pointers'
     standard library module in your script, make sure that you import
     the `pointers' module _after_ `mpfr', so that the definitions of
     pointer arithmetic in the `pointers' module do not interfere with
     the overloading of arithmetic operations in the `mpfr' module.

* Menu:

* Precision and Rounding::
* MPFR Numbers::
* Conversions::
* Arithmetic::
* Math Functions::
* Complex Number Support::


File: pure-mpfr.info,  Node: Precision and Rounding,  Next: MPFR Numbers,  Up: Usage

3.1 Precision and Rounding
==========================

The following operations of the MPFR library are provided to inspect and
change the default precision and rounding modes used by MPFR.

 -- Pure Function: mpfr_get_default_prec
 -- Pure Function: mpfr_set_default_prec prec
     Get and set the default precision in terms of number of bits in the
     mantissa, including the sign. MPFR initially sets this to 53
     (matching the mantissa size of `double' values). It can be changed
     to any desired value not less than 2.

 -- Pure Function: mpfr_get_prec x
     Get the precision of an `mpfr' number `x'. Note that `mpfr' numbers
     always keep the precision they were created with, but it is
     possible to create a new `mpfr' number with any given precision
     from an existing `mpfr' number using the *note mpfr: a. function,
     see below.

 -- Pure Function: mpfr_get_default_rounding_mode
 -- Pure Function: mpfr_set_default_rounding_mode rnd
     Get and set the default rounding mode, which is used for all
     arithmetic operations and mathematical functions provided by this
     module. The given rounding mode `rnd' must be one of the supported
     rounding modes listed below.

 -- Constant: MPFR_RNDN // round to nearest, with ties to even
 -- Constant: MPFR_RNDZ // round toward zero
 -- Constant: MPFR_RNDU // round toward +Inf
 -- Constant: MPFR_RNDD // round toward -Inf
 -- Constant: MPFR_RNDA // round away from zero
     Supported rounding modes. Please check the MPFR documentation for
     details.

  In addition, the following operations enable you to control the
precision in textual representations of `mpfr' values. This information
is used by the custom pretty-printer for `mpfr' values installed by the
module.

 -- Pure Function: mpfr_get_print_prec
 -- Pure Function: mpfr_set_print_prec prec
     Get and set the precision (number of decimal digits in the
     mantissa) used by the pretty-printer.


File: pure-mpfr.info,  Node: MPFR Numbers,  Next: Conversions,  Prev: Precision and Rounding,  Up: Usage

3.2 MPFR Numbers
================

The module defines the following data type for representing `mpfr'
values, which is a subtype of the Pure `real' type:

 -- Pure Type: mpfr
     This is a tagged pointer type (denoted `mpfr*' in Pure extern
     declarations) which is compatible with the `mpfr_t' and `mpfr_ptr'
     data types of the MPFR C library. Members of this type are
     "cooked" pointers, which are allocated dynamically and freed
     automatically when they are garbage-collected (by means of a
     corresponding Pure sentry).

 -- Pure Function: mpfrp x
     Type predicate checking for `mpfr' values.


File: pure-mpfr.info,  Node: Conversions,  Next: Arithmetic,  Prev: MPFR Numbers,  Up: Usage

3.3 Conversions
===============

The following operations are provided to convert between `mpfr' numbers
and other kinds of Pure `real' values.

 -- Pure Function: mpfr x
 -- Pure Function: mpfr (x,prec)
 -- Pure Function: mpfr (x,prec,rnd)
     This function converts any real number (`int', `bigint', `double',
     `rational', *note mpfr: 15.) to an `mpfr' value.

     Optionally, it is possible to specify a precision (number of bits
     in the mantissa) `prec' and a rounding mode `rnd' (one of the
     `MPFR_RND' constants), otherwise MPFR's default precision and
     rounding mode are used (see *note Precision and Rounding: 6.
     above). Note that this function may also be used to convert an
     `mpfr' to a new `mpfr' number, possibly with a different precision
     and rounding.

     The argument `x' can also be a string denoting a floating point
     number in decimal notation with optional sign, decimal point
     and/or scaling factor, which is parsed and converted to an `mpfr'
     number using the corresponding MPFR function.

 -- Pure Function: int x
 -- Pure Function: bigint x
 -- Pure Function: double x
     Convert an `mpfr' number x to the corresponding type of real
     number.  Please note that there is no `rational' conversion, as
     MPFR does not provide such an operation, but if you need this then
     you can first convert `x' to a `double' and then apply the
     standard library `rational' function to it (this may loose
     precision, of course).

 -- Pure Function: str x
     By virtue of the custom pretty-printer provided by this module, the
     standard library `str' function can be used to obtain a printable
     representation of an `mpfr' number `x' in decimal notation. The
     result is a string.

 -- Pure Function: floor x
 -- Pure Function: ceil x
 -- Pure Function: round x
 -- Pure Function: trunc x
 -- Pure Function: frac x
     Rounding and truncation functions. These all take and yield `mpfr'
     numbers. *note frac: 22. returns the fractional part of an `mpfr'
     number, i.e., `x-trunc x'.


File: pure-mpfr.info,  Node: Arithmetic,  Next: Math Functions,  Prev: Conversions,  Up: Usage

3.4 Arithmetic
==============

The following standard operators (see the `purelib') are overloaded to
provide `mpfr' arithmetic and comparisons. These all handle mixed
`mpfr'/`real' operands.

 -- Pure Function: - x
 -- Pure Function: x + y
 -- Pure Function: x - y
 -- Pure Function: x * y
 -- Pure Function: x / y
 -- Pure Function: x ^ y
     Arithmetic operations.

 -- Pure Function: x == y
 -- Pure Function: x ~= y
 -- Pure Function: x <= y
 -- Pure Function: x >= y
 -- Pure Function: x < y
 -- Pure Function: x > y
     Comparisons.


File: pure-mpfr.info,  Node: Math Functions,  Next: Complex Number Support,  Prev: Arithmetic,  Up: Usage

3.5 Math Functions
==================

The following functions from the `math' module are overloaded to provide
support for `mpfr' values. Note that it is also possible to invoke the
corresponding functions from the MPFR library in a direct fashion,
using the same function names with an additional `_mpfr' suffix. These
functions also accept other kinds of `real' arguments which are
converted to `mpfr' before applying the MPFR function.

 -- Pure Function: abs x
     Absolute value (this is implemented directly, so there's no
     corresponding `_mpfr' function for this).

 -- Pure Function: sqrt x
 -- Pure Function: exp x
 -- Pure Function: ln x
 -- Pure Function: log x
     Square root, exponential and logarithms.

 -- Pure Function: sin x
 -- Pure Function: cos x
 -- Pure Function: tan x
 -- Pure Function: asin x
 -- Pure Function: acos x
 -- Pure Function: atan x
 -- Pure Function: atan2 y x
     Trigonometric functions.

 -- Pure Function: sinh x
 -- Pure Function: cosh x
 -- Pure Function: tanh x
 -- Pure Function: asinh x
 -- Pure Function: acosh x
 -- Pure Function: atanh x
     Hyperbolic trigonometric functions.


File: pure-mpfr.info,  Node: Complex Number Support,  Prev: Math Functions,  Up: Usage

3.6 Complex Number Support
==========================

The following functions from the `math' module are overloaded to provide
support for complex values involving `mpfr' numbers:

 -- Pure Function: complex x
 -- Pure Function: polar x
 -- Pure Function: rect x
 -- Pure Function: cis x
 -- Pure Function: arg x
 -- Pure Function: re x
 -- Pure Function: im x
 -- Pure Function: conj x


File: pure-mpfr.info,  Node: Examples,  Next: Module Index,  Prev: Usage,  Up: Top

4 Examples
**********

Import the module and set the default precision:

    > using mpfr;
    > mpfr_set_default_prec 64; // extended precision (long double on x86)
    ()

Calculate pi with the current precision. Note that mixed arithmetic
works with any combination of real and mpfr numbers.

    > let Pi = 4*atan (mpfr 1);
    > pi; Pi; abs (Pi-pi);
    3.14159265358979
    3.14159265358979323851
    1.22514845490862001043e-16

    > let Pi2 = Pi^2;
    > Pi2; sqrt Pi2; sqrt Pi2 == Pi;
    9.86960440108935861941
    3.14159265358979323851
    1

You can also query the precision of a number and change it on the fly:

    > Pi; mpfr_get_prec Pi;
    3.14159265358979323851
    64
    > let Pi1 = mpfr (Pi,53); Pi1; mpfr_get_prec Pi1;
    3.1415926535897931
    53

Complex `mpfr' numbers work, too:

    > let z = mpfr 2^(1/i); z;
    0.769238901363972126565+:-0.638961276313634801184
    > let z = ln z/ln (mpfr 2); z;
    0.0+:-1.0
    > abs z, arg z;
    1.0,-1.57079632679489661926
    > polar z;
    1.0<:-1.57079632679489661926



File: pure-mpfr.info,  Node: Module Index,  Next: Index,  Prev: Examples,  Up: Top

Module Index
************

* Menu:

* mpfr: 0.


File: pure-mpfr.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* * (infix function):                    Arithmetic.           (line 10)
* + (infix function):                    Arithmetic.           (line 10)
* - (prefix function):                   Arithmetic.           (line 10)
* / (infix function):                    Arithmetic.           (line 10)
* < (infix function):                    Arithmetic.           (line 18)
* <= (infix function):                   Arithmetic.           (line 18)
* == (infix function):                   Arithmetic.           (line 18)
* > (infix function):                    Arithmetic.           (line 18)
* >= (infix function):                   Arithmetic.           (line 18)
* ^ (infix function):                    Arithmetic.           (line 10)
* abs (function):                        Math Functions.       (line 13)
* acos (function):                       Math Functions.       (line 23)
* acosh (function):                      Math Functions.       (line 32)
* arg (function):                        Complex Number Support.
                                                               (line  9)
* asin (function):                       Math Functions.       (line 23)
* asinh (function):                      Math Functions.       (line 32)
* atan (function):                       Math Functions.       (line 23)
* atan2 (function):                      Math Functions.       (line 23)
* atanh (function):                      Math Functions.       (line 32)
* bigint (function):                     Conversions.          (line 28)
* ceil (function):                       Conversions.          (line 44)
* cis (function):                        Complex Number Support.
                                                               (line  9)
* complex (function):                    Complex Number Support.
                                                               (line  9)
* conj (function):                       Complex Number Support.
                                                               (line  9)
* cos (function):                        Math Functions.       (line 23)
* cosh (function):                       Math Functions.       (line 32)
* double (function):                     Conversions.          (line 28)
* exp (function):                        Math Functions.       (line 17)
* floor (function):                      Conversions.          (line 44)
* frac (function):                       Conversions.          (line 44)
* im (function):                         Complex Number Support.
                                                               (line  9)
* int (function):                        Conversions.          (line 28)
* ln (function):                         Math Functions.       (line 17)
* log (function):                        Math Functions.       (line 17)
* mpfr (function):                       Conversions.          (line  9)
* mpfr (module):                         Top.                  (line 12)
* mpfr (type):                           MPFR Numbers.         (line  9)
* mpfr_get_default_prec (function):      Precision and Rounding.
                                                               (line  9)
* mpfr_get_default_rounding_mode (function): Precision and Rounding.
                                                               (line 23)
* mpfr_get_prec (function):              Precision and Rounding.
                                                               (line 16)
* mpfr_get_print_prec (function):        Precision and Rounding.
                                                               (line 43)
* MPFR_RNDA (constant):                  Precision and Rounding.
                                                               (line 30)
* MPFR_RNDD (constant):                  Precision and Rounding.
                                                               (line 30)
* MPFR_RNDN (constant):                  Precision and Rounding.
                                                               (line 30)
* MPFR_RNDU (constant):                  Precision and Rounding.
                                                               (line 30)
* MPFR_RNDZ (constant):                  Precision and Rounding.
                                                               (line 30)
* mpfr_set_default_prec (function):      Precision and Rounding.
                                                               (line  9)
* mpfr_set_default_rounding_mode (function): Precision and Rounding.
                                                               (line 23)
* mpfr_set_print_prec (function):        Precision and Rounding.
                                                               (line 43)
* mpfrp (function):                      MPFR Numbers.         (line 17)
* polar (function):                      Complex Number Support.
                                                               (line  9)
* re (function):                         Complex Number Support.
                                                               (line  9)
* rect (function):                       Complex Number Support.
                                                               (line  9)
* round (function):                      Conversions.          (line 44)
* sin (function):                        Math Functions.       (line 23)
* sinh (function):                       Math Functions.       (line 32)
* sqrt (function):                       Math Functions.       (line 17)
* str (function):                        Conversions.          (line 38)
* tan (function):                        Math Functions.       (line 23)
* tanh (function):                       Math Functions.       (line 32)
* trunc (function):                      Conversions.          (line 44)
* ~= (infix function):                   Arithmetic.           (line 18)



Tag Table:
Node: Top360
Ref: pure-mpfr doc559
Ref: 1559
Ref: Top-Footnote-12280
Ref: Top-Footnote-22308
Node: Copying2333
Ref: pure-mpfr module-mpfr2416
Ref: 02416
Ref: pure-mpfr copying2416
Ref: 22416
Ref: pure-mpfr pure-mpfr2416
Ref: 32416
Node: Installation3110
Ref: pure-mpfr installation3195
Ref: 43195
Node: Usage3868
Ref: pure-mpfr usage3954
Ref: 53954
Node: Precision and Rounding4868
Ref: pure-mpfr precision-and-rounding4956
Ref: 64956
Ref: pure-mpfr mpfr_get_default_prec5147
Ref: 75147
Ref: pure-mpfr mpfr_set_default_prec5188
Ref: 85188
Ref: pure-mpfr mpfr_get_prec5489
Ref: 95489
Ref: pure-mpfr mpfr_get_default_rounding_mode5819
Ref: b5819
Ref: pure-mpfr mpfr_set_default_rounding_mode5869
Ref: c5869
Ref: pure-mpfr MPFR_RNDN6167
Ref: d6167
Ref: pure-mpfr MPFR_RNDZ6230
Ref: e6230
Ref: pure-mpfr MPFR_RNDU6275
Ref: f6275
Ref: pure-mpfr MPFR_RNDD6320
Ref: 106320
Ref: pure-mpfr MPFR_RNDA6365
Ref: 116365
Ref: pure-mpfr mpfr_get_print_prec6718
Ref: 126718
Ref: pure-mpfr mpfr_set_print_prec6757
Ref: 136757
Node: MPFR Numbers6909
Ref: pure-mpfr mpfr-numbers7017
Ref: 147017
Ref: pure-mpfr mpfr/type7172
Ref: 157172
Ref: pure-mpfr mpfrp7561
Ref: 167561
Node: Conversions7637
Ref: pure-mpfr conversions7733
Ref: 177733
Ref: pure-mpfr mpfr7878
Ref: a7878
Ref: pure-mpfr mpfr/27904
Ref: 187904
Ref: pure-mpfr mpfr/37937
Ref: 197937
Ref: pure-mpfr int/mpfr8790
Ref: 1a8790
Ref: pure-mpfr bigint/mpfr8815
Ref: 1b8815
Ref: pure-mpfr double/mpfr8843
Ref: 1c8843
Ref: pure-mpfr str/mpfr9235
Ref: 1d9235
Ref: pure-mpfr floor/mpfr9499
Ref: 1e9499
Ref: pure-mpfr ceil/mpfr9526
Ref: 1f9526
Ref: pure-mpfr round/mpfr9552
Ref: 209552
Ref: pure-mpfr trunc/mpfr9579
Ref: 219579
Ref: pure-mpfr frac/mpfr9606
Ref: 229606
Node: Arithmetic9808
Ref: pure-mpfr arithmetic9906
Ref: 239906
Ref: pure-mpfr -/mpfr10099
Ref: 2410099
Ref: pure-mpfr +/mpfr10122
Ref: 2510122
Ref: pure-mpfr */mpfr10172
Ref: 2610172
Ref: pure-mpfr //mpfr10197
Ref: 2710197
Ref: pure-mpfr ^/mpfr10222
Ref: 2810222
Ref: pure-mpfr ==/mpfr10276
Ref: 2910276
Ref: pure-mpfr ~=/mpfr10302
Ref: 2a10302
Ref: pure-mpfr <=/mpfr10328
Ref: 2b10328
Ref: pure-mpfr >=/mpfr10354
Ref: 2c10354
Ref: pure-mpfr </mpfr10380
Ref: 2d10380
Ref: pure-mpfr >/mpfr10405
Ref: 2e10405
Node: Math Functions10449
Ref: pure-mpfr math-functions10558
Ref: 2f10558
Ref: pure-mpfr abs/mpfr10999
Ref: 3010999
Ref: pure-mpfr sqrt/mpfr11137
Ref: 3111137
Ref: pure-mpfr exp/mpfr11163
Ref: 3211163
Ref: pure-mpfr ln/mpfr11188
Ref: 3311188
Ref: pure-mpfr log/mpfr11212
Ref: 3411212
Ref: pure-mpfr sin/mpfr11284
Ref: 3511284
Ref: pure-mpfr cos/mpfr11309
Ref: 3611309
Ref: pure-mpfr tan/mpfr11334
Ref: 3711334
Ref: pure-mpfr asin/mpfr11359
Ref: 3811359
Ref: pure-mpfr acos/mpfr11385
Ref: 3911385
Ref: pure-mpfr atan/mpfr11411
Ref: 3a11411
Ref: pure-mpfr atan2/mpfr11437
Ref: 3b11437
Ref: pure-mpfr sinh/mpfr11497
Ref: 3c11497
Ref: pure-mpfr cosh/mpfr11523
Ref: 3d11523
Ref: pure-mpfr tanh/mpfr11549
Ref: 3e11549
Ref: pure-mpfr asinh/mpfr11575
Ref: 3f11575
Ref: pure-mpfr acosh/mpfr11602
Ref: 4011602
Ref: pure-mpfr atanh/mpfr11629
Ref: 4111629
Node: Complex Number Support11698
Ref: pure-mpfr complex-number-support11788
Ref: 4211788
Ref: pure-mpfr complex/mpfr11970
Ref: 4311970
Ref: pure-mpfr polar/mpfr11999
Ref: 4411999
Ref: pure-mpfr rect/mpfr12026
Ref: 4512026
Ref: pure-mpfr cis/mpfr12052
Ref: 4612052
Ref: pure-mpfr arg/mpfr12077
Ref: 4712077
Ref: pure-mpfr re/mpfr12102
Ref: 4812102
Ref: pure-mpfr im/mpfr12126
Ref: 4912126
Ref: pure-mpfr conj/mpfr12150
Ref: 4a12150
Node: Examples12177
Ref: pure-mpfr examples12263
Ref: 4b12263
Node: Module Index13308
Node: Index13442

End Tag Table


Local Variables:
coding: utf-8
End:

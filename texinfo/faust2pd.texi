\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename faust2pd.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.1.3.@*
@end ifinfo
@settitle faust2pd
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* faust2pd: (faust2pd.info). faust2pd: Pd Patch Generator for Faust
@end direntry

@c %**end of header

@copying
@quotation
Pure 0.59, February 13, 2014

Albert Gräf (Editor)

Copyright @copyright{} 2009-2014, Albert Gräf et al
@end quotation

@end copying

@titlepage
@title faust2pd
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top faust2pd
@insertcopying
@end ifnottex

@c %**start of body
@anchor{faust2pd doc}@anchor{1}
Version 2.5, January 28, 2014

Albert Graef <@email{aggraef@@gmail.com}>

This package contains software which makes it easier to use Faust DSPs with Pd
and the Pure programming language. The main component is the faust2pd script
which creates GUI wrappers for Faust DSPs. The package also includes a bunch
of examples. The software is distributed under the GPL; see the COPYING file
for details.

@cartouche
@quotation Note 
This faust2pd version is written in Pure and was ported from an
earlier version written in Pure's predecessor Q. The version of the script
provided here should be 100% backward-compatible to those previous
versions, except for the following changes:


@itemize -

@item 
The (rarely used) -f (a.k.a. --fake-buttons) option was renamed to -b.

@item 
A new -f (a.k.a. --font-size) option was added to change the font size
of the GUI elements.

@item 
Most command line options can now also be specified using special
@code{[pd:...]} tags in the Faust source.
@end itemize

Also note that you can now run the script on 64 bit systems (Q never worked
there).
@end quotation
@end cartouche

As of version 2.1, the faust2pd script is now compiled to a native executable
before installation. This makes the program start up much faster, which is a
big advantage because most xml files don't take long to be processed.


@menu
* Copying:: 
* Requirements:: 
* Installation:: 
* Quickstart:: 
* Control Interface:: 
* Examples:: 
* Wrapping DSPs with faust2pd:: 
* Conclusion:: 
* Appendix; faustxml: Appendix faustxml. 
* Module Index:: 
* Index:: 

@end menu

@node Copying,Requirements,Top,Top
@anchor{faust2pd copying}@anchor{2}@anchor{faust2pd faust2pd-pd-patch-generator-for-faust}@anchor{3}
@chapter Copying


Copyright (c) 2009-2011 by Albert Graef.

faust2pd is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

faust2pd is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.

@node Requirements,Installation,Copying,Top
@anchor{faust2pd requirements}@anchor{4}
@chapter Requirements


faust2pd is known to work on Linux, Mac OS X, and Windows, and there shouldn't
be any major roadblocks preventing it to work on other systems supported by
Pure.

The faust2pd script is written in the Pure@footnote{http://purelang.bitbucket.org} programming language and requires
Pure's XML module, so you need to install these to make it work. Install the
latest pure*.tar.gz and pure-xml*.tar.gz packages and you should be set. (Pure
0.47 or later is required.) Also make sure that the LLVM base package is
installed, as described in the Pure INSTALL file, some LLVM utilities are
needed to make Pure's batch compiler work.

To run the seqdemo example, you'll also need the Pd Pure external
(pd-pure*.tar.gz), also available at the Pure@footnote{http://purelang.bitbucket.org} website.

To compile the examples, you'll need GNU C++ and make, Pd@footnote{http://puredata.info} and, of course,
Faust@footnote{http://faudiostream.sf.net}. Make sure you get a recent version of Faust; Faust releases >0.9.8
include the puredata architecture necessary to create Pd externals from Faust
DSPs.

@node Installation,Quickstart,Requirements,Top
@anchor{faust2pd installation}@anchor{5}@anchor{faust2pd faust}@anchor{6}
@chapter Installation


Get the latest source from
@indicateurl{https://bitbucket.org/purelang/pure-lang/downloads/faust2pd-2.5.tar.gz}.

Run @code{make} and @code{make install} to compile and install the faust2pd program
on your system. You can set the installation prefix by running make as @code{make
install prefix=/some/path}. Default installation prefix is /usr/local,
faust2pd is installed in the bin directory below that.

Optionally, you can also run @code{make install-pd} to copy the supporting Pd
abstractions (faust-*.pd) to your lib/pd/extra directory, so that you can use
the patches generated by faust2pd without copying these abstractions to your
working directory. The Makefile tries to guess the prefix of your Pd
installation, if it guesses wrong, you can specify the prefix explicitly by
running make as @code{make install-pd pdprefix=/some/path}.

The included faustxml.pure script provides access to Faust-generated dsp
descriptions in xml files to Pure scripts. This module is described in its own
@pxref{7,,appendix} below. It may have uses beyond faust2pd, but isn't normally
installed. If you want to use this module, you can just copy it to your Pure
library directory.

@node Quickstart,Control Interface,Installation,Top
@anchor{faust2pd quickstart}@anchor{8}@anchor{faust2pd appendix-faustxml}@anchor{7}@anchor{faust2pd id1}@anchor{9}
@chapter Quickstart


Run @code{make examples} to compile the Faust examples included in this package
to corresponding Pd plugins. After that you should be able to run the patches
in the various subdirectories of the examples directory. Everything is set up
so that you can try the examples "in-place", without installing anything
except the required software as noted in @pxref{4,,Requirements} above. You can also run
@code{make realclean} before @code{make} to regenerate everything from scratch (this
requires faust2pd, so this will only work if you already installed the Pure
interpreter).

Faust Pd plugins work in much the same way as the well-known plugin~ object
(which interfaces to LADSPA plugins), except that each Faust DSP is compiled
to its own Pd external. Under Linux, the basic compilation process is as
follows (taking the freeverb module from the Faust distribution as an
example):

@example
# compile the Faust source to a C++ module using the "puredata" architecture
faust -a puredata.cpp freeverb.dsp -o freeverb.cpp
# compile the C++ module to a Pd plugin
g++ -shared -Dmydsp=freeverb freeverb.cpp -o freeverb~.pd_linux
@end example

@noindent

By these means, a Faust DSP named @code{xyz} with n audio inputs and m audio
outputs becomes a Pd object @code{xyz~} with n+1 inlets and m+1 outlets. The
leftmost inlet/outlet pair is for control messages only. This allows you to
inspect and change the controls the unit provides, as detailed below. The
remaining inlets and outlets are the audio inputs and outputs of the unit,
respectively. For instance, @code{freeverb.dsp} becomes the Pd object
@code{freeverb~} which, in addition to the control inlet/outlet pair, has 2 audio
inputs and outputs.

When creating a Faust object it is also possible to specify, as optional
creation parameters, an extra unit name (this is explained in the following
section) and a sample rate. If no sample rate is specified explicitly, it
defaults to the sample rate at which Pd is executing. (Usually it is not
necessary or even desirable to override the default choice, but this might
occasionally be useful for debugging purposes.)

As already mentioned, the main ingredient of this package is a Pure script
named "faust2pd" which allows you to create Pd abstractions as "wrappers"
around Faust units. The wrappers generated by faust2pd can be used in Pd
patches just like any other Pd objects. They are much easier to operate than
the "naked" Faust plugins themselves, as they also provide "graph-on-parent"
GUI elements to inspect and change the control values.

The process to compile a plugin and build a wrapper patch is very similar to
what we've seen above. You only have to add the -xml option when invoking the
Faust compiler and run faust2pd on the resulting XML file:

@example
# compile the Faust source and generate the xml file
faust -a puredata.cpp -xml freeverb.dsp -o freeverb.cpp
# compile the C++ module to a Pd plugin
g++ -shared -Dmydsp=freeverb freeverb.cpp -o freeverb~.pd_linux
# generate the Pd patch from the xml file
faust2pd freeverb.dsp.xml
@end example

@noindent

Please see @pxref{a,,Wrapping DSPs with faust2pd} below for further details.

Note that, just as with other Pd externals and abstractions, the compiled
.pd_linux modules and wrapper patches must be put somewhere where Pd can find
them. To these ends you can either move the files into the directory with the
patches that use the plugin, or you can put them into the lib/pd/extra
directory or some other directory on Pd's library path for system-wide use.

Also, faust2pd-generated wrappers use a number of supporting abstractions (the
faust-*.pd files in the faust2pd sources), so you have to put these into the
directory of the main patch or install them under lib/pd/extra as well. (The
@code{make pd-install} step does the latter, see @pxref{5,,Installation} above.)

@node Control Interface,Examples,Quickstart,Top
@anchor{faust2pd control-interface}@anchor{b}
@chapter Control Interface


The control inlet of a Faust plugin understands messages in one of the
following forms:


@itemize -

@item 
@code{bang}, which reports all available controls of the unit on the control
outlet, in the form: @code{type name val init min max step}, where @code{type} is
the type of the control as specified in the Faust source (@code{checkbox},
@code{nentry}, etc.), @code{name} its (fully qualified) name, @code{val} the current
value, and @code{init}, @code{min}, @code{max}, @code{step} the initial value, minimum,
maximum and stepsize of the control, respectively.

@item 
@code{foo 0.99}, which sets the control @code{foo} to the value 0.99, and outputs
nothing.

@item 
Just @code{foo}, which outputs the (fully qualified) name and current value of
the @code{foo} control on the control outlet.
@end itemize

Control names can be specified in their fully qualified form, like e.g.
@code{/gnu/bar/foo} which indicates the control @code{foo} in the subgroup @code{bar}
of the topmost group @code{gnu}, following the hierarchical group layout defined
in the Faust source. This lets you distinguish between different controls with
the same name which are located in different groups. To find out about all the
controls of a unit and their fully qualified names, you can bang the control
inlet of the unit as described above, and connect its control outlet to a
@code{print} object, which will cause the descriptions of all controls to be
printed in Pd's main window. (The same information can also be used, e.g., to
initialize GUI elements with the proper values. Patches generated with
faust2pd rely on this.)

You can also specify just a part of the control path (like @code{bar/foo} or just
@code{foo} in the example above) which means that the message applies to @emph{all}
controls which have the given pathname as the final portion of their fully
qualified name. Thus, if there is more than one @code{foo} control in different
groups of the Faust unit then sending the message @code{foo} to the control inlet
will report the fully qualified name and value for each of them. Likewise,
sending @code{foo 0.99} will set the value of all controls named @code{foo} at once.

Concerning the naming of Faust controls in Pd you should also note the
following:


@itemize -

@item 
A unit name can be specified at object creation time, in which case the
given symbol is used as a prefix for all control names of the unit. E.g.,
the control @code{/gnu/bar/foo} of an object @code{baz~} created with @code{baz~
baz1} has the fully qualified name @code{/baz1/gnu/bar/foo}. This lets you
distinguish different instances of an object such as, e.g., different voices
of a polyphonic synth unit.

@item 
Pd's input syntax for symbols is rather restrictive. Therefore group and
control names in the Faust source are mangled into a form which only
contains alphanumeric characters and hyphens, so that the control names are
always legal Pd symbols. For instance, a Faust control name like @code{meter #1
(dB)} will become @code{meter-1-dB} which can be input directly as a symbol in
Pd without any problems.

@item 
"Anonymous" groups and controls (groups and controls which have empty labels
in the Faust source) are omitted from the path specification. E.g., if
@code{foo} is a control located in a main group with an empty name then the
fully qualified name of the control is just @code{/foo} rather than @code{//foo}.
Likewise, an anonymous control in the group @code{/foo/bar} is named just
@code{/foo/bar} instead of @code{/foo/bar/}.
@end itemize

Last but not least, there is also a special control named @code{active} which is
generated automatically for your convenience. The default behaviour of this
control is as follows:


@itemize -

@item 
When @code{active} is nonzero (the default), the unit works as usual.

@item 
When @code{active} is zero, and the unit's number of audio inputs and outputs
match, then the audio input is simply passed through.

@item 
When @code{active} is zero, but the unit's number of audio inputs and outputs
do @emph{not} match, then the unit generates silence.
@end itemize

The @code{active} control frequently alleviates the need for special "bypass" or
"mute" controls in the Faust source. However, if the default behaviour of the
generated control is not appropriate you can also define your own custom
version of @code{active} explicitly in the Faust program; in this case the custom
version will override the default one.

@node Examples,Wrapping DSPs with faust2pd,Control Interface,Top
@anchor{faust2pd examples}@anchor{c}
@chapter Examples


In the examples subdirectory you'll find a bunch of sample Faust DSPs and Pd
patches illustrating how Faust units are used in Pd.


@itemize -

@item 
The examples/basic/test.pd patch demonstrates the basics of operating "bare"
Faust plugins in Pd. You'll rarely have to do this when using the wrappers
generated with the faust2pd program, but it is a useful starting point to
take a look behind the scenes anyway.

@item 
The examples/faust directory contains all the examples from (an earlier
version of) the Faust distribution, along with corresponding Pd wrappers
generated with faust2pd. Have a look at examples/faust/faustdemo.pd to see
some of the DSPs in action. Note that not all examples from the Faust
distribution are working out of the box because of name clashes with Pd
builtins, so we renamed those. We also edited some of the .dsp sources
(e.g., turning buttons into checkboxes or sliders into nentries) where this
seemed necessary to make it easier to operate the Pd patches.

@item 
The examples/synth directory contains various plugins and patches showing
how to implement polyphonic synthesizers using Faust units. Take a look at
examples/synth/synth.pd for an example. If you have properly configured your
interfaces then you should be able to play the synthesizer via Pd's MIDI
input.

@item 
The examples/seqdemo/seqdemo.pd patch demonstrates how to operate a
multitimbral synth, built with Faust units, in an automatic fashion using a
pattern sequencer programmed in Pure. This example requires the Pure
interpreter as well as the pd-pure plugin available from
@indicateurl{http://purelang.bitbucket.org}.
@end itemize

@node Wrapping DSPs with faust2pd,Conclusion,Examples,Top
@anchor{faust2pd wrapping-dsps-with-faust2pd}@anchor{a}
@chapter Wrapping DSPs with faust2pd


The faust2pd script generates Pd patches from the dsp.xml files created by
Faust when run with the -xml option. Most of the sample patches were actually
created that way. After installation you can run the script as follows:

@example
faust2pd [-hVbs] [-f size] [-o output-file] [-n #voices]
  [-r max] [-X patterns] [-x width] [-y height] input-file
@end example

@noindent

The default output filename is @code{input-file} with new extension
@code{.pd}. Thus, @code{faust2pd filename.dsp.xml} creates a Pd patch named
@code{filename.pd} from the Faust XML description in @code{filename.dsp.xml}.

The faust2pd program understands a number of options which affect the layout
of the GUI elements and the contents of the generated patch. Here is a brief
list of the available options:


@table @option

@item -h
@itemx --help

display a short help message and exit

@item -V
@itemx --version

display the version number and exit

@item -b
@itemx --fake-buttons

replace buttons (bangs) with checkboxes (toggles)

@item -f
@itemx --font-size

font size for GUI elements (10 by default)

@item -n
@itemx --nvoices

create a synth patch with the given number of voices

@item -o
@itemx --output-file

output file name (.pd file)

@item -r
@itemx --radio-sliders

radio controls for sliders

@item -s
@itemx --slider-nums

sliders with additional number control

@item -X
@itemx --exclude

exclude controls matching the given glob patterns

@item -x
@itemx --width

maximum width of the GUI area

@item -y
@itemx --height

maximum height of the GUI area
@end table

Just like the Faust plugin itself, the generated patch has a control
input/output as the leftmost inlet/outlet pair, and the remaining plugs are
signal inlets and outlets for each audio input/output of the Faust
unit. However, the control inlet/outlet pair works slightly different from
that of the Faust plugin. Instead of being used for control replies, the
control outlet of the patch simply passes through its control input (after
processing messages which are understood by the wrapped plugin). By these
means control messages can flow along with the audio signal through an entire
chain of Faust units. (You can find an example of this in
examples/faust/faustdemo.pd.) Moreover, when generating a polyphonic synth
patch using the -n option then there will actually be two control inlets, one
for note messages and one for ordinary control messages; this is illustrated
in the examples/synth/synth.pd example.

The generated patch also includes the necessary GUI elements to see and change
all (active and passive) controls of the Faust unit. Faust control elements
are mapped to Pd GUI elements in an obvious fashion, following the horizontal
and vertical layout specified in the Faust source. The script also adds
special buttons for resetting all controls to their defaults and to operate
the special @code{active} control.

This generally works very well, but you should be aware that the control GUIs
generated by faust2pd are somewhat hampered by the limited range of GUI
elements available in a vanilla Pd installation. As a remedy, faust2pd
provides various options to change the content of the generated wrapper and
work around these limitations.


@itemize -

@item 
There are no real button widgets as required by the Faust specification,
so bangs are used instead. There is a global delay time for switching the
control from 1 back to 0, which can be changed by sending a value in
milliseconds to the @code{faust-delay} receiver. If you need interactive
control over the switching time then it is better to use checkboxes instead,
or you can have faust2pd automatically substitute checkboxes for all buttons
in a patch by invoking it with the -f a.k.a. --fake-buttons option.

@item 
Sliders in Pd do not display their value in numeric form so it may be hard
to figure out what the current value is. Therefore faust2pd has an option -s
a.k.a. --slider-nums which causes it to add a number box to each slider
control. (This flag also applies to Faust's passive bargraph controls, as
these are implemented using sliders, see below.)

@item 
Pd's sliders also have no provision for specifying a stepsize, so they are
an awkward way to input integral values from a small range. OTOH, Faust
doesn't support the "radio" control elements which Pd provides for that
purpose. As a remedy, faust2pd allows you to specify the option -r max
(a.k.a. --radio-sliders=max) to indicate that sliders with integral values
from the range 0..max-1 are to be mapped to corresponding Pd radio controls.

@item 
Faust's bargraphs are emulated using sliders. Note that these are passive
controls which just display a value computed by the Faust unit. A different
background color is used for these widgets so that you can distinguish them
from the ordinary (active) slider controls. The values shown in passive
controls are sampled every 40 ms by default. You can change this value by
sending an appropriate message to the global @code{faust-timer} receiver.

@item 
Since Pd has no "tabbed" (notebook-like) GUI element, Faust's tgroups are
mapped to hgroups instead. It may be difficult to present large and
complicated control interfaces without tabbed dialogs, though. As a remedy,
you can control the amount of horizontal or vertical space available for the
GUI area with the -x and -y (a.k.a. --width and --height) options and
faust2pd will then try to break rows and columns in the layout to make
everything fit within that area. (This feature has only been tested with
simple layouts so far, so beware.)

@item 
You can also exclude certain controls from appearing in the GUI using the -X
option. This option takes a comma-separated list of shell glob patterns
indicating either just the names or the fully qualified paths of Faust
controls which are to be excluded from the GUI. For instance, the option
@code{-X 'volume,meter*,faust/resonator?/*'} will exclude all volume controls,
all controls whose names start with @code{meter}, and all controls in groups
matching @code{faust/resonator?}. (Note that the argument to -X has to be
quoted if it contains any wildcards such as @code{*} and @code{?}, so that the
shell doesn't try to expand the patterns beforehand. Also note that only one
-X option is recognized, so you have to specify all controls to be excluded
as a single option.)

@item 
Faust group labels are not shown at all, since I haven't found an easy way
to draw some kind of labelled frame in Pd yet.
@end itemize

Despite these limitations, faust2pd appears to work rather well, at least for
the kind of DSPs found in the Faust distribution. (Still, for more complicated
control surfaces and interfaces to be used on stage you'll probably have to
edit the generated GUI layouts by hand.)

For convenience, all the content-related command line options mentioned above
can also be specified in the Faust source, as special tags in the label of the
toplevel group of the dsp. These take the form @code{[pd:option]} or
@code{[pd:option=value]} where @code{option} is any of the (long) options understood
by faust2pd. For instance:

@example
process = vgroup("mysynth [pd:nvoices=8] [pd:slider-nums]", ...);
@end example

@noindent

Source options carrying arguments, like @code{nvoices} in the above example, can
also be overridden with corresponding command line options.

@node Conclusion,Appendix faustxml,Wrapping DSPs with faust2pd,Top
@anchor{faust2pd conclusion}@anchor{d}
@chapter Conclusion


Creating Faust plugins for use with Pd has never been easier before, so I hope
that you'll soon have much joy trying your Faust programs in Pd. Add Pd-Pure
to this, and you can program all your specialized audio and control objects
using two modern-style functional languages which are much more fun than
C/C++. Of course there's an initial learning curve to be mastered, but IMHO it
is well worth the effort. The bottomline is that Pd+Faust+Pure really makes an
excellent combo which provides you with a powerful, programmable interactive
environment for creating advanced computer music and multimedia applications
with ease.

@menu
* Acknowledgements:: 

@end menu

@node Acknowledgements,,,Conclusion
@anchor{faust2pd acknowledgements}@anchor{e}
@section Acknowledgements


Thanks are due to Yann Orlarey for his wonderful Faust, which makes developing
DSP algorithms so easy and fun.

@c Appendix follows here.
@anchor{faust2pd module-faustxml}@anchor{0}
@geindex faustxml (module)

@node Appendix faustxml,Module Index,Conclusion,Top

@chapter Appendix: faustxml


The faustxml module is provided along with faust2pd to retrieve the
description of a Faust DSP from its XML file as a data structure which
is ready to be processed by Pure programs. It may also be useful in other
Pure applications which need to inspect description of Faust DSPs.

The main entry point is the @pxref{f,,info} function which takes the name of a
Faust-generated XML file as argument and returns a tuple @code{(name, descr,
version, in, out, controls)} with the name, description, version, number
of inputs and outputs and the toplevel group with the descriptions of the
controls of the dsp. A couple of other convenience functions are provided
to deal with the control descriptions.

@menu
* Usage:: 
* Data Structure:: 
* Operations:: 

@end menu

@node Usage,Data Structure,,Appendix faustxml
@anchor{faust2pd usage}@anchor{10}
@section Usage


Use the following declaration to import this module in your programs:

@example
using faustxml;
@end example

@noindent

For convenience, you can also use the following to get access to the
module's namespace:

@example
using namespace faustxml;
@end example

@noindent

@node Data Structure,Operations,Usage,Appendix faustxml
@anchor{faust2pd data-structure}@anchor{11}
@section Data Structure


The following constructors are used to represent the UI controls of Faust
DSPs:

@geindex faustxml;;button (constructor)
@geindex faustxml;;checkbox (constructor)
@anchor{faust2pd faustxml button}@anchor{12}
@deffn {Pure Constructor} faustxml::button label
@anchor{faust2pd faustxml checkbox}@anchor{13}
@deffnx {Pure Constructor} faustxml::checkbox label

A button or checkbox with the given label.
@end deffn

@geindex faustxml;;nentry (constructor)
@geindex faustxml;;vslider (constructor)
@geindex faustxml;;hslider (constructor)
@anchor{faust2pd faustxml nentry}@anchor{14}
@deffn {Pure Constructor} faustxml::nentry (label,init,min,max,step)
@anchor{faust2pd faustxml vslider}@anchor{15}
@deffnx {Pure Constructor} faustxml::vslider (label,init,min,max,step)
@anchor{faust2pd faustxml hslider}@anchor{16}
@deffnx {Pure Constructor} faustxml::hslider (label,init,min,max,step)

A numeric input control with the given label, initial value, range and
stepwidth.
@end deffn

@geindex faustxml;;vbargraph (constructor)
@geindex faustxml;;hbargraph (constructor)
@anchor{faust2pd faustxml vbargraph}@anchor{17}
@deffn {Pure Constructor} faustxml::vbargraph (label,min,max)
@anchor{faust2pd faustxml hbargraph}@anchor{18}
@deffnx {Pure Constructor} faustxml::hbargraph (label,min,max)

A numeric output control with the given label and range.
@end deffn

@geindex faustxml;;vgroup (constructor)
@geindex faustxml;;hgroup (constructor)
@geindex faustxml;;tgroup (constructor)
@anchor{faust2pd faustxml vgroup}@anchor{19}
@deffn {Pure Constructor} faustxml::vgroup (label,controls)
@anchor{faust2pd faustxml hgroup}@anchor{1a}
@deffnx {Pure Constructor} faustxml::hgroup (label,controls)
@anchor{faust2pd faustxml tgroup}@anchor{1b}
@deffnx {Pure Constructor} faustxml::tgroup (label,controls)

A group with the given label and list of controls in the group.
@end deffn


@node Operations,,Data Structure,Appendix faustxml
@anchor{faust2pd operations}@anchor{1c}
@section Operations


@geindex faustxml;;controlp (function)
@anchor{faust2pd faustxml controlp}@anchor{1d}
@deffn {Pure Function} faustxml::controlp x

Check for control description values.
@end deffn

@geindex faustxml;;control_type (function)
@geindex faustxml;;control_label (function)
@geindex faustxml;;control_args (function)
@anchor{faust2pd faustxml control_type}@anchor{1e}
@deffn {Pure Function} faustxml::control_type x
@anchor{faust2pd faustxml control_label}@anchor{1f}
@deffnx {Pure Function} faustxml::control_label x
@anchor{faust2pd faustxml control_args}@anchor{20}
@deffnx {Pure Function} faustxml::control_args x

Access functions for the various components of a control description.
@end deffn

@geindex faustxml;;controls (function)
@anchor{faust2pd faustxml controls}@anchor{21}
@deffn {Pure Function} faustxml::controls x

This function returns a flat representation of a control group @code{x} as
a list of basic control descriptions, which provides a quick way to
access all the control values of a Faust DSP. The grouping controls
themselves are omitted. You can pass the last component of the return
value of the @pxref{f,,info} function to this function.
@end deffn

@geindex faustxml;;pcontrols (function)
@anchor{faust2pd faustxml pcontrols}@anchor{22}
@deffn {Pure Function} faustxml::pcontrols x

Works like the @pxref{21,,controls} function above, but also replaces the label of
each basic control with a fully qualified path consisting of all control
labels leading up to the given control. Thus, e.g., the label of a
slider @code{"gain"} inside a group @code{"voice#0"} inside the main
@code{"faust"} group will be denoted by the label
@code{"faust/voice#0/gain"}.
@end deffn

@geindex faustxml;;info (function)
@anchor{faust2pd faustxml info}@anchor{f}
@deffn {Pure Function} faustxml::info fname

Extract the description of a Faust DSP from its XML file. This is the
main entry point. Returns a tuple with the name, description and version
of the DSP, as well as the number of inputs and outputs and the toplevel
group with all the control descriptions. Raises an exception if the XML
file doesn't exist or contains invalid contents.
@end deffn

Example:

@example
> using faustxml;
> let name,descr,version,in,out,group =
>   faustxml::info "examples/basic/freeverb.dsp.xml";
> name,descr,version,in,out;
"freeverb","freeverb -- a Schroeder reverb","1.0",2,2
> using system;
> do (puts.str) $ faustxml::pcontrols group;
faustxml::hslider ("freeverb/damp",0.5,0.0,1.0,0.025)
faustxml::hslider ("freeverb/roomsize",0.5,0.0,1.0,0.025)
faustxml::hslider ("freeverb/wet",0.3333,0.0,1.0,0.025)
@end example

@noindent

@node Module Index,Index,Appendix faustxml,Top
@unnumbered Module Index


@menu
* faustxml: 0. 
@end menu


@node Index,,Module Index,Top
@unnumbered Index


@printindex ge

@c %**end of body
@bye

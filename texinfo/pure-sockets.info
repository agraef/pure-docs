This is pure-sockets.info, produced by makeinfo version 6.5 from
pure-sockets.texi.

     Pure 0.66, January 16, 2018

     Albert Gräf (Editor)

     Copyright © 2009-2018, Albert Gräf et al

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-sockets: (pure-sockets.info). pure-sockets: Pure Sockets Interface
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: pure-sockets.info,  Node: Top,  Next: Installation,  Up: (dir)

pure-sockets
************

     Pure 0.66, January 16, 2018

     Albert Gräf (Editor)

     Copyright © 2009-2018, Albert Gräf et al

  Version 0.7, January 13, 2018

  Albert Gräf <<aggraef@gmail.com>>

  This is an interface to the Berkeley socket functions.  It provides
most of the core functionality, so you can create sockets for both
stream and datagram based protocols and use these to transmit messages.
Unix-style file sockets are also available if the host system supports
them.

* Menu:

* Installation::
* Usage::
* Example::
* Module Index::
* Index::


File: pure-sockets.info,  Node: Installation,  Next: Usage,  Prev: Top,  Up: Top

1 Installation
**************

Get the latest source from
‘https://bitbucket.org/purelang/pure-lang/downloads/pure-sockets-0.7.tar.gz’.

  Run ‘make’ to compile the module and ‘sudo make install’ to install it
in the Pure library directory.  To uninstall the module, use ‘sudo make
uninstall’.  There are a number of other targets (mostly for
maintainers), please see the Makefile for details.

  ‘make’ tries to guess your Pure installation directory and
platform-specific setup.  If it gets this wrong, you can set some
variables manually.  In particular, ‘make install prefix=/usr’ sets the
installation prefix, and ‘make PIC=-fPIC’ or some similar flag might be
needed for compilation on 64 bit systems.  You can also set custom
compilation options with the CFLAGS variable, e.g.: ‘make CFLAGS=-O3’.
Again, please see the Makefile for details.


File: pure-sockets.info,  Node: Usage,  Next: Example,  Prev: Installation,  Up: Top

2 Usage
*******

To use the operations of this module, put the following in your Pure
script:

     using sockets;


  With the *note sockets: 0. module loaded, all the standard socket
functions are available and work pretty much like in C. The only real
difference is that, for convenience, functions taking socket addresses
as parameters (‘struct_sockaddr*’ pointers in Pure), are called without
the ‘addrlen’ parameter; the size of the socket address structure will
be inferred automatically and passed to the underlying C functions.
Also, there are some convenience functions which act as wrappers around
‘getaddrinfo’ and ‘getnameinfo’ to create socket addresses from symbolic
information (hostname or ip, port names or numbers) and return
information about existing address pointers, see *note Creating and
Inspecting Socket Addresses: 5. below.

  Below is a list of the provided functions.  Please see the
corresponding manual pages for details, and check the Pure scripts in
the examples subdirectory for some examples.

* Menu:

* Creating and Inspecting Socket Addresses::
* Creating and Closing Sockets::
* Establishing Connections::
* Socket I/O::
* Socket Information::


File: pure-sockets.info,  Node: Creating and Inspecting Socket Addresses,  Next: Creating and Closing Sockets,  Up: Usage

2.1 Creating and Inspecting Socket Addresses
============================================

These functions are Pure-specific.  The created socket addresses are
malloc’ed and free themselves automatically when garbage-collected.

 -- Pure Function: sockaddr ()

     Create a pointer to an empty socket address suitable to hold the
     socket address result of routines like *note accept: 7, *note
     getsockname: 8, *note recvfrom: 9, etc.  which return a socket
     address.

 -- Pure Function: sockaddr ([int family,] char *path)

     Create a local (a.k.a.  file) socket address for the given
     pathname.  The ‘family’ parameter, if specified, must be ‘AF_UNIX’
     here.  Please note that ‘AF_UNIX’ is not supported on all
     platforms.  You can check for this by testing the ‘HAVE_AF_UNIX’
     constant, which is a truth value specifying whether ‘AF_UNIX’ is
     available on your system.

 -- Pure Function: sockaddr ([int family,] char *host, char *port)

 -- Pure Function: sockaddr ([int family,] char *host, int port)

     This uses ‘getaddrinfo’ to retrieve an ‘AF_INET’ or ‘AF_INET6’
     address for the given hostname (or numeric IP address in string
     form) and port (specified either as an int or a string).  If
     ‘family’ is omitted, it defaults to ‘AF_UNSPEC’ which matches both
     ‘AF_INET’ and ‘AF_INET6’ addresses.

 -- Pure Function: sockaddrs ([int family,] char *host, char *port)

 -- Pure Function: sockaddrs ([int family,] char *host, int port)

     This works like *note sockaddr: 6. above, but returns a list with
     _all_ matching addresses.

 -- Pure Function: sockaddr_family addr

     Returns the address family of the given address.

 -- Pure Function: sockaddr_path addr

     Returns the pathname for ‘AF_UNIX’ addresses.

 -- Pure Function: sockaddr_hostname addr

     Returns the hostname if available, the IP address otherwise.

 -- Pure Function: sockaddr_ip addr

     Returns the IP address.

 -- Pure Function: sockaddr_service addr

     Returns the service (a.k.a.  port) name.

 -- Pure Function: sockaddr_port addr

     Returns the port number.

 -- Pure Function: sockaddr_info addr

     Returns a readable description of a socket address, as a
     ‘(family,hostname,port)’ tuple.  You should be able to pass this
     into *note sockaddr: 6. again to get the original address.


File: pure-sockets.info,  Node: Creating and Closing Sockets,  Next: Establishing Connections,  Prev: Creating and Inspecting Socket Addresses,  Up: Usage

2.2 Creating and Closing Sockets
================================

 -- Pure Function: socket domain type protocol

     Creates a socket for the given protocol family (‘AF_UNIX’,
     ‘AF_INET’ or ‘AF_INET6’), socket type (‘SOCK_STREAM’, ‘SOCK_DGRAM’,
     etc.)  and protocol.  Note that on Linux we also support the
     ‘SOCK_NONBLOCK’ (non-blocking) and ‘SOCK_CLOEXEC’ (close-on-exec)
     flags which can be or’ed with the socket type to get sockets with
     the corresponding features.  The protocol number is usually 0,
     denoting the default protocol, but it can also be any of the
     prescribed ‘IPPROTO’ constants (a few common ones are predefined by
     this module, try ‘show -g IPPROTO_*’ for a list of those).

 -- Pure Function: socketpair domain type protocol sv

     Create a pair of sockets.  The descriptors are returned in the
     integer vector ‘sv’ passed in the last argument.

 -- Pure Function: shutdown fd how

     Perform shutdown on a socket.  The second argument should be one of
     ‘SHUT_RD’, ‘SHUT_WR’ and ‘SHUT_RDWR’.

 -- Pure Function: closesocket fd

     This is provided for Windows compatibility.  On POSIX systems this
     is just ‘close’.


File: pure-sockets.info,  Node: Establishing Connections,  Next: Socket I/O,  Prev: Creating and Closing Sockets,  Up: Usage

2.3 Establishing Connections
============================

 -- Pure Function: accept sockfd addr

 -- Pure Function: bind sockfd addr

 -- Pure Function: connect sockfd addr

 -- Pure Function: listen sockfd backlog


File: pure-sockets.info,  Node: Socket I/O,  Next: Socket Information,  Prev: Establishing Connections,  Up: Usage

2.4 Socket I/O
==============

 -- Pure Function: recv fd buf len flags

 -- Pure Function: send fd buf len flags

 -- Pure Function: recvfrom fd buf len flags addr

 -- Pure Function: sendto fd buf len flags addr

  The usual *note send: 1d./*note recv: 1c. flags specified by POSIX
(‘MSG_EOR’, ‘MSG_OOB’, ‘MSG_PEEK’, ‘MSG_WAITALL’) are provided.  On
Linux we also support ‘MSG_DONTWAIT’.  Note that on POSIX systems you
can also just ‘fdopen’ the socket descriptor and use the standard file
I/O operations from the ‘system’ module instead.


File: pure-sockets.info,  Node: Socket Information,  Prev: Socket I/O,  Up: Usage

2.5 Socket Information
======================

 -- Pure Function: getsockname fd addr

 -- Pure Function: getpeername fd addr

 -- Pure Function: getsockopt fd level name val len

 -- Pure Function: setsockopt fd level name val len

  For *note getsockopt: 21. and *note setsockopt: 22, currently only the
‘SOL_SOCKET’ level is defined (‘level’ argument) along with the
available POSIX socket options (‘name’ argument).  Try ‘show -g SO_*’ to
get a list of those.  Also note that for most socket level options the
‘val’ argument is actually an ‘int*’, so you can pass a Pure int vector
(with ‘len = SIZEOF_INT’) for that parameter.


File: pure-sockets.info,  Node: Example,  Next: Module Index,  Prev: Usage,  Up: Top

3 Example
*********

Here is a fairly minimal example using Unix stream sockets.  To keep
things simple, this does no error checking whatsoever and just keeps
sending strings back and forth.  More elaborate examples can be found in
the examples directory in the sources.

     using sockets, system;

     const path = "server_socket";
     extern int unlink(char *name);

     server = loop with
       loop = loop if ~null s && ~response fp s when
         // Connect to a client.
         cfd = accept fd $ sockaddr ();
         // Open the client socket as a FILE* and read a request.
         fp = fdopen cfd "r+"; s = fgets fp;
       end;
       loop = puts "server is exiting" $$ closesocket fd $$
              unlink path $$ () otherwise;
       response fp s::string = s=="quit\n" when
         // Process the request. (Here we just print the received
         // message and echo it back to the client.)
         printf "server> %s" s;
         fputs s fp;
       end;
     end when
       // Create the server socket and start listening.
       unlink path;
       fd = socket AF_UNIX SOCK_STREAM 0;
       bind fd (sockaddr path); listen fd 5;
       printf "server listening at '%s'\n" path;
     end;

     client = loop with
       // Keep reading requests from stdin.
       loop = loop if ~null s && ~request s when
         fputs "client> " stdout; s = fgets stdin;
       end;
       loop = puts "client is exiting" $$ () otherwise;
       request s::string = s=="quit\n" when
         fd = socket AF_UNIX SOCK_STREAM 0;
         connect fd (sockaddr path);
         // Send the request to the server.
         fp = fdopen fd "r+"; fputs s fp;
         // Get the reply.
         s = fgets fp;
       end;
     end;


  To use this example, run the ‘server’ function in one instance of the
Pure interpreter and the ‘client’ function in another.  Enter a line
when the client prompts you for input; it will be printed by the server.
Behind the scenes, the server also sends the line back to the client.
After receiving the reply, the client prompts for the next input line.
Entering end-of-file at the client prompt terminates the client but
keeps the server running, so that you can start another client and
reconnect to the server.  Entering just ‘quit’ in the client terminates
both server and client.  Here is how a typical interaction may look
like:

     > client;
     client> 1+1
     client> foo bar
     client> quit
     client is exiting
     ()

     > server;
     server listening at 'server_socket'
     server> 1+1
     server> foo bar
     server> quit
     server is exiting
     ()


  Note that while the server processes requests sequentially, it accepts
connections from a new client after each request, so that you can run as
many clients as you like.


File: pure-sockets.info,  Node: Module Index,  Next: Index,  Prev: Example,  Up: Top

Module Index
************

* Menu:

* sockets: 0.


File: pure-sockets.info,  Node: Index,  Prev: Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* accept (function):                     Establishing Connections.
                                                               (line  6)
* bind (function):                       Establishing Connections.
                                                               (line  8)
* closesocket (function):                Creating and Closing Sockets.
                                                               (line 28)
* connect (function):                    Establishing Connections.
                                                               (line 10)
* getpeername (function):                Socket Information.   (line  8)
* getsockname (function):                Socket Information.   (line  6)
* getsockopt (function):                 Socket Information.   (line 10)
* listen (function):                     Establishing Connections.
                                                               (line 12)
* recv (function):                       Socket I/O.           (line  6)
* recvfrom (function):                   Socket I/O.           (line 10)
* send (function):                       Socket I/O.           (line  8)
* sendto (function):                     Socket I/O.           (line 12)
* setsockopt (function):                 Socket Information.   (line 12)
* shutdown (function):                   Creating and Closing Sockets.
                                                               (line 23)
* sockaddr (function):                   Creating and Inspecting Socket Addresses.
                                                               (line  9)
* sockaddr (function) <1>:               Creating and Inspecting Socket Addresses.
                                                               (line 16)
* sockaddr (function) <2>:               Creating and Inspecting Socket Addresses.
                                                               (line 25)
* sockaddrs (function):                  Creating and Inspecting Socket Addresses.
                                                               (line 35)
* sockaddr_family (function):            Creating and Inspecting Socket Addresses.
                                                               (line 42)
* sockaddr_hostname (function):          Creating and Inspecting Socket Addresses.
                                                               (line 50)
* sockaddr_info (function):              Creating and Inspecting Socket Addresses.
                                                               (line 66)
* sockaddr_ip (function):                Creating and Inspecting Socket Addresses.
                                                               (line 54)
* sockaddr_path (function):              Creating and Inspecting Socket Addresses.
                                                               (line 46)
* sockaddr_port (function):              Creating and Inspecting Socket Addresses.
                                                               (line 62)
* sockaddr_service (function):           Creating and Inspecting Socket Addresses.
                                                               (line 58)
* socket (function):                     Creating and Closing Sockets.
                                                               (line  6)
* socketpair (function):                 Creating and Closing Sockets.
                                                               (line 18)
* sockets (module):                      Top.                  (line 12)



Tag Table:
Node: Top400
Ref: pure-sockets doc610
Ref: 1610
Node: Installation1044
Ref: pure-sockets pure-sockets-pure-sockets-interface1128
Ref: 21128
Ref: pure-sockets module-sockets1128
Ref: 01128
Ref: pure-sockets installation1128
Ref: 31128
Node: Usage2009
Ref: pure-sockets usage2097
Ref: 42097
Node: Creating and Inspecting Socket Addresses3298
Ref: pure-sockets creating-and-inspecting-socket-addresses3423
Ref: 53423
Ref: pure-sockets sockaddr3654
Ref: 63654
Ref: pure-sockets sockaddrs4832
Ref: a4832
Ref: pure-sockets sockaddr_family5071
Ref: b5071
Ref: pure-sockets sockaddr_path5167
Ref: c5167
Ref: pure-sockets sockaddr_hostname5262
Ref: d5262
Ref: pure-sockets sockaddr_ip5372
Ref: e5372
Ref: pure-sockets sockaddr_service5439
Ref: f5439
Ref: pure-sockets sockaddr_port5528
Ref: 105528
Ref: pure-sockets sockaddr_info5598
Ref: 115598
Node: Creating and Closing Sockets5838
Ref: pure-sockets creating-and-closing-sockets5996
Ref: 125996
Ref: pure-sockets socket6063
Ref: 136063
Ref: pure-sockets socketpair6766
Ref: 146766
Ref: pure-sockets shutdown6948
Ref: 156948
Ref: pure-sockets closesocket7113
Ref: 167113
Node: Establishing Connections7247
Ref: pure-sockets establishing-connections7375
Ref: 177375
Ref: pure-sockets accept7434
Ref: 77434
Ref: pure-sockets bind7473
Ref: 187473
Ref: pure-sockets connect7510
Ref: 197510
Ref: pure-sockets listen7550
Ref: 1a7550
Node: Socket I/O7592
Ref: pure-sockets socket-i-o7710
Ref: 1b7710
Ref: pure-sockets recv7741
Ref: 1c7741
Ref: pure-sockets send7783
Ref: 1d7783
Ref: pure-sockets recvfrom7825
Ref: 97825
Ref: pure-sockets sendto7876
Ref: 1e7876
Node: Socket Information8281
Ref: pure-sockets socket-information8366
Ref: 1f8366
Ref: pure-sockets getsockname8413
Ref: 88413
Ref: pure-sockets getpeername8453
Ref: 208453
Ref: pure-sockets getsockopt8493
Ref: 218493
Ref: pure-sockets setsockopt8546
Ref: 228546
Node: Example9027
Ref: pure-sockets example9115
Ref: 239115
Node: Module Index11924
Node: Index12063

End Tag Table


Local Variables:
coding: utf-8
End:
